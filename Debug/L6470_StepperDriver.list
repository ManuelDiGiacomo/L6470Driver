
L6470_StepperDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087a4  08000298  08000298  00001298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08008a3c  08008a3c  00009a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08008a54  08008a54  00009a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08008a58  08008a58  00009a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000010  24000000  08008a5c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000204  24000010  08008a6c  0000a010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24000214  08008a6c  0000a214  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0000a010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000d9ca  00000000  00000000  0000a03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001f73  00000000  00000000  00017a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000a70  00000000  00000000  00019980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000007d8  00000000  00000000  0001a3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00035b9d  00000000  00000000  0001abc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000ee97  00000000  00000000  00050765  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00154880  00000000  00000000  0005f5fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001b3e7c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002a0c  00000000  00000000  001b3ec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000006f  00000000  00000000  001b68cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08008a24 	.word	0x08008a24

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08008a24 	.word	0x08008a24

080002d8 <L6470_Init>:
 * @param config: Pointer to configuration structure
 * @param config: DMA selector
 * @return L6470_Status_t
 */
L6470_Status_t L6470_Init(L6470_Handle_t *hmotor, L6470_Config_t *config, bool with_DMA)
{
 80002d8:	b5b0      	push	{r4, r5, r7, lr}
 80002da:	b086      	sub	sp, #24
 80002dc:	af00      	add	r7, sp, #0
 80002de:	60f8      	str	r0, [r7, #12]
 80002e0:	60b9      	str	r1, [r7, #8]
 80002e2:	4613      	mov	r3, r2
 80002e4:	71fb      	strb	r3, [r7, #7]
    // Copy configuration
    hmotor->config = *config;
 80002e6:	68fa      	ldr	r2, [r7, #12]
 80002e8:	68bb      	ldr	r3, [r7, #8]
 80002ea:	4614      	mov	r4, r2
 80002ec:	461d      	mov	r5, r3
 80002ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    // Set default parameters
    hmotor->step_mode = L6470_STEP_MODE_1_16; // MODE
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	2204      	movs	r2, #4
 8000302:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    hmotor->max_speed = 1600; // max speed set to 1600 to  obtain in 1 s an half step
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800030c:	631a      	str	r2, [r3, #48]	@ 0x30
    hmotor->min_speed = 0;
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	2200      	movs	r2, #0
 8000312:	635a      	str	r2, [r3, #52]	@ 0x34
    hmotor->acceleration = 100; //100 steps s^2
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	2264      	movs	r2, #100	@ 0x64
 8000318:	639a      	str	r2, [r3, #56]	@ 0x38
    hmotor->deceleration = 100; //100 steps s^2
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	2264      	movs	r2, #100	@ 0x64
 800031e:	63da      	str	r2, [r3, #60]	@ 0x3c
    hmotor->config.transfer_complete = false;
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	2200      	movs	r2, #0
 8000324:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    hmotor->config.transfer_error = false;
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	2200      	movs	r2, #0
 800032c:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

    //Clear DMA buffers
    for (int i = 0; i < DMA_BUFFER_SIZE; i++)
 8000330:	2300      	movs	r3, #0
 8000332:	617b      	str	r3, [r7, #20]
 8000334:	e00e      	b.n	8000354 <L6470_Init+0x7c>
    {
    	hmotor->config.tx_buffer[i] = 0;
 8000336:	68fa      	ldr	r2, [r7, #12]
 8000338:	697b      	ldr	r3, [r7, #20]
 800033a:	4413      	add	r3, r2
 800033c:	331a      	adds	r3, #26
 800033e:	2200      	movs	r2, #0
 8000340:	701a      	strb	r2, [r3, #0]
    	hmotor->config.rx_buffer[i] = 0;
 8000342:	68fa      	ldr	r2, [r7, #12]
 8000344:	697b      	ldr	r3, [r7, #20]
 8000346:	4413      	add	r3, r2
 8000348:	3322      	adds	r3, #34	@ 0x22
 800034a:	2200      	movs	r2, #0
 800034c:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < DMA_BUFFER_SIZE; i++)
 800034e:	697b      	ldr	r3, [r7, #20]
 8000350:	3301      	adds	r3, #1
 8000352:	617b      	str	r3, [r7, #20]
 8000354:	697b      	ldr	r3, [r7, #20]
 8000356:	2b07      	cmp	r3, #7
 8000358:	dded      	ble.n	8000336 <L6470_Init+0x5e>
    }

    // Initialize GPIO pins
    L6470_CS_High(hmotor);
 800035a:	68f8      	ldr	r0, [r7, #12]
 800035c:	f000 fb94 	bl	8000a88 <L6470_CS_High>

    // Reset device
    if (L6470_Reset(hmotor) != L6470_OK)
 8000360:	68f8      	ldr	r0, [r7, #12]
 8000362:	f000 f871 	bl	8000448 <L6470_Reset>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <L6470_Init+0x98>
    {
    	return L6470_ERROR;
 800036c:	2301      	movs	r3, #1
 800036e:	e067      	b.n	8000440 <L6470_Init+0x168>
    }

    // Wait for device to be ready
    L6470_Delay(100);
 8000370:	2064      	movs	r0, #100	@ 0x64
 8000372:	f000 fbca 	bl	8000b0a <L6470_Delay>

    L6470_SetParam(hmotor, L6470_STEP_MODE, hmotor->step_mode);
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800037c:	461a      	mov	r2, r3
 800037e:	2116      	movs	r1, #22
 8000380:	68f8      	ldr	r0, [r7, #12]
 8000382:	f000 f887 	bl	8000494 <L6470_SetParam>

    if (with_DMA)
 8000386:	79fb      	ldrb	r3, [r7, #7]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d02c      	beq.n	80003e6 <L6470_Init+0x10e>
    {
      //Configure basic parameters with DMA
      L6470_SetParam_DMA(hmotor, L6470_MAX_SPEED, L6470_ConvertSpeed(hmotor->max_speed));
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000390:	4618      	mov	r0, r3
 8000392:	f000 fb39 	bl	8000a08 <L6470_ConvertSpeed>
 8000396:	4603      	mov	r3, r0
 8000398:	461a      	mov	r2, r3
 800039a:	2107      	movs	r1, #7
 800039c:	68f8      	ldr	r0, [r7, #12]
 800039e:	f000 fa76 	bl	800088e <L6470_SetParam_DMA>
      L6470_SetParam_DMA(hmotor, L6470_MIN_SPEED, L6470_ConvertSpeed(hmotor->min_speed));
 80003a2:	68fb      	ldr	r3, [r7, #12]
 80003a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80003a6:	4618      	mov	r0, r3
 80003a8:	f000 fb2e 	bl	8000a08 <L6470_ConvertSpeed>
 80003ac:	4603      	mov	r3, r0
 80003ae:	461a      	mov	r2, r3
 80003b0:	2108      	movs	r1, #8
 80003b2:	68f8      	ldr	r0, [r7, #12]
 80003b4:	f000 fa6b 	bl	800088e <L6470_SetParam_DMA>
      L6470_SetParam_DMA(hmotor, L6470_ACC, L6470_ConvertAcceleration(hmotor->acceleration));
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80003bc:	4618      	mov	r0, r3
 80003be:	f000 fb43 	bl	8000a48 <L6470_ConvertAcceleration>
 80003c2:	4603      	mov	r3, r0
 80003c4:	461a      	mov	r2, r3
 80003c6:	2105      	movs	r1, #5
 80003c8:	68f8      	ldr	r0, [r7, #12]
 80003ca:	f000 fa60 	bl	800088e <L6470_SetParam_DMA>
      L6470_SetParam_DMA(hmotor, L6470_DEC, L6470_ConvertAcceleration(hmotor->deceleration));
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80003d2:	4618      	mov	r0, r3
 80003d4:	f000 fb38 	bl	8000a48 <L6470_ConvertAcceleration>
 80003d8:	4603      	mov	r3, r0
 80003da:	461a      	mov	r2, r3
 80003dc:	2106      	movs	r1, #6
 80003de:	68f8      	ldr	r0, [r7, #12]
 80003e0:	f000 fa55 	bl	800088e <L6470_SetParam_DMA>
 80003e4:	e02b      	b.n	800043e <L6470_Init+0x166>
    }
    else
    {
    	// Configure basic parameters
			L6470_SetParam(hmotor, L6470_MAX_SPEED, L6470_ConvertSpeed(hmotor->max_speed));
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ea:	4618      	mov	r0, r3
 80003ec:	f000 fb0c 	bl	8000a08 <L6470_ConvertSpeed>
 80003f0:	4603      	mov	r3, r0
 80003f2:	461a      	mov	r2, r3
 80003f4:	2107      	movs	r1, #7
 80003f6:	68f8      	ldr	r0, [r7, #12]
 80003f8:	f000 f84c 	bl	8000494 <L6470_SetParam>
			L6470_SetParam(hmotor, L6470_MIN_SPEED, L6470_ConvertSpeed(hmotor->min_speed));
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000400:	4618      	mov	r0, r3
 8000402:	f000 fb01 	bl	8000a08 <L6470_ConvertSpeed>
 8000406:	4603      	mov	r3, r0
 8000408:	461a      	mov	r2, r3
 800040a:	2108      	movs	r1, #8
 800040c:	68f8      	ldr	r0, [r7, #12]
 800040e:	f000 f841 	bl	8000494 <L6470_SetParam>
			L6470_SetParam(hmotor, L6470_ACC, L6470_ConvertAcceleration(hmotor->acceleration));
 8000412:	68fb      	ldr	r3, [r7, #12]
 8000414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000416:	4618      	mov	r0, r3
 8000418:	f000 fb16 	bl	8000a48 <L6470_ConvertAcceleration>
 800041c:	4603      	mov	r3, r0
 800041e:	461a      	mov	r2, r3
 8000420:	2105      	movs	r1, #5
 8000422:	68f8      	ldr	r0, [r7, #12]
 8000424:	f000 f836 	bl	8000494 <L6470_SetParam>
			L6470_SetParam(hmotor, L6470_DEC, L6470_ConvertAcceleration(hmotor->deceleration));
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800042c:	4618      	mov	r0, r3
 800042e:	f000 fb0b 	bl	8000a48 <L6470_ConvertAcceleration>
 8000432:	4603      	mov	r3, r0
 8000434:	461a      	mov	r2, r3
 8000436:	2106      	movs	r1, #6
 8000438:	68f8      	ldr	r0, [r7, #12]
 800043a:	f000 f82b 	bl	8000494 <L6470_SetParam>
    }

    return L6470_OK;
 800043e:	2300      	movs	r3, #0
}
 8000440:	4618      	mov	r0, r3
 8000442:	3718      	adds	r7, #24
 8000444:	46bd      	mov	sp, r7
 8000446:	bdb0      	pop	{r4, r5, r7, pc}

08000448 <L6470_Reset>:
 * @brief Reset L6470 device
 * @param hmotor: Pointer to L6470 handle structure
 * @return L6470_Status_t
 */
L6470_Status_t L6470_Reset(L6470_Handle_t *hmotor)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
    // Hardware reset
    HAL_GPIO_WritePin(hmotor->config.reset_port, hmotor->config.reset_pin, GPIO_PIN_RESET);
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	68d8      	ldr	r0, [r3, #12]
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	8a1b      	ldrh	r3, [r3, #16]
 8000458:	2200      	movs	r2, #0
 800045a:	4619      	mov	r1, r3
 800045c:	f004 f9a6 	bl	80047ac <HAL_GPIO_WritePin>
    L6470_Delay(10);
 8000460:	200a      	movs	r0, #10
 8000462:	f000 fb52 	bl	8000b0a <L6470_Delay>
    HAL_GPIO_WritePin(hmotor->config.reset_port, hmotor->config.reset_pin, GPIO_PIN_SET);
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	68d8      	ldr	r0, [r3, #12]
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	8a1b      	ldrh	r3, [r3, #16]
 800046e:	2201      	movs	r2, #1
 8000470:	4619      	mov	r1, r3
 8000472:	f004 f99b 	bl	80047ac <HAL_GPIO_WritePin>
    L6470_Delay(10);
 8000476:	200a      	movs	r0, #10
 8000478:	f000 fb47 	bl	8000b0a <L6470_Delay>

    // Software reset (the ResetDevice command resets the device to power-up conditions)
    L6470_SendCommand(hmotor, L6470_RESET_DEVICE);
 800047c:	21c0      	movs	r1, #192	@ 0xc0
 800047e:	6878      	ldr	r0, [r7, #4]
 8000480:	f000 f8f9 	bl	8000676 <L6470_SendCommand>
    L6470_Delay(10);
 8000484:	200a      	movs	r0, #10
 8000486:	f000 fb40 	bl	8000b0a <L6470_Delay>

    return L6470_OK;
 800048a:	2300      	movs	r3, #0
}
 800048c:	4618      	mov	r0, r3
 800048e:	3708      	adds	r7, #8
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}

08000494 <L6470_SetParam>:
 * @param param: Parameter to set
 * @param value: Value to set
 * @return L6470_Status_t
 */
L6470_Status_t L6470_SetParam(L6470_Handle_t *hmotor, uint8_t param, uint32_t value)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b088      	sub	sp, #32
 8000498:	af00      	add	r7, sp, #0
 800049a:	60f8      	str	r0, [r7, #12]
 800049c:	460b      	mov	r3, r1
 800049e:	607a      	str	r2, [r7, #4]
 80004a0:	72fb      	strb	r3, [r7, #11]
    uint8_t length = L6470_GetParamLength(param);
 80004a2:	7afb      	ldrb	r3, [r7, #11]
 80004a4:	4618      	mov	r0, r3
 80004a6:	f000 fb0f 	bl	8000ac8 <L6470_GetParamLength>
 80004aa:	4603      	mov	r3, r0
 80004ac:	76fb      	strb	r3, [r7, #27]
    uint8_t data[4];

    data[0] = L6470_SET_PARAM | param;
 80004ae:	7afb      	ldrb	r3, [r7, #11]
 80004b0:	753b      	strb	r3, [r7, #20]

    //Store value in data buffer
    for (int i = 0; i < length; i++)
 80004b2:	2300      	movs	r3, #0
 80004b4:	61fb      	str	r3, [r7, #28]
 80004b6:	e010      	b.n	80004da <L6470_SetParam+0x46>
    {
        data[i + 1] = (value >> (8 * (length - 1 - i))) & 0xFF;
 80004b8:	7efb      	ldrb	r3, [r7, #27]
 80004ba:	1e5a      	subs	r2, r3, #1
 80004bc:	69fb      	ldr	r3, [r7, #28]
 80004be:	1ad3      	subs	r3, r2, r3
 80004c0:	00db      	lsls	r3, r3, #3
 80004c2:	687a      	ldr	r2, [r7, #4]
 80004c4:	40da      	lsrs	r2, r3
 80004c6:	69fb      	ldr	r3, [r7, #28]
 80004c8:	3301      	adds	r3, #1
 80004ca:	b2d2      	uxtb	r2, r2
 80004cc:	3320      	adds	r3, #32
 80004ce:	443b      	add	r3, r7
 80004d0:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (int i = 0; i < length; i++)
 80004d4:	69fb      	ldr	r3, [r7, #28]
 80004d6:	3301      	adds	r3, #1
 80004d8:	61fb      	str	r3, [r7, #28]
 80004da:	7efb      	ldrb	r3, [r7, #27]
 80004dc:	69fa      	ldr	r2, [r7, #28]
 80004de:	429a      	cmp	r2, r3
 80004e0:	dbea      	blt.n	80004b8 <L6470_SetParam+0x24>
    }

    L6470_CS_Low(hmotor);
 80004e2:	68f8      	ldr	r0, [r7, #12]
 80004e4:	f000 fae0 	bl	8000aa8 <L6470_CS_Low>
    L6470_SendData(hmotor, data, length + 1);
 80004e8:	7efb      	ldrb	r3, [r7, #27]
 80004ea:	3301      	adds	r3, #1
 80004ec:	b2da      	uxtb	r2, r3
 80004ee:	f107 0314 	add.w	r3, r7, #20
 80004f2:	4619      	mov	r1, r3
 80004f4:	68f8      	ldr	r0, [r7, #12]
 80004f6:	f000 fa5d 	bl	80009b4 <L6470_SendData>
    L6470_CS_High(hmotor);
 80004fa:	68f8      	ldr	r0, [r7, #12]
 80004fc:	f000 fac4 	bl	8000a88 <L6470_CS_High>

    return L6470_OK;
 8000500:	2300      	movs	r3, #0
}
 8000502:	4618      	mov	r0, r3
 8000504:	3720      	adds	r7, #32
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}

0800050a <L6470_GetParam>:
 * @param hmotor: Pointer to L6470 handle structure
 * @param param: Parameter to get
 * @return Parameter value
 */
uint32_t L6470_GetParam(L6470_Handle_t *hmotor, uint8_t param)
{
 800050a:	b580      	push	{r7, lr}
 800050c:	b086      	sub	sp, #24
 800050e:	af00      	add	r7, sp, #0
 8000510:	6078      	str	r0, [r7, #4]
 8000512:	460b      	mov	r3, r1
 8000514:	70fb      	strb	r3, [r7, #3]
    uint8_t length = L6470_GetParamLength(param);
 8000516:	78fb      	ldrb	r3, [r7, #3]
 8000518:	4618      	mov	r0, r3
 800051a:	f000 fad5 	bl	8000ac8 <L6470_GetParamLength>
 800051e:	4603      	mov	r3, r0
 8000520:	73fb      	strb	r3, [r7, #15]
    uint8_t cmd = L6470_GET_PARAM | param;
 8000522:	78fb      	ldrb	r3, [r7, #3]
 8000524:	f043 0320 	orr.w	r3, r3, #32
 8000528:	b2db      	uxtb	r3, r3
 800052a:	73bb      	strb	r3, [r7, #14]
    uint8_t data[4] = {0};
 800052c:	2300      	movs	r3, #0
 800052e:	60bb      	str	r3, [r7, #8]
    uint32_t value = 0;
 8000530:	2300      	movs	r3, #0
 8000532:	617b      	str	r3, [r7, #20]

    L6470_CS_Low(hmotor);
 8000534:	6878      	ldr	r0, [r7, #4]
 8000536:	f000 fab7 	bl	8000aa8 <L6470_CS_Low>
    L6470_SendData(hmotor, &cmd, 1);
 800053a:	f107 030e 	add.w	r3, r7, #14
 800053e:	2201      	movs	r2, #1
 8000540:	4619      	mov	r1, r3
 8000542:	6878      	ldr	r0, [r7, #4]
 8000544:	f000 fa36 	bl	80009b4 <L6470_SendData>
    L6470_ReceiveData(hmotor, data, length);
 8000548:	7bfa      	ldrb	r2, [r7, #15]
 800054a:	f107 0308 	add.w	r3, r7, #8
 800054e:	4619      	mov	r1, r3
 8000550:	6878      	ldr	r0, [r7, #4]
 8000552:	f000 fa43 	bl	80009dc <L6470_ReceiveData>
    L6470_CS_High(hmotor);
 8000556:	6878      	ldr	r0, [r7, #4]
 8000558:	f000 fa96 	bl	8000a88 <L6470_CS_High>

    //Store value in data buffer
    for (int i = 0; i < length; i++)
 800055c:	2300      	movs	r3, #0
 800055e:	613b      	str	r3, [r7, #16]
 8000560:	e00b      	b.n	800057a <L6470_GetParam+0x70>
    {
    	value = (value << 8) | data[i];
 8000562:	697b      	ldr	r3, [r7, #20]
 8000564:	021b      	lsls	r3, r3, #8
 8000566:	f107 0108 	add.w	r1, r7, #8
 800056a:	693a      	ldr	r2, [r7, #16]
 800056c:	440a      	add	r2, r1
 800056e:	7812      	ldrb	r2, [r2, #0]
 8000570:	4313      	orrs	r3, r2
 8000572:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < length; i++)
 8000574:	693b      	ldr	r3, [r7, #16]
 8000576:	3301      	adds	r3, #1
 8000578:	613b      	str	r3, [r7, #16]
 800057a:	7bfb      	ldrb	r3, [r7, #15]
 800057c:	693a      	ldr	r2, [r7, #16]
 800057e:	429a      	cmp	r2, r3
 8000580:	dbef      	blt.n	8000562 <L6470_GetParam+0x58>
    }

    return value;
 8000582:	697b      	ldr	r3, [r7, #20]
}
 8000584:	4618      	mov	r0, r3
 8000586:	3718      	adds	r7, #24
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}

0800058c <L6470_GoTo>:
 * @brief Move motor to absolute position
 * @param hmotor: Pointer to L6470 handle structure
 * @param position: Target position
 */
void L6470_GoTo(L6470_Handle_t *hmotor, uint32_t position)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	6039      	str	r1, [r7, #0]
    uint8_t data[4];

    data[0] = L6470_GOTO;
 8000596:	2360      	movs	r3, #96	@ 0x60
 8000598:	733b      	strb	r3, [r7, #12]
    data[1] = (position >> 16) & 0xFF;
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	0c1b      	lsrs	r3, r3, #16
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	737b      	strb	r3, [r7, #13]
    data[2] = (position >> 8) & 0xFF;
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	0a1b      	lsrs	r3, r3, #8
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	73bb      	strb	r3, [r7, #14]
    data[3] = position & 0xFF;
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	73fb      	strb	r3, [r7, #15]

    L6470_CS_Low(hmotor);
 80005b0:	6878      	ldr	r0, [r7, #4]
 80005b2:	f000 fa79 	bl	8000aa8 <L6470_CS_Low>
    L6470_SendData(hmotor, data, 4);
 80005b6:	f107 030c 	add.w	r3, r7, #12
 80005ba:	2204      	movs	r2, #4
 80005bc:	4619      	mov	r1, r3
 80005be:	6878      	ldr	r0, [r7, #4]
 80005c0:	f000 f9f8 	bl	80009b4 <L6470_SendData>
    L6470_CS_High(hmotor);
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f000 fa5f 	bl	8000a88 <L6470_CS_High>
}
 80005ca:	bf00      	nop
 80005cc:	3710      	adds	r7, #16
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
	...

080005d4 <L6470_GetPosition>:
 * @brief Get current motor position
 * @param hmotor: Pointer to L6470 handle structure
 * @return Current position (signed)
 */
int32_t L6470_GetPosition(L6470_Handle_t *hmotor)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
    uint32_t pos = L6470_GetParam(hmotor, L6470_ABS_POS);
 80005dc:	2101      	movs	r1, #1
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f7ff ff93 	bl	800050a <L6470_GetParam>
 80005e4:	60f8      	str	r0, [r7, #12]

    // Convert to signed value (22-bit 2's complement)
    if (pos & 0x200000)
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d003      	beq.n	80005f8 <L6470_GetPosition+0x24>
    {
    	pos |= 0xFFC00000;
 80005f0:	68fa      	ldr	r2, [r7, #12]
 80005f2:	4b04      	ldr	r3, [pc, #16]	@ (8000604 <L6470_GetPosition+0x30>)
 80005f4:	4313      	orrs	r3, r2
 80005f6:	60fb      	str	r3, [r7, #12]
    }

    return (int32_t)pos;
 80005f8:	68fb      	ldr	r3, [r7, #12]
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	3710      	adds	r7, #16
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	ffc00000 	.word	0xffc00000

08000608 <L6470_IsBusy>:
 * @brief Check if motor is busy
 * @param hmotor: Pointer to L6470 handle structure
 * @return 1 if busy, 0 if not busy
 */
uint8_t L6470_IsBusy(L6470_Handle_t *hmotor)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
    return !HAL_GPIO_ReadPin(hmotor->config.busy_port, hmotor->config.busy_pin);
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	695a      	ldr	r2, [r3, #20]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	8b1b      	ldrh	r3, [r3, #24]
 8000618:	4619      	mov	r1, r3
 800061a:	4610      	mov	r0, r2
 800061c:	f004 f8ae 	bl	800477c <HAL_GPIO_ReadPin>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	bf0c      	ite	eq
 8000626:	2301      	moveq	r3, #1
 8000628:	2300      	movne	r3, #0
 800062a:	b2db      	uxtb	r3, r3
}
 800062c:	4618      	mov	r0, r3
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <L6470_WaitWhileBusy>:
 * @param hmotor: Pointer to L6470 handle structure
 * @param timeout_ms: Timeout in milliseconds
 * @return L6470_Status_t
 */
L6470_Status_t L6470_WaitWhileBusy(L6470_Handle_t *hmotor, uint32_t timeout_ms)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	6039      	str	r1, [r7, #0]
    uint32_t start_time = HAL_GetTick();
 800063e:	f000 ff59 	bl	80014f4 <HAL_GetTick>
 8000642:	60f8      	str	r0, [r7, #12]

    while (L6470_IsBusy(hmotor)) {
 8000644:	e00c      	b.n	8000660 <L6470_WaitWhileBusy+0x2c>
        if ((HAL_GetTick() - start_time) > timeout_ms) {
 8000646:	f000 ff55 	bl	80014f4 <HAL_GetTick>
 800064a:	4602      	mov	r2, r0
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	1ad3      	subs	r3, r2, r3
 8000650:	683a      	ldr	r2, [r7, #0]
 8000652:	429a      	cmp	r2, r3
 8000654:	d201      	bcs.n	800065a <L6470_WaitWhileBusy+0x26>
            return L6470_TIMEOUT;
 8000656:	2303      	movs	r3, #3
 8000658:	e009      	b.n	800066e <L6470_WaitWhileBusy+0x3a>
        }
        L6470_Delay(1);
 800065a:	2001      	movs	r0, #1
 800065c:	f000 fa55 	bl	8000b0a <L6470_Delay>
    while (L6470_IsBusy(hmotor)) {
 8000660:	6878      	ldr	r0, [r7, #4]
 8000662:	f7ff ffd1 	bl	8000608 <L6470_IsBusy>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d1ec      	bne.n	8000646 <L6470_WaitWhileBusy+0x12>
    }

    return L6470_OK;
 800066c:	2300      	movs	r3, #0
}
 800066e:	4618      	mov	r0, r3
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}

08000676 <L6470_SendCommand>:
 * @param hmotor: Pointer to L6470 handle structure
 * @param command: Command to send
 * @return Response byte
 */
uint8_t L6470_SendCommand(L6470_Handle_t *hmotor, uint8_t command)
{
 8000676:	b580      	push	{r7, lr}
 8000678:	b086      	sub	sp, #24
 800067a:	af02      	add	r7, sp, #8
 800067c:	6078      	str	r0, [r7, #4]
 800067e:	460b      	mov	r3, r1
 8000680:	70fb      	strb	r3, [r7, #3]
    uint8_t response;

    L6470_CS_Low(hmotor);
 8000682:	6878      	ldr	r0, [r7, #4]
 8000684:	f000 fa10 	bl	8000aa8 <L6470_CS_Low>
    HAL_SPI_TransmitReceive(hmotor->config.hspi, &command, &response, 1, HAL_MAX_DELAY);
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	6818      	ldr	r0, [r3, #0]
 800068c:	f107 020f 	add.w	r2, r7, #15
 8000690:	1cf9      	adds	r1, r7, #3
 8000692:	f04f 33ff 	mov.w	r3, #4294967295
 8000696:	9300      	str	r3, [sp, #0]
 8000698:	2301      	movs	r3, #1
 800069a:	f007 f957 	bl	800794c <HAL_SPI_TransmitReceive>
    L6470_CS_High(hmotor);
 800069e:	6878      	ldr	r0, [r7, #4]
 80006a0:	f000 f9f2 	bl	8000a88 <L6470_CS_High>

    return response;
 80006a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	3710      	adds	r7, #16
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}

080006ae <L6470_ResetPosition>:
 * @param hmotor: Pointer to L6470 handle structure
 * @param with_DMA: DMA selector
 * @return L6470_Status_t
 */
L6470_Status_t L6470_ResetPosition(L6470_Handle_t *hmotor, bool with_DMA)
{
 80006ae:	b580      	push	{r7, lr}
 80006b0:	b082      	sub	sp, #8
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	6078      	str	r0, [r7, #4]
 80006b6:	460b      	mov	r3, r1
 80006b8:	70fb      	strb	r3, [r7, #3]
		if(with_DMA)
 80006ba:	78fb      	ldrb	r3, [r7, #3]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d004      	beq.n	80006ca <L6470_ResetPosition+0x1c>
		{
			L6470_SendCommand_DMA(hmotor, L6470_RESET_POS);
 80006c0:	21d8      	movs	r1, #216	@ 0xd8
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	f000 f80a 	bl	80006dc <L6470_SendCommand_DMA>
 80006c8:	e003      	b.n	80006d2 <L6470_ResetPosition+0x24>
		}
		else
		{
	    L6470_SendCommand(hmotor, L6470_RESET_POS);
 80006ca:	21d8      	movs	r1, #216	@ 0xd8
 80006cc:	6878      	ldr	r0, [r7, #4]
 80006ce:	f7ff ffd2 	bl	8000676 <L6470_SendCommand>
		}
		return L6470_OK;
 80006d2:	2300      	movs	r3, #0
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <L6470_SendCommand_DMA>:
 * @param hmotor: Pointer to L6470 handle structure
 * @param command: Command to send
 * @return HAL_StatusTypeDef
 */
HAL_StatusTypeDef L6470_SendCommand_DMA(L6470_Handle_t *hmotor, uint8_t command)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	460b      	mov	r3, r1
 80006e6:	70fb      	strb	r3, [r7, #3]
	hmotor->config.transfer_complete = false;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2200      	movs	r2, #0
 80006ec:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	hmotor->config.transfer_error = false;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	2200      	movs	r2, #0
 80006f4:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

	// Prepare command to transmit
	hmotor->config.tx_buffer[0] = command;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	78fa      	ldrb	r2, [r7, #3]
 80006fc:	769a      	strb	r2, [r3, #26]

	L6470_CS_Low(hmotor);
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	f000 f9d2 	bl	8000aa8 <L6470_CS_Low>

	HAL_StatusTypeDef status = HAL_SPI_TransmitReceive_DMA(hmotor->config.hspi,
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	6818      	ldr	r0, [r3, #0]
																												 hmotor->config.tx_buffer,
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	f103 011a 	add.w	r1, r3, #26
																												 hmotor->config.rx_buffer,
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	f103 0222 	add.w	r2, r3, #34	@ 0x22
	HAL_StatusTypeDef status = HAL_SPI_TransmitReceive_DMA(hmotor->config.hspi,
 8000714:	2301      	movs	r3, #1
 8000716:	f007 fc53 	bl	8007fc0 <HAL_SPI_TransmitReceive_DMA>
 800071a:	4603      	mov	r3, r0
 800071c:	73fb      	strb	r3, [r7, #15]
																												 1);

	if (status != HAL_OK)
 800071e:	7bfb      	ldrb	r3, [r7, #15]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d004      	beq.n	800072e <L6470_SendCommand_DMA+0x52>
	{
		L6470_CS_High(hmotor);
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f000 f9af 	bl	8000a88 <L6470_CS_High>
		return status;
 800072a:	7bfb      	ldrb	r3, [r7, #15]
 800072c:	e037      	b.n	800079e <L6470_SendCommand_DMA+0xc2>
	}

	// Wait for transfer completion
	uint32_t timeout = HAL_GetTick() + 100;
 800072e:	f000 fee1 	bl	80014f4 <HAL_GetTick>
 8000732:	4603      	mov	r3, r0
 8000734:	3364      	adds	r3, #100	@ 0x64
 8000736:	60bb      	str	r3, [r7, #8]
	while (!hmotor->config.transfer_complete && !hmotor->config.transfer_error && HAL_GetTick() < timeout)
 8000738:	e002      	b.n	8000740 <L6470_SendCommand_DMA+0x64>
	{
		//Wait for callbacks
		L6470_Delay(1);
 800073a:	2001      	movs	r0, #1
 800073c:	f000 f9e5 	bl	8000b0a <L6470_Delay>
	while (!hmotor->config.transfer_complete && !hmotor->config.transfer_error && HAL_GetTick() < timeout)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000746:	b2db      	uxtb	r3, r3
 8000748:	f083 0301 	eor.w	r3, r3, #1
 800074c:	b2db      	uxtb	r3, r3
 800074e:	2b00      	cmp	r3, #0
 8000750:	d00e      	beq.n	8000770 <L6470_SendCommand_DMA+0x94>
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8000758:	b2db      	uxtb	r3, r3
 800075a:	f083 0301 	eor.w	r3, r3, #1
 800075e:	b2db      	uxtb	r3, r3
 8000760:	2b00      	cmp	r3, #0
 8000762:	d005      	beq.n	8000770 <L6470_SendCommand_DMA+0x94>
 8000764:	f000 fec6 	bl	80014f4 <HAL_GetTick>
 8000768:	4602      	mov	r2, r0
 800076a:	68bb      	ldr	r3, [r7, #8]
 800076c:	4293      	cmp	r3, r2
 800076e:	d8e4      	bhi.n	800073a <L6470_SendCommand_DMA+0x5e>
	}

	L6470_CS_High(hmotor);
 8000770:	6878      	ldr	r0, [r7, #4]
 8000772:	f000 f989 	bl	8000a88 <L6470_CS_High>

	if (hmotor->config.transfer_error)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800077c:	b2db      	uxtb	r3, r3
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <L6470_SendCommand_DMA+0xaa>
		return HAL_ERROR;
 8000782:	2301      	movs	r3, #1
 8000784:	e00b      	b.n	800079e <L6470_SendCommand_DMA+0xc2>

	if (!hmotor->config.transfer_complete)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800078c:	b2db      	uxtb	r3, r3
 800078e:	f083 0301 	eor.w	r3, r3, #1
 8000792:	b2db      	uxtb	r3, r3
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <L6470_SendCommand_DMA+0xc0>
		return HAL_TIMEOUT;
 8000798:	2303      	movs	r3, #3
 800079a:	e000      	b.n	800079e <L6470_SendCommand_DMA+0xc2>

	return HAL_OK;
 800079c:	2300      	movs	r3, #0
}
 800079e:	4618      	mov	r0, r3
 80007a0:	3710      	adds	r7, #16
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <L6470_SendCommand_Data_DMA>:
 * @param command: Command to send
 * @param command: Data to send
 * @return HAL_StatusTypeDef
 */
HAL_StatusTypeDef L6470_SendCommand_Data_DMA(L6470_Handle_t *hmotor, uint8_t command, uint32_t data)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b086      	sub	sp, #24
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	60f8      	str	r0, [r7, #12]
 80007ae:	460b      	mov	r3, r1
 80007b0:	607a      	str	r2, [r7, #4]
 80007b2:	72fb      	strb	r3, [r7, #11]
	hmotor->config.transfer_complete = false;
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	2200      	movs	r2, #0
 80007b8:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	hmotor->config.transfer_error = false;
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	2200      	movs	r2, #0
 80007c0:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

	// Prepare data for transmission (MSB first)
	hmotor->config.tx_buffer[0] = command;
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	7afa      	ldrb	r2, [r7, #11]
 80007c8:	769a      	strb	r2, [r3, #26]
	hmotor->config.tx_buffer[1] = (data >> 16) & 0xFF;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	0c1b      	lsrs	r3, r3, #16
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	76da      	strb	r2, [r3, #27]
	hmotor->config.tx_buffer[2] = (data >> 8) & 0xFF;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	0a1b      	lsrs	r3, r3, #8
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	771a      	strb	r2, [r3, #28]
	hmotor->config.tx_buffer[3] = data & 0xFF;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	b2da      	uxtb	r2, r3
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	775a      	strb	r2, [r3, #29]

	L6470_CS_Low(hmotor);
 80007e6:	68f8      	ldr	r0, [r7, #12]
 80007e8:	f000 f95e 	bl	8000aa8 <L6470_CS_Low>

	HAL_StatusTypeDef status = HAL_SPI_TransmitReceive_DMA(hmotor->config.hspi,
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	6818      	ldr	r0, [r3, #0]
																												 hmotor->config.tx_buffer,
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	f103 011a 	add.w	r1, r3, #26
																												 hmotor->config.rx_buffer,
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	f103 0222 	add.w	r2, r3, #34	@ 0x22
	HAL_StatusTypeDef status = HAL_SPI_TransmitReceive_DMA(hmotor->config.hspi,
 80007fc:	2304      	movs	r3, #4
 80007fe:	f007 fbdf 	bl	8007fc0 <HAL_SPI_TransmitReceive_DMA>
 8000802:	4603      	mov	r3, r0
 8000804:	75fb      	strb	r3, [r7, #23]
																												 4);

	if (status != HAL_OK)
 8000806:	7dfb      	ldrb	r3, [r7, #23]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d004      	beq.n	8000816 <L6470_SendCommand_Data_DMA+0x70>
	{
		L6470_CS_High(hmotor);
 800080c:	68f8      	ldr	r0, [r7, #12]
 800080e:	f000 f93b 	bl	8000a88 <L6470_CS_High>
		return status;
 8000812:	7dfb      	ldrb	r3, [r7, #23]
 8000814:	e037      	b.n	8000886 <L6470_SendCommand_Data_DMA+0xe0>
	}

	// Wait for transfer completion
	uint32_t timeout = HAL_GetTick() + 100;
 8000816:	f000 fe6d 	bl	80014f4 <HAL_GetTick>
 800081a:	4603      	mov	r3, r0
 800081c:	3364      	adds	r3, #100	@ 0x64
 800081e:	613b      	str	r3, [r7, #16]
	while (!hmotor->config.transfer_complete && !hmotor->config.transfer_error && HAL_GetTick() < timeout)
 8000820:	e002      	b.n	8000828 <L6470_SendCommand_Data_DMA+0x82>
	{
		//Wait for callbacks
		L6470_Delay(1);
 8000822:	2001      	movs	r0, #1
 8000824:	f000 f971 	bl	8000b0a <L6470_Delay>
	while (!hmotor->config.transfer_complete && !hmotor->config.transfer_error && HAL_GetTick() < timeout)
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800082e:	b2db      	uxtb	r3, r3
 8000830:	f083 0301 	eor.w	r3, r3, #1
 8000834:	b2db      	uxtb	r3, r3
 8000836:	2b00      	cmp	r3, #0
 8000838:	d00e      	beq.n	8000858 <L6470_SendCommand_Data_DMA+0xb2>
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8000840:	b2db      	uxtb	r3, r3
 8000842:	f083 0301 	eor.w	r3, r3, #1
 8000846:	b2db      	uxtb	r3, r3
 8000848:	2b00      	cmp	r3, #0
 800084a:	d005      	beq.n	8000858 <L6470_SendCommand_Data_DMA+0xb2>
 800084c:	f000 fe52 	bl	80014f4 <HAL_GetTick>
 8000850:	4602      	mov	r2, r0
 8000852:	693b      	ldr	r3, [r7, #16]
 8000854:	4293      	cmp	r3, r2
 8000856:	d8e4      	bhi.n	8000822 <L6470_SendCommand_Data_DMA+0x7c>
	}

	L6470_CS_High(hmotor);
 8000858:	68f8      	ldr	r0, [r7, #12]
 800085a:	f000 f915 	bl	8000a88 <L6470_CS_High>

	if (hmotor->config.transfer_error)
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8000864:	b2db      	uxtb	r3, r3
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <L6470_SendCommand_Data_DMA+0xc8>
		return HAL_ERROR;
 800086a:	2301      	movs	r3, #1
 800086c:	e00b      	b.n	8000886 <L6470_SendCommand_Data_DMA+0xe0>

	if (!hmotor->config.transfer_complete)
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000874:	b2db      	uxtb	r3, r3
 8000876:	f083 0301 	eor.w	r3, r3, #1
 800087a:	b2db      	uxtb	r3, r3
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <L6470_SendCommand_Data_DMA+0xde>
		return HAL_TIMEOUT;
 8000880:	2303      	movs	r3, #3
 8000882:	e000      	b.n	8000886 <L6470_SendCommand_Data_DMA+0xe0>

	return HAL_OK;
 8000884:	2300      	movs	r3, #0
}
 8000886:	4618      	mov	r0, r3
 8000888:	3718      	adds	r7, #24
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <L6470_SetParam_DMA>:
 * @param param: parameter of configuration
 * @param value: value of parameter
 * @return HAL_StatusTypeDef
 */
HAL_StatusTypeDef L6470_SetParam_DMA(L6470_Handle_t *hmotor, uint8_t param, uint32_t value)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	b084      	sub	sp, #16
 8000892:	af00      	add	r7, sp, #0
 8000894:	60f8      	str	r0, [r7, #12]
 8000896:	460b      	mov	r3, r1
 8000898:	607a      	str	r2, [r7, #4]
 800089a:	72fb      	strb	r3, [r7, #11]
    return L6470_SendCommand_Data_DMA(hmotor, L6470_SET_PARAM | param, value);
 800089c:	7afb      	ldrb	r3, [r7, #11]
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	4619      	mov	r1, r3
 80008a2:	68f8      	ldr	r0, [r7, #12]
 80008a4:	f7ff ff7f 	bl	80007a6 <L6470_SendCommand_Data_DMA>
 80008a8:	4603      	mov	r3, r0
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3710      	adds	r7, #16
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <L6470_GetParam_DMA>:
 * @param param: parameter for the command to send
 * @param value: value read from the rx buffer
 * @return HAL_StatusTypeDef
 */
HAL_StatusTypeDef L6470_GetParam_DMA(L6470_Handle_t *hmotor, uint8_t param, uint32_t *value)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b086      	sub	sp, #24
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	60f8      	str	r0, [r7, #12]
 80008ba:	460b      	mov	r3, r1
 80008bc:	607a      	str	r2, [r7, #4]
 80008be:	72fb      	strb	r3, [r7, #11]
	hmotor->config.transfer_complete = false;
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	2200      	movs	r2, #0
 80008c4:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	hmotor->config.transfer_error = false;
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	2200      	movs	r2, #0
 80008cc:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

	hmotor->config.tx_buffer[0] = L6470_GET_PARAM | param;
 80008d0:	7afb      	ldrb	r3, [r7, #11]
 80008d2:	f043 0320 	orr.w	r3, r3, #32
 80008d6:	b2da      	uxtb	r2, r3
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	769a      	strb	r2, [r3, #26]
	hmotor->config.tx_buffer[1] = 0x00;
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	2200      	movs	r2, #0
 80008e0:	76da      	strb	r2, [r3, #27]
	hmotor->config.tx_buffer[2] = 0x00;
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	2200      	movs	r2, #0
 80008e6:	771a      	strb	r2, [r3, #28]
	hmotor->config.tx_buffer[3] = 0x00;
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	2200      	movs	r2, #0
 80008ec:	775a      	strb	r2, [r3, #29]

	L6470_CS_Low(hmotor);
 80008ee:	68f8      	ldr	r0, [r7, #12]
 80008f0:	f000 f8da 	bl	8000aa8 <L6470_CS_Low>

	HAL_StatusTypeDef status = HAL_SPI_TransmitReceive_DMA(hmotor->config.hspi,
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	6818      	ldr	r0, [r3, #0]
																												hmotor->config.tx_buffer,
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	f103 011a 	add.w	r1, r3, #26
																												hmotor->config.rx_buffer,
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	f103 0222 	add.w	r2, r3, #34	@ 0x22
	HAL_StatusTypeDef status = HAL_SPI_TransmitReceive_DMA(hmotor->config.hspi,
 8000904:	2304      	movs	r3, #4
 8000906:	f007 fb5b 	bl	8007fc0 <HAL_SPI_TransmitReceive_DMA>
 800090a:	4603      	mov	r3, r0
 800090c:	75fb      	strb	r3, [r7, #23]
																												4);

	if (status != HAL_OK)
 800090e:	7dfb      	ldrb	r3, [r7, #23]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d004      	beq.n	800091e <L6470_GetParam_DMA+0x6c>
	{
		L6470_CS_High(hmotor);
 8000914:	68f8      	ldr	r0, [r7, #12]
 8000916:	f000 f8b7 	bl	8000a88 <L6470_CS_High>
	  return status;
 800091a:	7dfb      	ldrb	r3, [r7, #23]
 800091c:	e046      	b.n	80009ac <L6470_GetParam_DMA+0xfa>
	}

	// Wait for transfer completion and check for errors
	uint32_t timeout = HAL_GetTick() + 100;
 800091e:	f000 fde9 	bl	80014f4 <HAL_GetTick>
 8000922:	4603      	mov	r3, r0
 8000924:	3364      	adds	r3, #100	@ 0x64
 8000926:	613b      	str	r3, [r7, #16]
	while (!hmotor->config.transfer_complete && !hmotor->config.transfer_error && HAL_GetTick() < timeout)
 8000928:	e002      	b.n	8000930 <L6470_GetParam_DMA+0x7e>
	{
		//Wait for callbacks
		L6470_Delay(1);
 800092a:	2001      	movs	r0, #1
 800092c:	f000 f8ed 	bl	8000b0a <L6470_Delay>
	while (!hmotor->config.transfer_complete && !hmotor->config.transfer_error && HAL_GetTick() < timeout)
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000936:	b2db      	uxtb	r3, r3
 8000938:	f083 0301 	eor.w	r3, r3, #1
 800093c:	b2db      	uxtb	r3, r3
 800093e:	2b00      	cmp	r3, #0
 8000940:	d00e      	beq.n	8000960 <L6470_GetParam_DMA+0xae>
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8000948:	b2db      	uxtb	r3, r3
 800094a:	f083 0301 	eor.w	r3, r3, #1
 800094e:	b2db      	uxtb	r3, r3
 8000950:	2b00      	cmp	r3, #0
 8000952:	d005      	beq.n	8000960 <L6470_GetParam_DMA+0xae>
 8000954:	f000 fdce 	bl	80014f4 <HAL_GetTick>
 8000958:	4602      	mov	r2, r0
 800095a:	693b      	ldr	r3, [r7, #16]
 800095c:	4293      	cmp	r3, r2
 800095e:	d8e4      	bhi.n	800092a <L6470_GetParam_DMA+0x78>
	}

	L6470_CS_High(hmotor);
 8000960:	68f8      	ldr	r0, [r7, #12]
 8000962:	f000 f891 	bl	8000a88 <L6470_CS_High>

	if (hmotor->config.transfer_error)
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800096c:	b2db      	uxtb	r3, r3
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <L6470_GetParam_DMA+0xc4>
	  return HAL_ERROR;
 8000972:	2301      	movs	r3, #1
 8000974:	e01a      	b.n	80009ac <L6470_GetParam_DMA+0xfa>

	if (!hmotor->config.transfer_complete)
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800097c:	b2db      	uxtb	r3, r3
 800097e:	f083 0301 	eor.w	r3, r3, #1
 8000982:	b2db      	uxtb	r3, r3
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <L6470_GetParam_DMA+0xda>
	  return HAL_TIMEOUT;
 8000988:	2303      	movs	r3, #3
 800098a:	e00f      	b.n	80009ac <L6470_GetParam_DMA+0xfa>

	// Extract received data
	*value = ((uint32_t)hmotor->config.rx_buffer[1] << 16) |
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8000992:	041a      	lsls	r2, r3, #16
					 ((uint32_t)hmotor->config.rx_buffer[2] << 8) |
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800099a:	021b      	lsls	r3, r3, #8
	*value = ((uint32_t)hmotor->config.rx_buffer[1] << 16) |
 800099c:	4313      	orrs	r3, r2
					 (uint32_t)hmotor->config.rx_buffer[3];
 800099e:	68fa      	ldr	r2, [r7, #12]
 80009a0:	f892 2025 	ldrb.w	r2, [r2, #37]	@ 0x25
					 ((uint32_t)hmotor->config.rx_buffer[2] << 8) |
 80009a4:	431a      	orrs	r2, r3
	*value = ((uint32_t)hmotor->config.rx_buffer[1] << 16) |
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	601a      	str	r2, [r3, #0]

	return HAL_OK;
 80009aa:	2300      	movs	r3, #0
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3718      	adds	r7, #24
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <L6470_SendData>:
 * @param hmotor: Pointer to L6470 handle structure
 * @param data: Data array to send
 * @param length: Length of data array
 */
void L6470_SendData(L6470_Handle_t *hmotor, uint8_t *data, uint8_t length)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	60f8      	str	r0, [r7, #12]
 80009bc:	60b9      	str	r1, [r7, #8]
 80009be:	4613      	mov	r3, r2
 80009c0:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(hmotor->config.hspi, data, length, HAL_MAX_DELAY);
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	6818      	ldr	r0, [r3, #0]
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	b29a      	uxth	r2, r3
 80009ca:	f04f 33ff 	mov.w	r3, #4294967295
 80009ce:	68b9      	ldr	r1, [r7, #8]
 80009d0:	f006 fb5c 	bl	800708c <HAL_SPI_Transmit>
}
 80009d4:	bf00      	nop
 80009d6:	3710      	adds	r7, #16
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}

080009dc <L6470_ReceiveData>:
 * @param hmotor: Pointer to L6470 handle structure
 * @param data: Buffer to receive data
 * @param length: Length of data to receive
 */
void L6470_ReceiveData(L6470_Handle_t *hmotor, uint8_t *data, uint8_t length)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	60b9      	str	r1, [r7, #8]
 80009e6:	4613      	mov	r3, r2
 80009e8:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Receive(hmotor->config.hspi, data, length, HAL_MAX_DELAY);
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	6818      	ldr	r0, [r3, #0]
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	b29a      	uxth	r2, r3
 80009f2:	f04f 33ff 	mov.w	r3, #4294967295
 80009f6:	68b9      	ldr	r1, [r7, #8]
 80009f8:	f006 fd36 	bl	8007468 <HAL_SPI_Receive>
}
 80009fc:	bf00      	nop
 80009fe:	3710      	adds	r7, #16
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	0000      	movs	r0, r0
	...

08000a08 <L6470_ConvertSpeed>:
 * @brief Convert speed from steps/sec to L6470 format
 * @param speed_steps_per_sec: Speed in steps per second
 * @return Converted speed value
 */
uint32_t L6470_ConvertSpeed(uint32_t speed_steps_per_sec)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
    return (uint32_t)((float)speed_steps_per_sec * 67.108864);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	ee07 3a90 	vmov	s15, r3
 8000a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a1a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a1e:	ed9f 6b08 	vldr	d6, [pc, #32]	@ 8000a40 <L6470_ConvertSpeed+0x38>
 8000a22:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000a26:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000a2a:	ee17 3a90 	vmov	r3, s15
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	f3af 8000 	nop.w
 8000a40:	a0b5ed8d 	.word	0xa0b5ed8d
 8000a44:	4050c6f7 	.word	0x4050c6f7

08000a48 <L6470_ConvertAcceleration>:
 * @brief Convert acceleration from steps/sec² to L6470 format
 * @param accel_steps_per_sec2: Acceleration in steps per second squared
 * @return Converted acceleration value
 */
uint32_t L6470_ConvertAcceleration(uint32_t accel_steps_per_sec2)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
    return (uint32_t)((float)accel_steps_per_sec2 * 0.068719);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	ee07 3a90 	vmov	s15, r3
 8000a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a5a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a5e:	ed9f 6b08 	vldr	d6, [pc, #32]	@ 8000a80 <L6470_ConvertAcceleration+0x38>
 8000a62:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000a66:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000a6a:	ee17 3a90 	vmov	r3, s15
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	f3af 8000 	nop.w
 8000a80:	819d2392 	.word	0x819d2392
 8000a84:	3fb19791 	.word	0x3fb19791

08000a88 <L6470_CS_High>:
/**
 * @brief Set CS pin high
 * @param hmotor: Pointer to L6470 handle structure
 */
static void L6470_CS_High(L6470_Handle_t *hmotor)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(hmotor->config.cs_port, hmotor->config.cs_pin, GPIO_PIN_SET);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6858      	ldr	r0, [r3, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	891b      	ldrh	r3, [r3, #8]
 8000a98:	2201      	movs	r2, #1
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	f003 fe86 	bl	80047ac <HAL_GPIO_WritePin>
}
 8000aa0:	bf00      	nop
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <L6470_CS_Low>:
/**
 * @brief Set CS pin low
 * @param hmotor: Pointer to L6470 handle structure
 */
static void L6470_CS_Low(L6470_Handle_t *hmotor)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(hmotor->config.cs_port, hmotor->config.cs_pin, GPIO_PIN_RESET);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	6858      	ldr	r0, [r3, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	891b      	ldrh	r3, [r3, #8]
 8000ab8:	2200      	movs	r2, #0
 8000aba:	4619      	mov	r1, r3
 8000abc:	f003 fe76 	bl	80047ac <HAL_GPIO_WritePin>
}
 8000ac0:	bf00      	nop
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <L6470_GetParamLength>:
 * @brief Get parameter length in bytes
 * @param param: Parameter ID
 * @return Length in bytes
 */
static uint8_t L6470_GetParamLength(uint32_t param)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
    switch (param) {
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000ad6:	d00f      	beq.n	8000af8 <L6470_GetParamLength+0x30>
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000ade:	d80d      	bhi.n	8000afc <L6470_GetParamLength+0x34>
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2b80      	cmp	r3, #128	@ 0x80
 8000ae4:	d008      	beq.n	8000af8 <L6470_GetParamLength+0x30>
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2b80      	cmp	r3, #128	@ 0x80
 8000aea:	d807      	bhi.n	8000afc <L6470_GetParamLength+0x34>
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2b02      	cmp	r3, #2
 8000af0:	d002      	beq.n	8000af8 <L6470_GetParamLength+0x30>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2b60      	cmp	r3, #96	@ 0x60
 8000af6:	d101      	bne.n	8000afc <L6470_GetParamLength+0x34>
        case L6470_STATUS_BUSY:
        case L6470_STATUS_MOT_STATUS:
        case L6470_STATUS_NOTPERF_CMD:
        case L6470_STATUS_WRONG_CMD:
            return 2;
 8000af8:	2302      	movs	r3, #2
 8000afa:	e000      	b.n	8000afe <L6470_GetParamLength+0x36>
        default:
            return 1;
 8000afc:	2301      	movs	r3, #1
    }
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr

08000b0a <L6470_Delay>:
/**
 * @brief Simple delay function
 * @param ms: Delay in milliseconds
 */
static void L6470_Delay(uint32_t ms)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b082      	sub	sp, #8
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	f000 fcfa 	bl	800150c <HAL_Delay>
}
 8000b18:	bf00      	nop
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b088      	sub	sp, #32
 8000b24:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b26:	f000 fc5f 	bl	80013e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b2a:	f000 f863 	bl	8000bf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b2e:	f000 f98b 	bl	8000e48 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b32:	f000 f931 	bl	8000d98 <MX_DMA_Init>
  MX_SPI1_Init();
 8000b36:	f000 f8d9 	bl	8000cec <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // Configuration of L6470 driver
  stepper_config.hspi = &hspi1;
 8000b3a:	4b2a      	ldr	r3, [pc, #168]	@ (8000be4 <main+0xc4>)
 8000b3c:	4a2a      	ldr	r2, [pc, #168]	@ (8000be8 <main+0xc8>)
 8000b3e:	601a      	str	r2, [r3, #0]
  stepper_config.cs_port = CS_GPIO_Port;
 8000b40:	4b28      	ldr	r3, [pc, #160]	@ (8000be4 <main+0xc4>)
 8000b42:	4a2a      	ldr	r2, [pc, #168]	@ (8000bec <main+0xcc>)
 8000b44:	605a      	str	r2, [r3, #4]
  stepper_config.cs_pin = CS_Pin;
 8000b46:	4b27      	ldr	r3, [pc, #156]	@ (8000be4 <main+0xc4>)
 8000b48:	2210      	movs	r2, #16
 8000b4a:	811a      	strh	r2, [r3, #8]
  stepper_config.reset_port = RESET_GPIO_Port;
 8000b4c:	4b25      	ldr	r3, [pc, #148]	@ (8000be4 <main+0xc4>)
 8000b4e:	4a27      	ldr	r2, [pc, #156]	@ (8000bec <main+0xcc>)
 8000b50:	60da      	str	r2, [r3, #12]
  stepper_config.reset_pin = RESET_Pin;
 8000b52:	4b24      	ldr	r3, [pc, #144]	@ (8000be4 <main+0xc4>)
 8000b54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b58:	821a      	strh	r2, [r3, #16]
  stepper_config.busy_port = BUSY_GPIO_Port;
 8000b5a:	4b22      	ldr	r3, [pc, #136]	@ (8000be4 <main+0xc4>)
 8000b5c:	4a23      	ldr	r2, [pc, #140]	@ (8000bec <main+0xcc>)
 8000b5e:	615a      	str	r2, [r3, #20]
  stepper_config.busy_pin = BUSY_Pin;
 8000b60:	4b20      	ldr	r3, [pc, #128]	@ (8000be4 <main+0xc4>)
 8000b62:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b66:	831a      	strh	r2, [r3, #24]

  /*********************************************
   *     		CONFIGURATION PARAMETERS
   *********************************************/
  uint32_t t_position = 1600;
 8000b68:	f44f 63c8 	mov.w	r3, #1600	@ 0x640
 8000b6c:	617b      	str	r3, [r7, #20]
  uint32_t timeout = 1500;
 8000b6e:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000b72:	613b      	str	r3, [r7, #16]
  uint32_t tolerance = 5;
 8000b74:	2305      	movs	r3, #5
 8000b76:	60fb      	str	r3, [r7, #12]
  L6470_Status_t status_move;
  bool with_DMA = false;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	72fb      	strb	r3, [r7, #11]
  uint32_t value_DMA = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	607b      	str	r3, [r7, #4]

  // Initialization function for the driver
  if (L6470_Init(&hstepper, &stepper_config, with_DMA) != L6470_OK)
 8000b80:	7afb      	ldrb	r3, [r7, #11]
 8000b82:	461a      	mov	r2, r3
 8000b84:	4917      	ldr	r1, [pc, #92]	@ (8000be4 <main+0xc4>)
 8000b86:	481a      	ldr	r0, [pc, #104]	@ (8000bf0 <main+0xd0>)
 8000b88:	f7ff fba6 	bl	80002d8 <L6470_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <main+0x76>
  {
    // Error Handler for initialization
    Error_Handler();
 8000b92:	f000 fa02 	bl	8000f9a <Error_Handler>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    //Reset to default position
    L6470_ResetPosition(&hstepper, with_DMA);
 8000b96:	7afb      	ldrb	r3, [r7, #11]
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4815      	ldr	r0, [pc, #84]	@ (8000bf0 <main+0xd0>)
 8000b9c:	f7ff fd87 	bl	80006ae <L6470_ResetPosition>
    HAL_Delay(1500); // Wait for motor movement completion
 8000ba0:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000ba4:	f000 fcb2 	bl	800150c <HAL_Delay>

    status_move = L6470_PreciseMove(&hstepper, t_position, timeout, tolerance, with_DMA);
 8000ba8:	7afb      	ldrb	r3, [r7, #11]
 8000baa:	9300      	str	r3, [sp, #0]
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	6979      	ldr	r1, [r7, #20]
 8000bb2:	480f      	ldr	r0, [pc, #60]	@ (8000bf0 <main+0xd0>)
 8000bb4:	f000 f996 	bl	8000ee4 <L6470_PreciseMove>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	72bb      	strb	r3, [r7, #10]

		if(status_move == L6470_TIMEOUT)
 8000bbc:	7abb      	ldrb	r3, [r7, #10]
 8000bbe:	2b03      	cmp	r3, #3
 8000bc0:	d101      	bne.n	8000bc6 <main+0xa6>
		{
			// Error Handler for PreciseMove in case of timeout
			Error_Handler();
 8000bc2:	f000 f9ea 	bl	8000f9a <Error_Handler>
		}

  	if(with_DMA)
 8000bc6:	7afb      	ldrb	r3, [r7, #11]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d005      	beq.n	8000bd8 <main+0xb8>
  	{
      // Get status
  		L6470_GetParam_DMA(&hstepper, L6470_STATUS, &value_DMA);
 8000bcc:	1d3b      	adds	r3, r7, #4
 8000bce:	461a      	mov	r2, r3
 8000bd0:	2119      	movs	r1, #25
 8000bd2:	4807      	ldr	r0, [pc, #28]	@ (8000bf0 <main+0xd0>)
 8000bd4:	f7ff fe6d 	bl	80008b2 <L6470_GetParam_DMA>
  		//TODO: Check status and log a failure in case of error
  	}

		HAL_Delay(5000);
 8000bd8:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000bdc:	f000 fc96 	bl	800150c <HAL_Delay>
    L6470_ResetPosition(&hstepper, with_DMA);
 8000be0:	e7d9      	b.n	8000b96 <main+0x76>
 8000be2:	bf00      	nop
 8000be4:	240001e4 	.word	0x240001e4
 8000be8:	2400002c 	.word	0x2400002c
 8000bec:	58020000 	.word	0x58020000
 8000bf0:	240001a4 	.word	0x240001a4

08000bf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b09c      	sub	sp, #112	@ 0x70
 8000bf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bfe:	224c      	movs	r2, #76	@ 0x4c
 8000c00:	2100      	movs	r1, #0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f007 fee1 	bl	80089ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c08:	1d3b      	adds	r3, r7, #4
 8000c0a:	2220      	movs	r2, #32
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f007 fedb 	bl	80089ca <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c14:	2002      	movs	r0, #2
 8000c16:	f003 fde3 	bl	80047e0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	603b      	str	r3, [r7, #0]
 8000c1e:	4b31      	ldr	r3, [pc, #196]	@ (8000ce4 <SystemClock_Config+0xf0>)
 8000c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c22:	4a30      	ldr	r2, [pc, #192]	@ (8000ce4 <SystemClock_Config+0xf0>)
 8000c24:	f023 0301 	bic.w	r3, r3, #1
 8000c28:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000c2a:	4b2e      	ldr	r3, [pc, #184]	@ (8000ce4 <SystemClock_Config+0xf0>)
 8000c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	603b      	str	r3, [r7, #0]
 8000c34:	4b2c      	ldr	r3, [pc, #176]	@ (8000ce8 <SystemClock_Config+0xf4>)
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c3c:	4a2a      	ldr	r2, [pc, #168]	@ (8000ce8 <SystemClock_Config+0xf4>)
 8000c3e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c42:	6193      	str	r3, [r2, #24]
 8000c44:	4b28      	ldr	r3, [pc, #160]	@ (8000ce8 <SystemClock_Config+0xf4>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c4c:	603b      	str	r3, [r7, #0]
 8000c4e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c50:	bf00      	nop
 8000c52:	4b25      	ldr	r3, [pc, #148]	@ (8000ce8 <SystemClock_Config+0xf4>)
 8000c54:	699b      	ldr	r3, [r3, #24]
 8000c56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c5e:	d1f8      	bne.n	8000c52 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c60:	2302      	movs	r3, #2
 8000c62:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000c64:	2301      	movs	r3, #1
 8000c66:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c68:	2340      	movs	r3, #64	@ 0x40
 8000c6a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c70:	2300      	movs	r3, #0
 8000c72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c74:	2304      	movs	r3, #4
 8000c76:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000c78:	230a      	movs	r3, #10
 8000c7a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c80:	2302      	movs	r3, #2
 8000c82:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c84:	2302      	movs	r3, #2
 8000c86:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c88:	230c      	movs	r3, #12
 8000c8a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f003 fddb 	bl	8004854 <HAL_RCC_OscConfig>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000ca4:	f000 f979 	bl	8000f9a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ca8:	233f      	movs	r3, #63	@ 0x3f
 8000caa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cac:	2300      	movs	r3, #0
 8000cae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	2101      	movs	r1, #1
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f004 fa1b 	bl	8005108 <HAL_RCC_ClockConfig>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000cd8:	f000 f95f 	bl	8000f9a <Error_Handler>
  }
}
 8000cdc:	bf00      	nop
 8000cde:	3770      	adds	r7, #112	@ 0x70
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	58000400 	.word	0x58000400
 8000ce8:	58024800 	.word	0x58024800

08000cec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000cf0:	4b27      	ldr	r3, [pc, #156]	@ (8000d90 <MX_SPI1_Init+0xa4>)
 8000cf2:	4a28      	ldr	r2, [pc, #160]	@ (8000d94 <MX_SPI1_Init+0xa8>)
 8000cf4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cf6:	4b26      	ldr	r3, [pc, #152]	@ (8000d90 <MX_SPI1_Init+0xa4>)
 8000cf8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000cfc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cfe:	4b24      	ldr	r3, [pc, #144]	@ (8000d90 <MX_SPI1_Init+0xa4>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d04:	4b22      	ldr	r3, [pc, #136]	@ (8000d90 <MX_SPI1_Init+0xa4>)
 8000d06:	2207      	movs	r2, #7
 8000d08:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d0a:	4b21      	ldr	r3, [pc, #132]	@ (8000d90 <MX_SPI1_Init+0xa4>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d10:	4b1f      	ldr	r3, [pc, #124]	@ (8000d90 <MX_SPI1_Init+0xa4>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d16:	4b1e      	ldr	r3, [pc, #120]	@ (8000d90 <MX_SPI1_Init+0xa4>)
 8000d18:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000d1c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000d1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000d90 <MX_SPI1_Init+0xa4>)
 8000d20:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8000d24:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d26:	4b1a      	ldr	r3, [pc, #104]	@ (8000d90 <MX_SPI1_Init+0xa4>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d2c:	4b18      	ldr	r3, [pc, #96]	@ (8000d90 <MX_SPI1_Init+0xa4>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d32:	4b17      	ldr	r3, [pc, #92]	@ (8000d90 <MX_SPI1_Init+0xa4>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000d38:	4b15      	ldr	r3, [pc, #84]	@ (8000d90 <MX_SPI1_Init+0xa4>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d3e:	4b14      	ldr	r3, [pc, #80]	@ (8000d90 <MX_SPI1_Init+0xa4>)
 8000d40:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d44:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d46:	4b12      	ldr	r3, [pc, #72]	@ (8000d90 <MX_SPI1_Init+0xa4>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d4c:	4b10      	ldr	r3, [pc, #64]	@ (8000d90 <MX_SPI1_Init+0xa4>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d52:	4b0f      	ldr	r3, [pc, #60]	@ (8000d90 <MX_SPI1_Init+0xa4>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d58:	4b0d      	ldr	r3, [pc, #52]	@ (8000d90 <MX_SPI1_Init+0xa4>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d90 <MX_SPI1_Init+0xa4>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d64:	4b0a      	ldr	r3, [pc, #40]	@ (8000d90 <MX_SPI1_Init+0xa4>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d6a:	4b09      	ldr	r3, [pc, #36]	@ (8000d90 <MX_SPI1_Init+0xa4>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d70:	4b07      	ldr	r3, [pc, #28]	@ (8000d90 <MX_SPI1_Init+0xa4>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d76:	4b06      	ldr	r3, [pc, #24]	@ (8000d90 <MX_SPI1_Init+0xa4>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d7c:	4804      	ldr	r0, [pc, #16]	@ (8000d90 <MX_SPI1_Init+0xa4>)
 8000d7e:	f006 f861 	bl	8006e44 <HAL_SPI_Init>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000d88:	f000 f907 	bl	8000f9a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d8c:	bf00      	nop
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	2400002c 	.word	0x2400002c
 8000d94:	40013000 	.word	0x40013000

08000d98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d9e:	4b11      	ldr	r3, [pc, #68]	@ (8000de4 <MX_DMA_Init+0x4c>)
 8000da0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000da4:	4a0f      	ldr	r2, [pc, #60]	@ (8000de4 <MX_DMA_Init+0x4c>)
 8000da6:	f043 0301 	orr.w	r3, r3, #1
 8000daa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000dae:	4b0d      	ldr	r3, [pc, #52]	@ (8000de4 <MX_DMA_Init+0x4c>)
 8000db0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000db4:	f003 0301 	and.w	r3, r3, #1
 8000db8:	607b      	str	r3, [r7, #4]
 8000dba:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	200b      	movs	r0, #11
 8000dc2:	f000 fcae 	bl	8001722 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000dc6:	200b      	movs	r0, #11
 8000dc8:	f000 fcc5 	bl	8001756 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2100      	movs	r1, #0
 8000dd0:	200c      	movs	r0, #12
 8000dd2:	f000 fca6 	bl	8001722 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000dd6:	200c      	movs	r0, #12
 8000dd8:	f000 fcbd 	bl	8001756 <HAL_NVIC_EnableIRQ>
}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	58024400 	.word	0x58024400

08000de8 <HAL_SPI_TxRxCpltCallback>:

/**
  * DMA TX/RX Callback Override
  */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI1)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a06      	ldr	r2, [pc, #24]	@ (8000e10 <HAL_SPI_TxRxCpltCallback+0x28>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d103      	bne.n	8000e02 <HAL_SPI_TxRxCpltCallback+0x1a>
    {
    	hstepper.config.transfer_complete = true;
 8000dfa:	4b06      	ldr	r3, [pc, #24]	@ (8000e14 <HAL_SPI_TxRxCpltCallback+0x2c>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    }
}
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	40013000 	.word	0x40013000
 8000e14:	240001a4 	.word	0x240001a4

08000e18 <HAL_SPI_ErrorCallback>:

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI1)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a06      	ldr	r2, [pc, #24]	@ (8000e40 <HAL_SPI_ErrorCallback+0x28>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d103      	bne.n	8000e32 <HAL_SPI_ErrorCallback+0x1a>
    {
    	hstepper.config.transfer_error = true;
 8000e2a:	4b06      	ldr	r3, [pc, #24]	@ (8000e44 <HAL_SPI_ErrorCallback+0x2c>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
    }
}
 8000e32:	bf00      	nop
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	40013000 	.word	0x40013000
 8000e44:	240001a4 	.word	0x240001a4

08000e48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4e:	1d3b      	adds	r3, r7, #4
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000edc <MX_GPIO_Init+0x94>)
 8000e5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e62:	4a1e      	ldr	r2, [pc, #120]	@ (8000edc <MX_GPIO_Init+0x94>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000edc <MX_GPIO_Init+0x94>)
 8000e6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	603b      	str	r3, [r7, #0]
 8000e78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|RESET_Pin, GPIO_PIN_RESET);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8000e80:	4817      	ldr	r0, [pc, #92]	@ (8000ee0 <MX_GPIO_Init+0x98>)
 8000e82:	f003 fc93 	bl	80047ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8000e86:	2310      	movs	r3, #16
 8000e88:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e92:	2300      	movs	r3, #0
 8000e94:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000e96:	1d3b      	adds	r3, r7, #4
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4811      	ldr	r0, [pc, #68]	@ (8000ee0 <MX_GPIO_Init+0x98>)
 8000e9c:	f003 fabe 	bl	800441c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUSY_Pin */
  GPIO_InitStruct.Pin = BUSY_Pin;
 8000ea0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ea4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	480b      	ldr	r0, [pc, #44]	@ (8000ee0 <MX_GPIO_Init+0x98>)
 8000eb4:	f003 fab2 	bl	800441c <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_Pin */
  GPIO_InitStruct.Pin = RESET_Pin;
 8000eb8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ebc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000ebe:	2311      	movs	r3, #17
 8000ec0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 8000eca:	1d3b      	adds	r3, r7, #4
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4804      	ldr	r0, [pc, #16]	@ (8000ee0 <MX_GPIO_Init+0x98>)
 8000ed0:	f003 faa4 	bl	800441c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ed4:	bf00      	nop
 8000ed6:	3718      	adds	r7, #24
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	58024400 	.word	0x58024400
 8000ee0:	58020000 	.word	0x58020000

08000ee4 <L6470_PreciseMove>:

/**
 * @brief Function for precise movement (with error handler)
 */
L6470_Status_t L6470_PreciseMove(L6470_Handle_t *hmotor, uint32_t target_position, uint32_t timeout_ms, uint32_t tolerance, bool with_DMA)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
 8000ef0:	603b      	str	r3, [r7, #0]
  uint32_t current_pos;
  uint32_t start_time = HAL_GetTick();
 8000ef2:	f000 faff 	bl	80014f4 <HAL_GetTick>
 8000ef6:	6138      	str	r0, [r7, #16]

  // Wait for completion with timeout
  if(L6470_WaitWhileBusy(hmotor, timeout_ms) == L6470_TIMEOUT)
 8000ef8:	6879      	ldr	r1, [r7, #4]
 8000efa:	68f8      	ldr	r0, [r7, #12]
 8000efc:	f7ff fb9a 	bl	8000634 <L6470_WaitWhileBusy>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b03      	cmp	r3, #3
 8000f04:	d101      	bne.n	8000f0a <L6470_PreciseMove+0x26>
  {
  	return L6470_TIMEOUT;
 8000f06:	2303      	movs	r3, #3
 8000f08:	e043      	b.n	8000f92 <L6470_PreciseMove+0xae>
  }

	// Perform the movement (sending command either with or without DMA)
  if(with_DMA)
 8000f0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d005      	beq.n	8000f1e <L6470_PreciseMove+0x3a>
  {
    L6470_SendCommand_Data_DMA(hmotor, L6470_GOTO, target_position);
 8000f12:	68ba      	ldr	r2, [r7, #8]
 8000f14:	2160      	movs	r1, #96	@ 0x60
 8000f16:	68f8      	ldr	r0, [r7, #12]
 8000f18:	f7ff fc45 	bl	80007a6 <L6470_SendCommand_Data_DMA>
 8000f1c:	e003      	b.n	8000f26 <L6470_PreciseMove+0x42>
  }
  else
  {
		L6470_GoTo(hmotor, target_position);
 8000f1e:	68b9      	ldr	r1, [r7, #8]
 8000f20:	68f8      	ldr	r0, [r7, #12]
 8000f22:	f7ff fb33 	bl	800058c <L6470_GoTo>
  }

  // Final position check
  current_pos = L6470_GetPosition(hmotor);
 8000f26:	68f8      	ldr	r0, [r7, #12]
 8000f28:	f7ff fb54 	bl	80005d4 <L6470_GetPosition>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	617b      	str	r3, [r7, #20]
  while (abs(current_pos - target_position) > tolerance && (HAL_GetTick() - start_time) <= timeout_ms)
 8000f30:	e012      	b.n	8000f58 <L6470_PreciseMove+0x74>
  { // Tolerance of 5 microstep

  	// Perform the movement (sending command either with or without DMA)
  	if(with_DMA)
 8000f32:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d005      	beq.n	8000f46 <L6470_PreciseMove+0x62>
  	{
      L6470_SendCommand_Data_DMA(hmotor, L6470_GOTO, target_position);
 8000f3a:	68ba      	ldr	r2, [r7, #8]
 8000f3c:	2160      	movs	r1, #96	@ 0x60
 8000f3e:	68f8      	ldr	r0, [r7, #12]
 8000f40:	f7ff fc31 	bl	80007a6 <L6470_SendCommand_Data_DMA>
 8000f44:	e003      	b.n	8000f4e <L6470_PreciseMove+0x6a>
  	}
  	else
  	{
  		L6470_GoTo(hmotor, target_position);
 8000f46:	68b9      	ldr	r1, [r7, #8]
 8000f48:	68f8      	ldr	r0, [r7, #12]
 8000f4a:	f7ff fb1f 	bl	800058c <L6470_GoTo>
  	}
  	// I will try to correct by recalculating the position
  	current_pos = L6470_GetPosition(hmotor);
 8000f4e:	68f8      	ldr	r0, [r7, #12]
 8000f50:	f7ff fb40 	bl	80005d4 <L6470_GetPosition>
 8000f54:	4603      	mov	r3, r0
 8000f56:	617b      	str	r3, [r7, #20]
  while (abs(current_pos - target_position) > tolerance && (HAL_GetTick() - start_time) <= timeout_ms)
 8000f58:	697a      	ldr	r2, [r7, #20]
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	bfb8      	it	lt
 8000f62:	425b      	neglt	r3, r3
 8000f64:	461a      	mov	r2, r3
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d207      	bcs.n	8000f7c <L6470_PreciseMove+0x98>
 8000f6c:	f000 fac2 	bl	80014f4 <HAL_GetTick>
 8000f70:	4602      	mov	r2, r0
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d2da      	bcs.n	8000f32 <L6470_PreciseMove+0x4e>
  }
  // Checking whether you have exited the cycle for a timeout (the position is not yet correct)
	if ((HAL_GetTick() - start_time) > timeout_ms)
 8000f7c:	f000 faba 	bl	80014f4 <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d201      	bcs.n	8000f90 <L6470_PreciseMove+0xac>
	{
		return L6470_TIMEOUT;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	e000      	b.n	8000f92 <L6470_PreciseMove+0xae>
  }

  return L6470_OK;
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3718      	adds	r7, #24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f9e:	b672      	cpsid	i
}
 8000fa0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fa2:	bf00      	nop
 8000fa4:	e7fd      	b.n	8000fa2 <Error_Handler+0x8>
	...

08000fa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fae:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd8 <HAL_MspInit+0x30>)
 8000fb0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000fb4:	4a08      	ldr	r2, [pc, #32]	@ (8000fd8 <HAL_MspInit+0x30>)
 8000fb6:	f043 0302 	orr.w	r3, r3, #2
 8000fba:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000fbe:	4b06      	ldr	r3, [pc, #24]	@ (8000fd8 <HAL_MspInit+0x30>)
 8000fc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000fc4:	f003 0302 	and.w	r3, r3, #2
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	58024400 	.word	0x58024400

08000fdc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b0ba      	sub	sp, #232	@ 0xe8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ff4:	f107 0310 	add.w	r3, r7, #16
 8000ff8:	22c0      	movs	r2, #192	@ 0xc0
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f007 fce4 	bl	80089ca <memset>
  if(hspi->Instance==SPI1)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a58      	ldr	r2, [pc, #352]	@ (8001168 <HAL_SPI_MspInit+0x18c>)
 8001008:	4293      	cmp	r3, r2
 800100a:	f040 80a8 	bne.w	800115e <HAL_SPI_MspInit+0x182>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800100e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001012:	f04f 0300 	mov.w	r3, #0
 8001016:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800101a:	2300      	movs	r3, #0
 800101c:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800101e:	f107 0310 	add.w	r3, r7, #16
 8001022:	4618      	mov	r0, r3
 8001024:	f004 fba0 	bl	8005768 <HAL_RCCEx_PeriphCLKConfig>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 800102e:	f7ff ffb4 	bl	8000f9a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001032:	4b4e      	ldr	r3, [pc, #312]	@ (800116c <HAL_SPI_MspInit+0x190>)
 8001034:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001038:	4a4c      	ldr	r2, [pc, #304]	@ (800116c <HAL_SPI_MspInit+0x190>)
 800103a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800103e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001042:	4b4a      	ldr	r3, [pc, #296]	@ (800116c <HAL_SPI_MspInit+0x190>)
 8001044:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001048:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001050:	4b46      	ldr	r3, [pc, #280]	@ (800116c <HAL_SPI_MspInit+0x190>)
 8001052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001056:	4a45      	ldr	r2, [pc, #276]	@ (800116c <HAL_SPI_MspInit+0x190>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001060:	4b42      	ldr	r3, [pc, #264]	@ (800116c <HAL_SPI_MspInit+0x190>)
 8001062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800106e:	23e0      	movs	r3, #224	@ 0xe0
 8001070:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001074:	2302      	movs	r3, #2
 8001076:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001080:	2300      	movs	r3, #0
 8001082:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001086:	2305      	movs	r3, #5
 8001088:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001090:	4619      	mov	r1, r3
 8001092:	4837      	ldr	r0, [pc, #220]	@ (8001170 <HAL_SPI_MspInit+0x194>)
 8001094:	f003 f9c2 	bl	800441c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream1;
 8001098:	4b36      	ldr	r3, [pc, #216]	@ (8001174 <HAL_SPI_MspInit+0x198>)
 800109a:	4a37      	ldr	r2, [pc, #220]	@ (8001178 <HAL_SPI_MspInit+0x19c>)
 800109c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800109e:	4b35      	ldr	r3, [pc, #212]	@ (8001174 <HAL_SPI_MspInit+0x198>)
 80010a0:	2226      	movs	r2, #38	@ 0x26
 80010a2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010a4:	4b33      	ldr	r3, [pc, #204]	@ (8001174 <HAL_SPI_MspInit+0x198>)
 80010a6:	2240      	movs	r2, #64	@ 0x40
 80010a8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010aa:	4b32      	ldr	r3, [pc, #200]	@ (8001174 <HAL_SPI_MspInit+0x198>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010b0:	4b30      	ldr	r3, [pc, #192]	@ (8001174 <HAL_SPI_MspInit+0x198>)
 80010b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010b6:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001174 <HAL_SPI_MspInit+0x198>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010be:	4b2d      	ldr	r3, [pc, #180]	@ (8001174 <HAL_SPI_MspInit+0x198>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80010c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001174 <HAL_SPI_MspInit+0x198>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001174 <HAL_SPI_MspInit+0x198>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010d0:	4b28      	ldr	r3, [pc, #160]	@ (8001174 <HAL_SPI_MspInit+0x198>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80010d6:	4827      	ldr	r0, [pc, #156]	@ (8001174 <HAL_SPI_MspInit+0x198>)
 80010d8:	f000 fb58 	bl	800178c <HAL_DMA_Init>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <HAL_SPI_MspInit+0x10a>
    {
      Error_Handler();
 80010e2:	f7ff ff5a 	bl	8000f9a <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a22      	ldr	r2, [pc, #136]	@ (8001174 <HAL_SPI_MspInit+0x198>)
 80010ea:	679a      	str	r2, [r3, #120]	@ 0x78
 80010ec:	4a21      	ldr	r2, [pc, #132]	@ (8001174 <HAL_SPI_MspInit+0x198>)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 80010f2:	4b22      	ldr	r3, [pc, #136]	@ (800117c <HAL_SPI_MspInit+0x1a0>)
 80010f4:	4a22      	ldr	r2, [pc, #136]	@ (8001180 <HAL_SPI_MspInit+0x1a4>)
 80010f6:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 80010f8:	4b20      	ldr	r3, [pc, #128]	@ (800117c <HAL_SPI_MspInit+0x1a0>)
 80010fa:	2225      	movs	r2, #37	@ 0x25
 80010fc:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010fe:	4b1f      	ldr	r3, [pc, #124]	@ (800117c <HAL_SPI_MspInit+0x1a0>)
 8001100:	2200      	movs	r2, #0
 8001102:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001104:	4b1d      	ldr	r3, [pc, #116]	@ (800117c <HAL_SPI_MspInit+0x1a0>)
 8001106:	2200      	movs	r2, #0
 8001108:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800110a:	4b1c      	ldr	r3, [pc, #112]	@ (800117c <HAL_SPI_MspInit+0x1a0>)
 800110c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001110:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001112:	4b1a      	ldr	r3, [pc, #104]	@ (800117c <HAL_SPI_MspInit+0x1a0>)
 8001114:	2200      	movs	r2, #0
 8001116:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001118:	4b18      	ldr	r3, [pc, #96]	@ (800117c <HAL_SPI_MspInit+0x1a0>)
 800111a:	2200      	movs	r2, #0
 800111c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800111e:	4b17      	ldr	r3, [pc, #92]	@ (800117c <HAL_SPI_MspInit+0x1a0>)
 8001120:	2200      	movs	r2, #0
 8001122:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001124:	4b15      	ldr	r3, [pc, #84]	@ (800117c <HAL_SPI_MspInit+0x1a0>)
 8001126:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800112a:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800112c:	4b13      	ldr	r3, [pc, #76]	@ (800117c <HAL_SPI_MspInit+0x1a0>)
 800112e:	2200      	movs	r2, #0
 8001130:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001132:	4812      	ldr	r0, [pc, #72]	@ (800117c <HAL_SPI_MspInit+0x1a0>)
 8001134:	f000 fb2a 	bl	800178c <HAL_DMA_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <HAL_SPI_MspInit+0x166>
    {
      Error_Handler();
 800113e:	f7ff ff2c 	bl	8000f9a <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a0d      	ldr	r2, [pc, #52]	@ (800117c <HAL_SPI_MspInit+0x1a0>)
 8001146:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001148:	4a0c      	ldr	r2, [pc, #48]	@ (800117c <HAL_SPI_MspInit+0x1a0>)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800114e:	2200      	movs	r2, #0
 8001150:	2100      	movs	r1, #0
 8001152:	2023      	movs	r0, #35	@ 0x23
 8001154:	f000 fae5 	bl	8001722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001158:	2023      	movs	r0, #35	@ 0x23
 800115a:	f000 fafc 	bl	8001756 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800115e:	bf00      	nop
 8001160:	37e8      	adds	r7, #232	@ 0xe8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40013000 	.word	0x40013000
 800116c:	58024400 	.word	0x58024400
 8001170:	58020000 	.word	0x58020000
 8001174:	240000b4 	.word	0x240000b4
 8001178:	40020028 	.word	0x40020028
 800117c:	2400012c 	.word	0x2400012c
 8001180:	40020010 	.word	0x40020010

08001184 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001188:	bf00      	nop
 800118a:	e7fd      	b.n	8001188 <NMI_Handler+0x4>

0800118c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001190:	bf00      	nop
 8001192:	e7fd      	b.n	8001190 <HardFault_Handler+0x4>

08001194 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001198:	bf00      	nop
 800119a:	e7fd      	b.n	8001198 <MemManage_Handler+0x4>

0800119c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011a0:	bf00      	nop
 80011a2:	e7fd      	b.n	80011a0 <BusFault_Handler+0x4>

080011a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a8:	bf00      	nop
 80011aa:	e7fd      	b.n	80011a8 <UsageFault_Handler+0x4>

080011ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011da:	f000 f977 	bl	80014cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
	...

080011e4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80011e8:	4802      	ldr	r0, [pc, #8]	@ (80011f4 <DMA1_Stream0_IRQHandler+0x10>)
 80011ea:	f001 fdf9 	bl	8002de0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	2400012c 	.word	0x2400012c

080011f8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80011fc:	4802      	ldr	r0, [pc, #8]	@ (8001208 <DMA1_Stream1_IRQHandler+0x10>)
 80011fe:	f001 fdef 	bl	8002de0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	240000b4 	.word	0x240000b4

0800120c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001210:	4802      	ldr	r0, [pc, #8]	@ (800121c <SPI1_IRQHandler+0x10>)
 8001212:	f007 f88d 	bl	8008330 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	2400002c 	.word	0x2400002c

08001220 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001224:	4b43      	ldr	r3, [pc, #268]	@ (8001334 <SystemInit+0x114>)
 8001226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800122a:	4a42      	ldr	r2, [pc, #264]	@ (8001334 <SystemInit+0x114>)
 800122c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001230:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001234:	4b40      	ldr	r3, [pc, #256]	@ (8001338 <SystemInit+0x118>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 030f 	and.w	r3, r3, #15
 800123c:	2b06      	cmp	r3, #6
 800123e:	d807      	bhi.n	8001250 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001240:	4b3d      	ldr	r3, [pc, #244]	@ (8001338 <SystemInit+0x118>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f023 030f 	bic.w	r3, r3, #15
 8001248:	4a3b      	ldr	r2, [pc, #236]	@ (8001338 <SystemInit+0x118>)
 800124a:	f043 0307 	orr.w	r3, r3, #7
 800124e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001250:	4b3a      	ldr	r3, [pc, #232]	@ (800133c <SystemInit+0x11c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a39      	ldr	r2, [pc, #228]	@ (800133c <SystemInit+0x11c>)
 8001256:	f043 0301 	orr.w	r3, r3, #1
 800125a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800125c:	4b37      	ldr	r3, [pc, #220]	@ (800133c <SystemInit+0x11c>)
 800125e:	2200      	movs	r2, #0
 8001260:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001262:	4b36      	ldr	r3, [pc, #216]	@ (800133c <SystemInit+0x11c>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	4935      	ldr	r1, [pc, #212]	@ (800133c <SystemInit+0x11c>)
 8001268:	4b35      	ldr	r3, [pc, #212]	@ (8001340 <SystemInit+0x120>)
 800126a:	4013      	ands	r3, r2
 800126c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800126e:	4b32      	ldr	r3, [pc, #200]	@ (8001338 <SystemInit+0x118>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0308 	and.w	r3, r3, #8
 8001276:	2b00      	cmp	r3, #0
 8001278:	d007      	beq.n	800128a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800127a:	4b2f      	ldr	r3, [pc, #188]	@ (8001338 <SystemInit+0x118>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f023 030f 	bic.w	r3, r3, #15
 8001282:	4a2d      	ldr	r2, [pc, #180]	@ (8001338 <SystemInit+0x118>)
 8001284:	f043 0307 	orr.w	r3, r3, #7
 8001288:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800128a:	4b2c      	ldr	r3, [pc, #176]	@ (800133c <SystemInit+0x11c>)
 800128c:	2200      	movs	r2, #0
 800128e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001290:	4b2a      	ldr	r3, [pc, #168]	@ (800133c <SystemInit+0x11c>)
 8001292:	2200      	movs	r2, #0
 8001294:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001296:	4b29      	ldr	r3, [pc, #164]	@ (800133c <SystemInit+0x11c>)
 8001298:	2200      	movs	r2, #0
 800129a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800129c:	4b27      	ldr	r3, [pc, #156]	@ (800133c <SystemInit+0x11c>)
 800129e:	4a29      	ldr	r2, [pc, #164]	@ (8001344 <SystemInit+0x124>)
 80012a0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80012a2:	4b26      	ldr	r3, [pc, #152]	@ (800133c <SystemInit+0x11c>)
 80012a4:	4a28      	ldr	r2, [pc, #160]	@ (8001348 <SystemInit+0x128>)
 80012a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80012a8:	4b24      	ldr	r3, [pc, #144]	@ (800133c <SystemInit+0x11c>)
 80012aa:	4a28      	ldr	r2, [pc, #160]	@ (800134c <SystemInit+0x12c>)
 80012ac:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80012ae:	4b23      	ldr	r3, [pc, #140]	@ (800133c <SystemInit+0x11c>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80012b4:	4b21      	ldr	r3, [pc, #132]	@ (800133c <SystemInit+0x11c>)
 80012b6:	4a25      	ldr	r2, [pc, #148]	@ (800134c <SystemInit+0x12c>)
 80012b8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80012ba:	4b20      	ldr	r3, [pc, #128]	@ (800133c <SystemInit+0x11c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80012c0:	4b1e      	ldr	r3, [pc, #120]	@ (800133c <SystemInit+0x11c>)
 80012c2:	4a22      	ldr	r2, [pc, #136]	@ (800134c <SystemInit+0x12c>)
 80012c4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80012c6:	4b1d      	ldr	r3, [pc, #116]	@ (800133c <SystemInit+0x11c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012cc:	4b1b      	ldr	r3, [pc, #108]	@ (800133c <SystemInit+0x11c>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a1a      	ldr	r2, [pc, #104]	@ (800133c <SystemInit+0x11c>)
 80012d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012d6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80012d8:	4b18      	ldr	r3, [pc, #96]	@ (800133c <SystemInit+0x11c>)
 80012da:	2200      	movs	r2, #0
 80012dc:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80012de:	4b1c      	ldr	r3, [pc, #112]	@ (8001350 <SystemInit+0x130>)
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001354 <SystemInit+0x134>)
 80012e4:	4013      	ands	r3, r2
 80012e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80012ea:	d202      	bcs.n	80012f2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80012ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001358 <SystemInit+0x138>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80012f2:	4b12      	ldr	r3, [pc, #72]	@ (800133c <SystemInit+0x11c>)
 80012f4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80012f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d113      	bne.n	8001328 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001300:	4b0e      	ldr	r3, [pc, #56]	@ (800133c <SystemInit+0x11c>)
 8001302:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001306:	4a0d      	ldr	r2, [pc, #52]	@ (800133c <SystemInit+0x11c>)
 8001308:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800130c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001310:	4b12      	ldr	r3, [pc, #72]	@ (800135c <SystemInit+0x13c>)
 8001312:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001316:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001318:	4b08      	ldr	r3, [pc, #32]	@ (800133c <SystemInit+0x11c>)
 800131a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800131e:	4a07      	ldr	r2, [pc, #28]	@ (800133c <SystemInit+0x11c>)
 8001320:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001324:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	e000ed00 	.word	0xe000ed00
 8001338:	52002000 	.word	0x52002000
 800133c:	58024400 	.word	0x58024400
 8001340:	eaf6ed7f 	.word	0xeaf6ed7f
 8001344:	02020200 	.word	0x02020200
 8001348:	01ff0000 	.word	0x01ff0000
 800134c:	01010280 	.word	0x01010280
 8001350:	5c001000 	.word	0x5c001000
 8001354:	ffff0000 	.word	0xffff0000
 8001358:	51008108 	.word	0x51008108
 800135c:	52004000 	.word	0x52004000

08001360 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001364:	4b09      	ldr	r3, [pc, #36]	@ (800138c <ExitRun0Mode+0x2c>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	4a08      	ldr	r2, [pc, #32]	@ (800138c <ExitRun0Mode+0x2c>)
 800136a:	f043 0302 	orr.w	r3, r3, #2
 800136e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001370:	bf00      	nop
 8001372:	4b06      	ldr	r3, [pc, #24]	@ (800138c <ExitRun0Mode+0x2c>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d0f9      	beq.n	8001372 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800137e:	bf00      	nop
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	58024800 	.word	0x58024800

08001390 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001390:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80013cc <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001394:	f7ff ffe4 	bl	8001360 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001398:	f7ff ff42 	bl	8001220 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800139c:	480c      	ldr	r0, [pc, #48]	@ (80013d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800139e:	490d      	ldr	r1, [pc, #52]	@ (80013d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013a0:	4a0d      	ldr	r2, [pc, #52]	@ (80013d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013a4:	e002      	b.n	80013ac <LoopCopyDataInit>

080013a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013aa:	3304      	adds	r3, #4

080013ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b0:	d3f9      	bcc.n	80013a6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013b2:	4a0a      	ldr	r2, [pc, #40]	@ (80013dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013b4:	4c0a      	ldr	r4, [pc, #40]	@ (80013e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013b8:	e001      	b.n	80013be <LoopFillZerobss>

080013ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013bc:	3204      	adds	r2, #4

080013be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c0:	d3fb      	bcc.n	80013ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013c2:	f007 fb0b 	bl	80089dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013c6:	f7ff fbab 	bl	8000b20 <main>
  bx  lr
 80013ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013cc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80013d0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80013d4:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80013d8:	08008a5c 	.word	0x08008a5c
  ldr r2, =_sbss
 80013dc:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80013e0:	24000214 	.word	0x24000214

080013e4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013e4:	e7fe      	b.n	80013e4 <ADC3_IRQHandler>
	...

080013e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ee:	2003      	movs	r0, #3
 80013f0:	f000 f98c 	bl	800170c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80013f4:	f004 f83e 	bl	8005474 <HAL_RCC_GetSysClockFreq>
 80013f8:	4602      	mov	r2, r0
 80013fa:	4b15      	ldr	r3, [pc, #84]	@ (8001450 <HAL_Init+0x68>)
 80013fc:	699b      	ldr	r3, [r3, #24]
 80013fe:	0a1b      	lsrs	r3, r3, #8
 8001400:	f003 030f 	and.w	r3, r3, #15
 8001404:	4913      	ldr	r1, [pc, #76]	@ (8001454 <HAL_Init+0x6c>)
 8001406:	5ccb      	ldrb	r3, [r1, r3]
 8001408:	f003 031f 	and.w	r3, r3, #31
 800140c:	fa22 f303 	lsr.w	r3, r2, r3
 8001410:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001412:	4b0f      	ldr	r3, [pc, #60]	@ (8001450 <HAL_Init+0x68>)
 8001414:	699b      	ldr	r3, [r3, #24]
 8001416:	f003 030f 	and.w	r3, r3, #15
 800141a:	4a0e      	ldr	r2, [pc, #56]	@ (8001454 <HAL_Init+0x6c>)
 800141c:	5cd3      	ldrb	r3, [r2, r3]
 800141e:	f003 031f 	and.w	r3, r3, #31
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	fa22 f303 	lsr.w	r3, r2, r3
 8001428:	4a0b      	ldr	r2, [pc, #44]	@ (8001458 <HAL_Init+0x70>)
 800142a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800142c:	4a0b      	ldr	r2, [pc, #44]	@ (800145c <HAL_Init+0x74>)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001432:	200f      	movs	r0, #15
 8001434:	f000 f814 	bl	8001460 <HAL_InitTick>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e002      	b.n	8001448 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001442:	f7ff fdb1 	bl	8000fa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001446:	2300      	movs	r3, #0
}
 8001448:	4618      	mov	r0, r3
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	58024400 	.word	0x58024400
 8001454:	08008a3c 	.word	0x08008a3c
 8001458:	24000004 	.word	0x24000004
 800145c:	24000000 	.word	0x24000000

08001460 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001468:	4b15      	ldr	r3, [pc, #84]	@ (80014c0 <HAL_InitTick+0x60>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d101      	bne.n	8001474 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e021      	b.n	80014b8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001474:	4b13      	ldr	r3, [pc, #76]	@ (80014c4 <HAL_InitTick+0x64>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	4b11      	ldr	r3, [pc, #68]	@ (80014c0 <HAL_InitTick+0x60>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	4619      	mov	r1, r3
 800147e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001482:	fbb3 f3f1 	udiv	r3, r3, r1
 8001486:	fbb2 f3f3 	udiv	r3, r2, r3
 800148a:	4618      	mov	r0, r3
 800148c:	f000 f971 	bl	8001772 <HAL_SYSTICK_Config>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e00e      	b.n	80014b8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2b0f      	cmp	r3, #15
 800149e:	d80a      	bhi.n	80014b6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014a0:	2200      	movs	r2, #0
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	f04f 30ff 	mov.w	r0, #4294967295
 80014a8:	f000 f93b 	bl	8001722 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014ac:	4a06      	ldr	r2, [pc, #24]	@ (80014c8 <HAL_InitTick+0x68>)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014b2:	2300      	movs	r3, #0
 80014b4:	e000      	b.n	80014b8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	2400000c 	.word	0x2400000c
 80014c4:	24000000 	.word	0x24000000
 80014c8:	24000008 	.word	0x24000008

080014cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014d0:	4b06      	ldr	r3, [pc, #24]	@ (80014ec <HAL_IncTick+0x20>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	461a      	mov	r2, r3
 80014d6:	4b06      	ldr	r3, [pc, #24]	@ (80014f0 <HAL_IncTick+0x24>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4413      	add	r3, r2
 80014dc:	4a04      	ldr	r2, [pc, #16]	@ (80014f0 <HAL_IncTick+0x24>)
 80014de:	6013      	str	r3, [r2, #0]
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	2400000c 	.word	0x2400000c
 80014f0:	24000210 	.word	0x24000210

080014f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return uwTick;
 80014f8:	4b03      	ldr	r3, [pc, #12]	@ (8001508 <HAL_GetTick+0x14>)
 80014fa:	681b      	ldr	r3, [r3, #0]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	24000210 	.word	0x24000210

0800150c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001514:	f7ff ffee 	bl	80014f4 <HAL_GetTick>
 8001518:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001524:	d005      	beq.n	8001532 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001526:	4b0a      	ldr	r3, [pc, #40]	@ (8001550 <HAL_Delay+0x44>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	461a      	mov	r2, r3
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	4413      	add	r3, r2
 8001530:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001532:	bf00      	nop
 8001534:	f7ff ffde 	bl	80014f4 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	68fa      	ldr	r2, [r7, #12]
 8001540:	429a      	cmp	r2, r3
 8001542:	d8f7      	bhi.n	8001534 <HAL_Delay+0x28>
  {
  }
}
 8001544:	bf00      	nop
 8001546:	bf00      	nop
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	2400000c 	.word	0x2400000c

08001554 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001558:	4b03      	ldr	r3, [pc, #12]	@ (8001568 <HAL_GetREVID+0x14>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	0c1b      	lsrs	r3, r3, #16
}
 800155e:	4618      	mov	r0, r3
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	5c001000 	.word	0x5c001000

0800156c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800157c:	4b0b      	ldr	r3, [pc, #44]	@ (80015ac <__NVIC_SetPriorityGrouping+0x40>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001582:	68ba      	ldr	r2, [r7, #8]
 8001584:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001588:	4013      	ands	r3, r2
 800158a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001594:	4b06      	ldr	r3, [pc, #24]	@ (80015b0 <__NVIC_SetPriorityGrouping+0x44>)
 8001596:	4313      	orrs	r3, r2
 8001598:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800159a:	4a04      	ldr	r2, [pc, #16]	@ (80015ac <__NVIC_SetPriorityGrouping+0x40>)
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	60d3      	str	r3, [r2, #12]
}
 80015a0:	bf00      	nop
 80015a2:	3714      	adds	r7, #20
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	e000ed00 	.word	0xe000ed00
 80015b0:	05fa0000 	.word	0x05fa0000

080015b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015b8:	4b04      	ldr	r3, [pc, #16]	@ (80015cc <__NVIC_GetPriorityGrouping+0x18>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	0a1b      	lsrs	r3, r3, #8
 80015be:	f003 0307 	and.w	r3, r3, #7
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	db0b      	blt.n	80015fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015e2:	88fb      	ldrh	r3, [r7, #6]
 80015e4:	f003 021f 	and.w	r2, r3, #31
 80015e8:	4907      	ldr	r1, [pc, #28]	@ (8001608 <__NVIC_EnableIRQ+0x38>)
 80015ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ee:	095b      	lsrs	r3, r3, #5
 80015f0:	2001      	movs	r0, #1
 80015f2:	fa00 f202 	lsl.w	r2, r0, r2
 80015f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	e000e100 	.word	0xe000e100

0800160c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	6039      	str	r1, [r7, #0]
 8001616:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001618:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800161c:	2b00      	cmp	r3, #0
 800161e:	db0a      	blt.n	8001636 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	b2da      	uxtb	r2, r3
 8001624:	490c      	ldr	r1, [pc, #48]	@ (8001658 <__NVIC_SetPriority+0x4c>)
 8001626:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800162a:	0112      	lsls	r2, r2, #4
 800162c:	b2d2      	uxtb	r2, r2
 800162e:	440b      	add	r3, r1
 8001630:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001634:	e00a      	b.n	800164c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	b2da      	uxtb	r2, r3
 800163a:	4908      	ldr	r1, [pc, #32]	@ (800165c <__NVIC_SetPriority+0x50>)
 800163c:	88fb      	ldrh	r3, [r7, #6]
 800163e:	f003 030f 	and.w	r3, r3, #15
 8001642:	3b04      	subs	r3, #4
 8001644:	0112      	lsls	r2, r2, #4
 8001646:	b2d2      	uxtb	r2, r2
 8001648:	440b      	add	r3, r1
 800164a:	761a      	strb	r2, [r3, #24]
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	e000e100 	.word	0xe000e100
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001660:	b480      	push	{r7}
 8001662:	b089      	sub	sp, #36	@ 0x24
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	f1c3 0307 	rsb	r3, r3, #7
 800167a:	2b04      	cmp	r3, #4
 800167c:	bf28      	it	cs
 800167e:	2304      	movcs	r3, #4
 8001680:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	3304      	adds	r3, #4
 8001686:	2b06      	cmp	r3, #6
 8001688:	d902      	bls.n	8001690 <NVIC_EncodePriority+0x30>
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	3b03      	subs	r3, #3
 800168e:	e000      	b.n	8001692 <NVIC_EncodePriority+0x32>
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001694:	f04f 32ff 	mov.w	r2, #4294967295
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	43da      	mvns	r2, r3
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	401a      	ands	r2, r3
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016a8:	f04f 31ff 	mov.w	r1, #4294967295
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	fa01 f303 	lsl.w	r3, r1, r3
 80016b2:	43d9      	mvns	r1, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b8:	4313      	orrs	r3, r2
         );
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3724      	adds	r7, #36	@ 0x24
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
	...

080016c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016d8:	d301      	bcc.n	80016de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016da:	2301      	movs	r3, #1
 80016dc:	e00f      	b.n	80016fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016de:	4a0a      	ldr	r2, [pc, #40]	@ (8001708 <SysTick_Config+0x40>)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016e6:	210f      	movs	r1, #15
 80016e8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ec:	f7ff ff8e 	bl	800160c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016f0:	4b05      	ldr	r3, [pc, #20]	@ (8001708 <SysTick_Config+0x40>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016f6:	4b04      	ldr	r3, [pc, #16]	@ (8001708 <SysTick_Config+0x40>)
 80016f8:	2207      	movs	r2, #7
 80016fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	e000e010 	.word	0xe000e010

0800170c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7ff ff29 	bl	800156c <__NVIC_SetPriorityGrouping>
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b086      	sub	sp, #24
 8001726:	af00      	add	r7, sp, #0
 8001728:	4603      	mov	r3, r0
 800172a:	60b9      	str	r1, [r7, #8]
 800172c:	607a      	str	r2, [r7, #4]
 800172e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001730:	f7ff ff40 	bl	80015b4 <__NVIC_GetPriorityGrouping>
 8001734:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	68b9      	ldr	r1, [r7, #8]
 800173a:	6978      	ldr	r0, [r7, #20]
 800173c:	f7ff ff90 	bl	8001660 <NVIC_EncodePriority>
 8001740:	4602      	mov	r2, r0
 8001742:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001746:	4611      	mov	r1, r2
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff ff5f 	bl	800160c <__NVIC_SetPriority>
}
 800174e:	bf00      	nop
 8001750:	3718      	adds	r7, #24
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b082      	sub	sp, #8
 800175a:	af00      	add	r7, sp, #0
 800175c:	4603      	mov	r3, r0
 800175e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001760:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff ff33 	bl	80015d0 <__NVIC_EnableIRQ>
}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f7ff ffa4 	bl	80016c8 <SysTick_Config>
 8001780:	4603      	mov	r3, r0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
	...

0800178c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001794:	f7ff feae 	bl	80014f4 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d101      	bne.n	80017a4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e316      	b.n	8001dd2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a66      	ldr	r2, [pc, #408]	@ (8001944 <HAL_DMA_Init+0x1b8>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d04a      	beq.n	8001844 <HAL_DMA_Init+0xb8>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a65      	ldr	r2, [pc, #404]	@ (8001948 <HAL_DMA_Init+0x1bc>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d045      	beq.n	8001844 <HAL_DMA_Init+0xb8>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a63      	ldr	r2, [pc, #396]	@ (800194c <HAL_DMA_Init+0x1c0>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d040      	beq.n	8001844 <HAL_DMA_Init+0xb8>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a62      	ldr	r2, [pc, #392]	@ (8001950 <HAL_DMA_Init+0x1c4>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d03b      	beq.n	8001844 <HAL_DMA_Init+0xb8>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a60      	ldr	r2, [pc, #384]	@ (8001954 <HAL_DMA_Init+0x1c8>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d036      	beq.n	8001844 <HAL_DMA_Init+0xb8>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a5f      	ldr	r2, [pc, #380]	@ (8001958 <HAL_DMA_Init+0x1cc>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d031      	beq.n	8001844 <HAL_DMA_Init+0xb8>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a5d      	ldr	r2, [pc, #372]	@ (800195c <HAL_DMA_Init+0x1d0>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d02c      	beq.n	8001844 <HAL_DMA_Init+0xb8>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a5c      	ldr	r2, [pc, #368]	@ (8001960 <HAL_DMA_Init+0x1d4>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d027      	beq.n	8001844 <HAL_DMA_Init+0xb8>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a5a      	ldr	r2, [pc, #360]	@ (8001964 <HAL_DMA_Init+0x1d8>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d022      	beq.n	8001844 <HAL_DMA_Init+0xb8>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a59      	ldr	r2, [pc, #356]	@ (8001968 <HAL_DMA_Init+0x1dc>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d01d      	beq.n	8001844 <HAL_DMA_Init+0xb8>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a57      	ldr	r2, [pc, #348]	@ (800196c <HAL_DMA_Init+0x1e0>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d018      	beq.n	8001844 <HAL_DMA_Init+0xb8>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a56      	ldr	r2, [pc, #344]	@ (8001970 <HAL_DMA_Init+0x1e4>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d013      	beq.n	8001844 <HAL_DMA_Init+0xb8>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a54      	ldr	r2, [pc, #336]	@ (8001974 <HAL_DMA_Init+0x1e8>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d00e      	beq.n	8001844 <HAL_DMA_Init+0xb8>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a53      	ldr	r2, [pc, #332]	@ (8001978 <HAL_DMA_Init+0x1ec>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d009      	beq.n	8001844 <HAL_DMA_Init+0xb8>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a51      	ldr	r2, [pc, #324]	@ (800197c <HAL_DMA_Init+0x1f0>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d004      	beq.n	8001844 <HAL_DMA_Init+0xb8>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a50      	ldr	r2, [pc, #320]	@ (8001980 <HAL_DMA_Init+0x1f4>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d101      	bne.n	8001848 <HAL_DMA_Init+0xbc>
 8001844:	2301      	movs	r3, #1
 8001846:	e000      	b.n	800184a <HAL_DMA_Init+0xbe>
 8001848:	2300      	movs	r3, #0
 800184a:	2b00      	cmp	r3, #0
 800184c:	f000 813b 	beq.w	8001ac6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2202      	movs	r2, #2
 8001854:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a37      	ldr	r2, [pc, #220]	@ (8001944 <HAL_DMA_Init+0x1b8>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d04a      	beq.n	8001900 <HAL_DMA_Init+0x174>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a36      	ldr	r2, [pc, #216]	@ (8001948 <HAL_DMA_Init+0x1bc>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d045      	beq.n	8001900 <HAL_DMA_Init+0x174>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a34      	ldr	r2, [pc, #208]	@ (800194c <HAL_DMA_Init+0x1c0>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d040      	beq.n	8001900 <HAL_DMA_Init+0x174>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a33      	ldr	r2, [pc, #204]	@ (8001950 <HAL_DMA_Init+0x1c4>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d03b      	beq.n	8001900 <HAL_DMA_Init+0x174>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a31      	ldr	r2, [pc, #196]	@ (8001954 <HAL_DMA_Init+0x1c8>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d036      	beq.n	8001900 <HAL_DMA_Init+0x174>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a30      	ldr	r2, [pc, #192]	@ (8001958 <HAL_DMA_Init+0x1cc>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d031      	beq.n	8001900 <HAL_DMA_Init+0x174>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a2e      	ldr	r2, [pc, #184]	@ (800195c <HAL_DMA_Init+0x1d0>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d02c      	beq.n	8001900 <HAL_DMA_Init+0x174>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a2d      	ldr	r2, [pc, #180]	@ (8001960 <HAL_DMA_Init+0x1d4>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d027      	beq.n	8001900 <HAL_DMA_Init+0x174>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a2b      	ldr	r2, [pc, #172]	@ (8001964 <HAL_DMA_Init+0x1d8>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d022      	beq.n	8001900 <HAL_DMA_Init+0x174>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a2a      	ldr	r2, [pc, #168]	@ (8001968 <HAL_DMA_Init+0x1dc>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d01d      	beq.n	8001900 <HAL_DMA_Init+0x174>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a28      	ldr	r2, [pc, #160]	@ (800196c <HAL_DMA_Init+0x1e0>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d018      	beq.n	8001900 <HAL_DMA_Init+0x174>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a27      	ldr	r2, [pc, #156]	@ (8001970 <HAL_DMA_Init+0x1e4>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d013      	beq.n	8001900 <HAL_DMA_Init+0x174>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a25      	ldr	r2, [pc, #148]	@ (8001974 <HAL_DMA_Init+0x1e8>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d00e      	beq.n	8001900 <HAL_DMA_Init+0x174>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a24      	ldr	r2, [pc, #144]	@ (8001978 <HAL_DMA_Init+0x1ec>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d009      	beq.n	8001900 <HAL_DMA_Init+0x174>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a22      	ldr	r2, [pc, #136]	@ (800197c <HAL_DMA_Init+0x1f0>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d004      	beq.n	8001900 <HAL_DMA_Init+0x174>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a21      	ldr	r2, [pc, #132]	@ (8001980 <HAL_DMA_Init+0x1f4>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d108      	bne.n	8001912 <HAL_DMA_Init+0x186>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f022 0201 	bic.w	r2, r2, #1
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	e007      	b.n	8001922 <HAL_DMA_Init+0x196>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f022 0201 	bic.w	r2, r2, #1
 8001920:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001922:	e02f      	b.n	8001984 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001924:	f7ff fde6 	bl	80014f4 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b05      	cmp	r3, #5
 8001930:	d928      	bls.n	8001984 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2220      	movs	r2, #32
 8001936:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2203      	movs	r2, #3
 800193c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e246      	b.n	8001dd2 <HAL_DMA_Init+0x646>
 8001944:	40020010 	.word	0x40020010
 8001948:	40020028 	.word	0x40020028
 800194c:	40020040 	.word	0x40020040
 8001950:	40020058 	.word	0x40020058
 8001954:	40020070 	.word	0x40020070
 8001958:	40020088 	.word	0x40020088
 800195c:	400200a0 	.word	0x400200a0
 8001960:	400200b8 	.word	0x400200b8
 8001964:	40020410 	.word	0x40020410
 8001968:	40020428 	.word	0x40020428
 800196c:	40020440 	.word	0x40020440
 8001970:	40020458 	.word	0x40020458
 8001974:	40020470 	.word	0x40020470
 8001978:	40020488 	.word	0x40020488
 800197c:	400204a0 	.word	0x400204a0
 8001980:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1c8      	bne.n	8001924 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800199a:	697a      	ldr	r2, [r7, #20]
 800199c:	4b83      	ldr	r3, [pc, #524]	@ (8001bac <HAL_DMA_Init+0x420>)
 800199e:	4013      	ands	r3, r2
 80019a0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80019aa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	691b      	ldr	r3, [r3, #16]
 80019b0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019b6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019c2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a1b      	ldr	r3, [r3, #32]
 80019c8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80019ca:	697a      	ldr	r2, [r7, #20]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d4:	2b04      	cmp	r3, #4
 80019d6:	d107      	bne.n	80019e8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e0:	4313      	orrs	r3, r2
 80019e2:	697a      	ldr	r2, [r7, #20]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80019e8:	4b71      	ldr	r3, [pc, #452]	@ (8001bb0 <HAL_DMA_Init+0x424>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	4b71      	ldr	r3, [pc, #452]	@ (8001bb4 <HAL_DMA_Init+0x428>)
 80019ee:	4013      	ands	r3, r2
 80019f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80019f4:	d328      	bcc.n	8001a48 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2b28      	cmp	r3, #40	@ 0x28
 80019fc:	d903      	bls.n	8001a06 <HAL_DMA_Init+0x27a>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b2e      	cmp	r3, #46	@ 0x2e
 8001a04:	d917      	bls.n	8001a36 <HAL_DMA_Init+0x2aa>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	2b3e      	cmp	r3, #62	@ 0x3e
 8001a0c:	d903      	bls.n	8001a16 <HAL_DMA_Init+0x28a>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b42      	cmp	r3, #66	@ 0x42
 8001a14:	d90f      	bls.n	8001a36 <HAL_DMA_Init+0x2aa>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	2b46      	cmp	r3, #70	@ 0x46
 8001a1c:	d903      	bls.n	8001a26 <HAL_DMA_Init+0x29a>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	2b48      	cmp	r3, #72	@ 0x48
 8001a24:	d907      	bls.n	8001a36 <HAL_DMA_Init+0x2aa>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2b4e      	cmp	r3, #78	@ 0x4e
 8001a2c:	d905      	bls.n	8001a3a <HAL_DMA_Init+0x2ae>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2b52      	cmp	r3, #82	@ 0x52
 8001a34:	d801      	bhi.n	8001a3a <HAL_DMA_Init+0x2ae>
 8001a36:	2301      	movs	r3, #1
 8001a38:	e000      	b.n	8001a3c <HAL_DMA_Init+0x2b0>
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d003      	beq.n	8001a48 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001a46:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	697a      	ldr	r2, [r7, #20]
 8001a4e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	f023 0307 	bic.w	r3, r3, #7
 8001a5e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a64:	697a      	ldr	r2, [r7, #20]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a6e:	2b04      	cmp	r3, #4
 8001a70:	d117      	bne.n	8001aa2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a76:	697a      	ldr	r2, [r7, #20]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d00e      	beq.n	8001aa2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f002 fb3f 	bl	8004108 <DMA_CheckFifoParam>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d008      	beq.n	8001aa2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2240      	movs	r2, #64	@ 0x40
 8001a94:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e197      	b.n	8001dd2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	697a      	ldr	r2, [r7, #20]
 8001aa8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f002 fa7a 	bl	8003fa4 <DMA_CalcBaseAndBitshift>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ab8:	f003 031f 	and.w	r3, r3, #31
 8001abc:	223f      	movs	r2, #63	@ 0x3f
 8001abe:	409a      	lsls	r2, r3
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	e0cd      	b.n	8001c62 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a3b      	ldr	r2, [pc, #236]	@ (8001bb8 <HAL_DMA_Init+0x42c>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d022      	beq.n	8001b16 <HAL_DMA_Init+0x38a>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a39      	ldr	r2, [pc, #228]	@ (8001bbc <HAL_DMA_Init+0x430>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d01d      	beq.n	8001b16 <HAL_DMA_Init+0x38a>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a38      	ldr	r2, [pc, #224]	@ (8001bc0 <HAL_DMA_Init+0x434>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d018      	beq.n	8001b16 <HAL_DMA_Init+0x38a>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a36      	ldr	r2, [pc, #216]	@ (8001bc4 <HAL_DMA_Init+0x438>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d013      	beq.n	8001b16 <HAL_DMA_Init+0x38a>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a35      	ldr	r2, [pc, #212]	@ (8001bc8 <HAL_DMA_Init+0x43c>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d00e      	beq.n	8001b16 <HAL_DMA_Init+0x38a>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a33      	ldr	r2, [pc, #204]	@ (8001bcc <HAL_DMA_Init+0x440>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d009      	beq.n	8001b16 <HAL_DMA_Init+0x38a>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a32      	ldr	r2, [pc, #200]	@ (8001bd0 <HAL_DMA_Init+0x444>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d004      	beq.n	8001b16 <HAL_DMA_Init+0x38a>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a30      	ldr	r2, [pc, #192]	@ (8001bd4 <HAL_DMA_Init+0x448>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d101      	bne.n	8001b1a <HAL_DMA_Init+0x38e>
 8001b16:	2301      	movs	r3, #1
 8001b18:	e000      	b.n	8001b1c <HAL_DMA_Init+0x390>
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f000 8097 	beq.w	8001c50 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a24      	ldr	r2, [pc, #144]	@ (8001bb8 <HAL_DMA_Init+0x42c>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d021      	beq.n	8001b70 <HAL_DMA_Init+0x3e4>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a22      	ldr	r2, [pc, #136]	@ (8001bbc <HAL_DMA_Init+0x430>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d01c      	beq.n	8001b70 <HAL_DMA_Init+0x3e4>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a21      	ldr	r2, [pc, #132]	@ (8001bc0 <HAL_DMA_Init+0x434>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d017      	beq.n	8001b70 <HAL_DMA_Init+0x3e4>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a1f      	ldr	r2, [pc, #124]	@ (8001bc4 <HAL_DMA_Init+0x438>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d012      	beq.n	8001b70 <HAL_DMA_Init+0x3e4>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a1e      	ldr	r2, [pc, #120]	@ (8001bc8 <HAL_DMA_Init+0x43c>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d00d      	beq.n	8001b70 <HAL_DMA_Init+0x3e4>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a1c      	ldr	r2, [pc, #112]	@ (8001bcc <HAL_DMA_Init+0x440>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d008      	beq.n	8001b70 <HAL_DMA_Init+0x3e4>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a1b      	ldr	r2, [pc, #108]	@ (8001bd0 <HAL_DMA_Init+0x444>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d003      	beq.n	8001b70 <HAL_DMA_Init+0x3e4>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a19      	ldr	r2, [pc, #100]	@ (8001bd4 <HAL_DMA_Init+0x448>)
 8001b6e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2202      	movs	r2, #2
 8001b74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001b88:	697a      	ldr	r2, [r7, #20]
 8001b8a:	4b13      	ldr	r3, [pc, #76]	@ (8001bd8 <HAL_DMA_Init+0x44c>)
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	2b40      	cmp	r3, #64	@ 0x40
 8001b96:	d021      	beq.n	8001bdc <HAL_DMA_Init+0x450>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	2b80      	cmp	r3, #128	@ 0x80
 8001b9e:	d102      	bne.n	8001ba6 <HAL_DMA_Init+0x41a>
 8001ba0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001ba4:	e01b      	b.n	8001bde <HAL_DMA_Init+0x452>
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	e019      	b.n	8001bde <HAL_DMA_Init+0x452>
 8001baa:	bf00      	nop
 8001bac:	fe10803f 	.word	0xfe10803f
 8001bb0:	5c001000 	.word	0x5c001000
 8001bb4:	ffff0000 	.word	0xffff0000
 8001bb8:	58025408 	.word	0x58025408
 8001bbc:	5802541c 	.word	0x5802541c
 8001bc0:	58025430 	.word	0x58025430
 8001bc4:	58025444 	.word	0x58025444
 8001bc8:	58025458 	.word	0x58025458
 8001bcc:	5802546c 	.word	0x5802546c
 8001bd0:	58025480 	.word	0x58025480
 8001bd4:	58025494 	.word	0x58025494
 8001bd8:	fffe000f 	.word	0xfffe000f
 8001bdc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	68d2      	ldr	r2, [r2, #12]
 8001be2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001be4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001bec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001bf4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001bfc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001c04:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a1b      	ldr	r3, [r3, #32]
 8001c0a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001c0c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	697a      	ldr	r2, [r7, #20]
 8001c1a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	461a      	mov	r2, r3
 8001c22:	4b6e      	ldr	r3, [pc, #440]	@ (8001ddc <HAL_DMA_Init+0x650>)
 8001c24:	4413      	add	r3, r2
 8001c26:	4a6e      	ldr	r2, [pc, #440]	@ (8001de0 <HAL_DMA_Init+0x654>)
 8001c28:	fba2 2303 	umull	r2, r3, r2, r3
 8001c2c:	091b      	lsrs	r3, r3, #4
 8001c2e:	009a      	lsls	r2, r3, #2
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f002 f9b5 	bl	8003fa4 <DMA_CalcBaseAndBitshift>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c42:	f003 031f 	and.w	r3, r3, #31
 8001c46:	2201      	movs	r2, #1
 8001c48:	409a      	lsls	r2, r3
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	e008      	b.n	8001c62 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2240      	movs	r2, #64	@ 0x40
 8001c54:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2203      	movs	r2, #3
 8001c5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e0b7      	b.n	8001dd2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a5f      	ldr	r2, [pc, #380]	@ (8001de4 <HAL_DMA_Init+0x658>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d072      	beq.n	8001d52 <HAL_DMA_Init+0x5c6>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a5d      	ldr	r2, [pc, #372]	@ (8001de8 <HAL_DMA_Init+0x65c>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d06d      	beq.n	8001d52 <HAL_DMA_Init+0x5c6>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a5c      	ldr	r2, [pc, #368]	@ (8001dec <HAL_DMA_Init+0x660>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d068      	beq.n	8001d52 <HAL_DMA_Init+0x5c6>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a5a      	ldr	r2, [pc, #360]	@ (8001df0 <HAL_DMA_Init+0x664>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d063      	beq.n	8001d52 <HAL_DMA_Init+0x5c6>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a59      	ldr	r2, [pc, #356]	@ (8001df4 <HAL_DMA_Init+0x668>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d05e      	beq.n	8001d52 <HAL_DMA_Init+0x5c6>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a57      	ldr	r2, [pc, #348]	@ (8001df8 <HAL_DMA_Init+0x66c>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d059      	beq.n	8001d52 <HAL_DMA_Init+0x5c6>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a56      	ldr	r2, [pc, #344]	@ (8001dfc <HAL_DMA_Init+0x670>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d054      	beq.n	8001d52 <HAL_DMA_Init+0x5c6>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a54      	ldr	r2, [pc, #336]	@ (8001e00 <HAL_DMA_Init+0x674>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d04f      	beq.n	8001d52 <HAL_DMA_Init+0x5c6>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a53      	ldr	r2, [pc, #332]	@ (8001e04 <HAL_DMA_Init+0x678>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d04a      	beq.n	8001d52 <HAL_DMA_Init+0x5c6>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a51      	ldr	r2, [pc, #324]	@ (8001e08 <HAL_DMA_Init+0x67c>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d045      	beq.n	8001d52 <HAL_DMA_Init+0x5c6>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a50      	ldr	r2, [pc, #320]	@ (8001e0c <HAL_DMA_Init+0x680>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d040      	beq.n	8001d52 <HAL_DMA_Init+0x5c6>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a4e      	ldr	r2, [pc, #312]	@ (8001e10 <HAL_DMA_Init+0x684>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d03b      	beq.n	8001d52 <HAL_DMA_Init+0x5c6>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a4d      	ldr	r2, [pc, #308]	@ (8001e14 <HAL_DMA_Init+0x688>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d036      	beq.n	8001d52 <HAL_DMA_Init+0x5c6>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a4b      	ldr	r2, [pc, #300]	@ (8001e18 <HAL_DMA_Init+0x68c>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d031      	beq.n	8001d52 <HAL_DMA_Init+0x5c6>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a4a      	ldr	r2, [pc, #296]	@ (8001e1c <HAL_DMA_Init+0x690>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d02c      	beq.n	8001d52 <HAL_DMA_Init+0x5c6>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a48      	ldr	r2, [pc, #288]	@ (8001e20 <HAL_DMA_Init+0x694>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d027      	beq.n	8001d52 <HAL_DMA_Init+0x5c6>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a47      	ldr	r2, [pc, #284]	@ (8001e24 <HAL_DMA_Init+0x698>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d022      	beq.n	8001d52 <HAL_DMA_Init+0x5c6>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a45      	ldr	r2, [pc, #276]	@ (8001e28 <HAL_DMA_Init+0x69c>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d01d      	beq.n	8001d52 <HAL_DMA_Init+0x5c6>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a44      	ldr	r2, [pc, #272]	@ (8001e2c <HAL_DMA_Init+0x6a0>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d018      	beq.n	8001d52 <HAL_DMA_Init+0x5c6>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a42      	ldr	r2, [pc, #264]	@ (8001e30 <HAL_DMA_Init+0x6a4>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d013      	beq.n	8001d52 <HAL_DMA_Init+0x5c6>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a41      	ldr	r2, [pc, #260]	@ (8001e34 <HAL_DMA_Init+0x6a8>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d00e      	beq.n	8001d52 <HAL_DMA_Init+0x5c6>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a3f      	ldr	r2, [pc, #252]	@ (8001e38 <HAL_DMA_Init+0x6ac>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d009      	beq.n	8001d52 <HAL_DMA_Init+0x5c6>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a3e      	ldr	r2, [pc, #248]	@ (8001e3c <HAL_DMA_Init+0x6b0>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d004      	beq.n	8001d52 <HAL_DMA_Init+0x5c6>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a3c      	ldr	r2, [pc, #240]	@ (8001e40 <HAL_DMA_Init+0x6b4>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d101      	bne.n	8001d56 <HAL_DMA_Init+0x5ca>
 8001d52:	2301      	movs	r3, #1
 8001d54:	e000      	b.n	8001d58 <HAL_DMA_Init+0x5cc>
 8001d56:	2300      	movs	r3, #0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d032      	beq.n	8001dc2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f002 fa4f 	bl	8004200 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	2b80      	cmp	r3, #128	@ 0x80
 8001d68:	d102      	bne.n	8001d70 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d78:	b2d2      	uxtb	r2, r2
 8001d7a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001d84:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d010      	beq.n	8001db0 <HAL_DMA_Init+0x624>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b08      	cmp	r3, #8
 8001d94:	d80c      	bhi.n	8001db0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f002 facc 	bl	8004334 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	e008      	b.n	8001dc2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3718      	adds	r7, #24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	a7fdabf8 	.word	0xa7fdabf8
 8001de0:	cccccccd 	.word	0xcccccccd
 8001de4:	40020010 	.word	0x40020010
 8001de8:	40020028 	.word	0x40020028
 8001dec:	40020040 	.word	0x40020040
 8001df0:	40020058 	.word	0x40020058
 8001df4:	40020070 	.word	0x40020070
 8001df8:	40020088 	.word	0x40020088
 8001dfc:	400200a0 	.word	0x400200a0
 8001e00:	400200b8 	.word	0x400200b8
 8001e04:	40020410 	.word	0x40020410
 8001e08:	40020428 	.word	0x40020428
 8001e0c:	40020440 	.word	0x40020440
 8001e10:	40020458 	.word	0x40020458
 8001e14:	40020470 	.word	0x40020470
 8001e18:	40020488 	.word	0x40020488
 8001e1c:	400204a0 	.word	0x400204a0
 8001e20:	400204b8 	.word	0x400204b8
 8001e24:	58025408 	.word	0x58025408
 8001e28:	5802541c 	.word	0x5802541c
 8001e2c:	58025430 	.word	0x58025430
 8001e30:	58025444 	.word	0x58025444
 8001e34:	58025458 	.word	0x58025458
 8001e38:	5802546c 	.word	0x5802546c
 8001e3c:	58025480 	.word	0x58025480
 8001e40:	58025494 	.word	0x58025494

08001e44 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
 8001e50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e52:	2300      	movs	r3, #0
 8001e54:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d101      	bne.n	8001e60 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e226      	b.n	80022ae <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d101      	bne.n	8001e6e <HAL_DMA_Start_IT+0x2a>
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	e21f      	b.n	80022ae <HAL_DMA_Start_IT+0x46a>
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2201      	movs	r2, #1
 8001e72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	f040 820a 	bne.w	8002298 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2202      	movs	r2, #2
 8001e88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a68      	ldr	r2, [pc, #416]	@ (8002038 <HAL_DMA_Start_IT+0x1f4>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d04a      	beq.n	8001f32 <HAL_DMA_Start_IT+0xee>
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a66      	ldr	r2, [pc, #408]	@ (800203c <HAL_DMA_Start_IT+0x1f8>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d045      	beq.n	8001f32 <HAL_DMA_Start_IT+0xee>
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a65      	ldr	r2, [pc, #404]	@ (8002040 <HAL_DMA_Start_IT+0x1fc>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d040      	beq.n	8001f32 <HAL_DMA_Start_IT+0xee>
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a63      	ldr	r2, [pc, #396]	@ (8002044 <HAL_DMA_Start_IT+0x200>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d03b      	beq.n	8001f32 <HAL_DMA_Start_IT+0xee>
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a62      	ldr	r2, [pc, #392]	@ (8002048 <HAL_DMA_Start_IT+0x204>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d036      	beq.n	8001f32 <HAL_DMA_Start_IT+0xee>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a60      	ldr	r2, [pc, #384]	@ (800204c <HAL_DMA_Start_IT+0x208>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d031      	beq.n	8001f32 <HAL_DMA_Start_IT+0xee>
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a5f      	ldr	r2, [pc, #380]	@ (8002050 <HAL_DMA_Start_IT+0x20c>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d02c      	beq.n	8001f32 <HAL_DMA_Start_IT+0xee>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a5d      	ldr	r2, [pc, #372]	@ (8002054 <HAL_DMA_Start_IT+0x210>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d027      	beq.n	8001f32 <HAL_DMA_Start_IT+0xee>
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a5c      	ldr	r2, [pc, #368]	@ (8002058 <HAL_DMA_Start_IT+0x214>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d022      	beq.n	8001f32 <HAL_DMA_Start_IT+0xee>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a5a      	ldr	r2, [pc, #360]	@ (800205c <HAL_DMA_Start_IT+0x218>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d01d      	beq.n	8001f32 <HAL_DMA_Start_IT+0xee>
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a59      	ldr	r2, [pc, #356]	@ (8002060 <HAL_DMA_Start_IT+0x21c>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d018      	beq.n	8001f32 <HAL_DMA_Start_IT+0xee>
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a57      	ldr	r2, [pc, #348]	@ (8002064 <HAL_DMA_Start_IT+0x220>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d013      	beq.n	8001f32 <HAL_DMA_Start_IT+0xee>
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a56      	ldr	r2, [pc, #344]	@ (8002068 <HAL_DMA_Start_IT+0x224>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d00e      	beq.n	8001f32 <HAL_DMA_Start_IT+0xee>
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a54      	ldr	r2, [pc, #336]	@ (800206c <HAL_DMA_Start_IT+0x228>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d009      	beq.n	8001f32 <HAL_DMA_Start_IT+0xee>
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a53      	ldr	r2, [pc, #332]	@ (8002070 <HAL_DMA_Start_IT+0x22c>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d004      	beq.n	8001f32 <HAL_DMA_Start_IT+0xee>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a51      	ldr	r2, [pc, #324]	@ (8002074 <HAL_DMA_Start_IT+0x230>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d108      	bne.n	8001f44 <HAL_DMA_Start_IT+0x100>
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 0201 	bic.w	r2, r2, #1
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	e007      	b.n	8001f54 <HAL_DMA_Start_IT+0x110>
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f022 0201 	bic.w	r2, r2, #1
 8001f52:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	68b9      	ldr	r1, [r7, #8]
 8001f5a:	68f8      	ldr	r0, [r7, #12]
 8001f5c:	f001 fe76 	bl	8003c4c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a34      	ldr	r2, [pc, #208]	@ (8002038 <HAL_DMA_Start_IT+0x1f4>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d04a      	beq.n	8002000 <HAL_DMA_Start_IT+0x1bc>
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a33      	ldr	r2, [pc, #204]	@ (800203c <HAL_DMA_Start_IT+0x1f8>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d045      	beq.n	8002000 <HAL_DMA_Start_IT+0x1bc>
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a31      	ldr	r2, [pc, #196]	@ (8002040 <HAL_DMA_Start_IT+0x1fc>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d040      	beq.n	8002000 <HAL_DMA_Start_IT+0x1bc>
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a30      	ldr	r2, [pc, #192]	@ (8002044 <HAL_DMA_Start_IT+0x200>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d03b      	beq.n	8002000 <HAL_DMA_Start_IT+0x1bc>
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a2e      	ldr	r2, [pc, #184]	@ (8002048 <HAL_DMA_Start_IT+0x204>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d036      	beq.n	8002000 <HAL_DMA_Start_IT+0x1bc>
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a2d      	ldr	r2, [pc, #180]	@ (800204c <HAL_DMA_Start_IT+0x208>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d031      	beq.n	8002000 <HAL_DMA_Start_IT+0x1bc>
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a2b      	ldr	r2, [pc, #172]	@ (8002050 <HAL_DMA_Start_IT+0x20c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d02c      	beq.n	8002000 <HAL_DMA_Start_IT+0x1bc>
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a2a      	ldr	r2, [pc, #168]	@ (8002054 <HAL_DMA_Start_IT+0x210>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d027      	beq.n	8002000 <HAL_DMA_Start_IT+0x1bc>
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a28      	ldr	r2, [pc, #160]	@ (8002058 <HAL_DMA_Start_IT+0x214>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d022      	beq.n	8002000 <HAL_DMA_Start_IT+0x1bc>
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a27      	ldr	r2, [pc, #156]	@ (800205c <HAL_DMA_Start_IT+0x218>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d01d      	beq.n	8002000 <HAL_DMA_Start_IT+0x1bc>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a25      	ldr	r2, [pc, #148]	@ (8002060 <HAL_DMA_Start_IT+0x21c>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d018      	beq.n	8002000 <HAL_DMA_Start_IT+0x1bc>
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a24      	ldr	r2, [pc, #144]	@ (8002064 <HAL_DMA_Start_IT+0x220>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d013      	beq.n	8002000 <HAL_DMA_Start_IT+0x1bc>
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a22      	ldr	r2, [pc, #136]	@ (8002068 <HAL_DMA_Start_IT+0x224>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d00e      	beq.n	8002000 <HAL_DMA_Start_IT+0x1bc>
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a21      	ldr	r2, [pc, #132]	@ (800206c <HAL_DMA_Start_IT+0x228>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d009      	beq.n	8002000 <HAL_DMA_Start_IT+0x1bc>
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a1f      	ldr	r2, [pc, #124]	@ (8002070 <HAL_DMA_Start_IT+0x22c>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d004      	beq.n	8002000 <HAL_DMA_Start_IT+0x1bc>
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a1e      	ldr	r2, [pc, #120]	@ (8002074 <HAL_DMA_Start_IT+0x230>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d101      	bne.n	8002004 <HAL_DMA_Start_IT+0x1c0>
 8002000:	2301      	movs	r3, #1
 8002002:	e000      	b.n	8002006 <HAL_DMA_Start_IT+0x1c2>
 8002004:	2300      	movs	r3, #0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d036      	beq.n	8002078 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f023 021e 	bic.w	r2, r3, #30
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f042 0216 	orr.w	r2, r2, #22
 800201c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002022:	2b00      	cmp	r3, #0
 8002024:	d03e      	beq.n	80020a4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f042 0208 	orr.w	r2, r2, #8
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	e035      	b.n	80020a4 <HAL_DMA_Start_IT+0x260>
 8002038:	40020010 	.word	0x40020010
 800203c:	40020028 	.word	0x40020028
 8002040:	40020040 	.word	0x40020040
 8002044:	40020058 	.word	0x40020058
 8002048:	40020070 	.word	0x40020070
 800204c:	40020088 	.word	0x40020088
 8002050:	400200a0 	.word	0x400200a0
 8002054:	400200b8 	.word	0x400200b8
 8002058:	40020410 	.word	0x40020410
 800205c:	40020428 	.word	0x40020428
 8002060:	40020440 	.word	0x40020440
 8002064:	40020458 	.word	0x40020458
 8002068:	40020470 	.word	0x40020470
 800206c:	40020488 	.word	0x40020488
 8002070:	400204a0 	.word	0x400204a0
 8002074:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f023 020e 	bic.w	r2, r3, #14
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f042 020a 	orr.w	r2, r2, #10
 800208a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002090:	2b00      	cmp	r3, #0
 8002092:	d007      	beq.n	80020a4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f042 0204 	orr.w	r2, r2, #4
 80020a2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a83      	ldr	r2, [pc, #524]	@ (80022b8 <HAL_DMA_Start_IT+0x474>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d072      	beq.n	8002194 <HAL_DMA_Start_IT+0x350>
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a82      	ldr	r2, [pc, #520]	@ (80022bc <HAL_DMA_Start_IT+0x478>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d06d      	beq.n	8002194 <HAL_DMA_Start_IT+0x350>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a80      	ldr	r2, [pc, #512]	@ (80022c0 <HAL_DMA_Start_IT+0x47c>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d068      	beq.n	8002194 <HAL_DMA_Start_IT+0x350>
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a7f      	ldr	r2, [pc, #508]	@ (80022c4 <HAL_DMA_Start_IT+0x480>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d063      	beq.n	8002194 <HAL_DMA_Start_IT+0x350>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a7d      	ldr	r2, [pc, #500]	@ (80022c8 <HAL_DMA_Start_IT+0x484>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d05e      	beq.n	8002194 <HAL_DMA_Start_IT+0x350>
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a7c      	ldr	r2, [pc, #496]	@ (80022cc <HAL_DMA_Start_IT+0x488>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d059      	beq.n	8002194 <HAL_DMA_Start_IT+0x350>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a7a      	ldr	r2, [pc, #488]	@ (80022d0 <HAL_DMA_Start_IT+0x48c>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d054      	beq.n	8002194 <HAL_DMA_Start_IT+0x350>
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a79      	ldr	r2, [pc, #484]	@ (80022d4 <HAL_DMA_Start_IT+0x490>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d04f      	beq.n	8002194 <HAL_DMA_Start_IT+0x350>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a77      	ldr	r2, [pc, #476]	@ (80022d8 <HAL_DMA_Start_IT+0x494>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d04a      	beq.n	8002194 <HAL_DMA_Start_IT+0x350>
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a76      	ldr	r2, [pc, #472]	@ (80022dc <HAL_DMA_Start_IT+0x498>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d045      	beq.n	8002194 <HAL_DMA_Start_IT+0x350>
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a74      	ldr	r2, [pc, #464]	@ (80022e0 <HAL_DMA_Start_IT+0x49c>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d040      	beq.n	8002194 <HAL_DMA_Start_IT+0x350>
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a73      	ldr	r2, [pc, #460]	@ (80022e4 <HAL_DMA_Start_IT+0x4a0>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d03b      	beq.n	8002194 <HAL_DMA_Start_IT+0x350>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a71      	ldr	r2, [pc, #452]	@ (80022e8 <HAL_DMA_Start_IT+0x4a4>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d036      	beq.n	8002194 <HAL_DMA_Start_IT+0x350>
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a70      	ldr	r2, [pc, #448]	@ (80022ec <HAL_DMA_Start_IT+0x4a8>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d031      	beq.n	8002194 <HAL_DMA_Start_IT+0x350>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a6e      	ldr	r2, [pc, #440]	@ (80022f0 <HAL_DMA_Start_IT+0x4ac>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d02c      	beq.n	8002194 <HAL_DMA_Start_IT+0x350>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a6d      	ldr	r2, [pc, #436]	@ (80022f4 <HAL_DMA_Start_IT+0x4b0>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d027      	beq.n	8002194 <HAL_DMA_Start_IT+0x350>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a6b      	ldr	r2, [pc, #428]	@ (80022f8 <HAL_DMA_Start_IT+0x4b4>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d022      	beq.n	8002194 <HAL_DMA_Start_IT+0x350>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a6a      	ldr	r2, [pc, #424]	@ (80022fc <HAL_DMA_Start_IT+0x4b8>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d01d      	beq.n	8002194 <HAL_DMA_Start_IT+0x350>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a68      	ldr	r2, [pc, #416]	@ (8002300 <HAL_DMA_Start_IT+0x4bc>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d018      	beq.n	8002194 <HAL_DMA_Start_IT+0x350>
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a67      	ldr	r2, [pc, #412]	@ (8002304 <HAL_DMA_Start_IT+0x4c0>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d013      	beq.n	8002194 <HAL_DMA_Start_IT+0x350>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a65      	ldr	r2, [pc, #404]	@ (8002308 <HAL_DMA_Start_IT+0x4c4>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d00e      	beq.n	8002194 <HAL_DMA_Start_IT+0x350>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a64      	ldr	r2, [pc, #400]	@ (800230c <HAL_DMA_Start_IT+0x4c8>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d009      	beq.n	8002194 <HAL_DMA_Start_IT+0x350>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a62      	ldr	r2, [pc, #392]	@ (8002310 <HAL_DMA_Start_IT+0x4cc>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d004      	beq.n	8002194 <HAL_DMA_Start_IT+0x350>
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a61      	ldr	r2, [pc, #388]	@ (8002314 <HAL_DMA_Start_IT+0x4d0>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d101      	bne.n	8002198 <HAL_DMA_Start_IT+0x354>
 8002194:	2301      	movs	r3, #1
 8002196:	e000      	b.n	800219a <HAL_DMA_Start_IT+0x356>
 8002198:	2300      	movs	r3, #0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d01a      	beq.n	80021d4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d007      	beq.n	80021bc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021ba:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d007      	beq.n	80021d4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021d2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a37      	ldr	r2, [pc, #220]	@ (80022b8 <HAL_DMA_Start_IT+0x474>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d04a      	beq.n	8002274 <HAL_DMA_Start_IT+0x430>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a36      	ldr	r2, [pc, #216]	@ (80022bc <HAL_DMA_Start_IT+0x478>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d045      	beq.n	8002274 <HAL_DMA_Start_IT+0x430>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a34      	ldr	r2, [pc, #208]	@ (80022c0 <HAL_DMA_Start_IT+0x47c>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d040      	beq.n	8002274 <HAL_DMA_Start_IT+0x430>
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a33      	ldr	r2, [pc, #204]	@ (80022c4 <HAL_DMA_Start_IT+0x480>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d03b      	beq.n	8002274 <HAL_DMA_Start_IT+0x430>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a31      	ldr	r2, [pc, #196]	@ (80022c8 <HAL_DMA_Start_IT+0x484>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d036      	beq.n	8002274 <HAL_DMA_Start_IT+0x430>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a30      	ldr	r2, [pc, #192]	@ (80022cc <HAL_DMA_Start_IT+0x488>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d031      	beq.n	8002274 <HAL_DMA_Start_IT+0x430>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a2e      	ldr	r2, [pc, #184]	@ (80022d0 <HAL_DMA_Start_IT+0x48c>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d02c      	beq.n	8002274 <HAL_DMA_Start_IT+0x430>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a2d      	ldr	r2, [pc, #180]	@ (80022d4 <HAL_DMA_Start_IT+0x490>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d027      	beq.n	8002274 <HAL_DMA_Start_IT+0x430>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a2b      	ldr	r2, [pc, #172]	@ (80022d8 <HAL_DMA_Start_IT+0x494>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d022      	beq.n	8002274 <HAL_DMA_Start_IT+0x430>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a2a      	ldr	r2, [pc, #168]	@ (80022dc <HAL_DMA_Start_IT+0x498>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d01d      	beq.n	8002274 <HAL_DMA_Start_IT+0x430>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a28      	ldr	r2, [pc, #160]	@ (80022e0 <HAL_DMA_Start_IT+0x49c>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d018      	beq.n	8002274 <HAL_DMA_Start_IT+0x430>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a27      	ldr	r2, [pc, #156]	@ (80022e4 <HAL_DMA_Start_IT+0x4a0>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d013      	beq.n	8002274 <HAL_DMA_Start_IT+0x430>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a25      	ldr	r2, [pc, #148]	@ (80022e8 <HAL_DMA_Start_IT+0x4a4>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d00e      	beq.n	8002274 <HAL_DMA_Start_IT+0x430>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a24      	ldr	r2, [pc, #144]	@ (80022ec <HAL_DMA_Start_IT+0x4a8>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d009      	beq.n	8002274 <HAL_DMA_Start_IT+0x430>
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a22      	ldr	r2, [pc, #136]	@ (80022f0 <HAL_DMA_Start_IT+0x4ac>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d004      	beq.n	8002274 <HAL_DMA_Start_IT+0x430>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a21      	ldr	r2, [pc, #132]	@ (80022f4 <HAL_DMA_Start_IT+0x4b0>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d108      	bne.n	8002286 <HAL_DMA_Start_IT+0x442>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f042 0201 	orr.w	r2, r2, #1
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	e012      	b.n	80022ac <HAL_DMA_Start_IT+0x468>
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f042 0201 	orr.w	r2, r2, #1
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	e009      	b.n	80022ac <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800229e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80022ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3718      	adds	r7, #24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40020010 	.word	0x40020010
 80022bc:	40020028 	.word	0x40020028
 80022c0:	40020040 	.word	0x40020040
 80022c4:	40020058 	.word	0x40020058
 80022c8:	40020070 	.word	0x40020070
 80022cc:	40020088 	.word	0x40020088
 80022d0:	400200a0 	.word	0x400200a0
 80022d4:	400200b8 	.word	0x400200b8
 80022d8:	40020410 	.word	0x40020410
 80022dc:	40020428 	.word	0x40020428
 80022e0:	40020440 	.word	0x40020440
 80022e4:	40020458 	.word	0x40020458
 80022e8:	40020470 	.word	0x40020470
 80022ec:	40020488 	.word	0x40020488
 80022f0:	400204a0 	.word	0x400204a0
 80022f4:	400204b8 	.word	0x400204b8
 80022f8:	58025408 	.word	0x58025408
 80022fc:	5802541c 	.word	0x5802541c
 8002300:	58025430 	.word	0x58025430
 8002304:	58025444 	.word	0x58025444
 8002308:	58025458 	.word	0x58025458
 800230c:	5802546c 	.word	0x5802546c
 8002310:	58025480 	.word	0x58025480
 8002314:	58025494 	.word	0x58025494

08002318 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002320:	f7ff f8e8 	bl	80014f4 <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d101      	bne.n	8002330 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e2dc      	b.n	80028ea <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002336:	b2db      	uxtb	r3, r3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d008      	beq.n	800234e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2280      	movs	r2, #128	@ 0x80
 8002340:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e2cd      	b.n	80028ea <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a76      	ldr	r2, [pc, #472]	@ (800252c <HAL_DMA_Abort+0x214>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d04a      	beq.n	80023ee <HAL_DMA_Abort+0xd6>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a74      	ldr	r2, [pc, #464]	@ (8002530 <HAL_DMA_Abort+0x218>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d045      	beq.n	80023ee <HAL_DMA_Abort+0xd6>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a73      	ldr	r2, [pc, #460]	@ (8002534 <HAL_DMA_Abort+0x21c>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d040      	beq.n	80023ee <HAL_DMA_Abort+0xd6>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a71      	ldr	r2, [pc, #452]	@ (8002538 <HAL_DMA_Abort+0x220>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d03b      	beq.n	80023ee <HAL_DMA_Abort+0xd6>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a70      	ldr	r2, [pc, #448]	@ (800253c <HAL_DMA_Abort+0x224>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d036      	beq.n	80023ee <HAL_DMA_Abort+0xd6>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a6e      	ldr	r2, [pc, #440]	@ (8002540 <HAL_DMA_Abort+0x228>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d031      	beq.n	80023ee <HAL_DMA_Abort+0xd6>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a6d      	ldr	r2, [pc, #436]	@ (8002544 <HAL_DMA_Abort+0x22c>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d02c      	beq.n	80023ee <HAL_DMA_Abort+0xd6>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a6b      	ldr	r2, [pc, #428]	@ (8002548 <HAL_DMA_Abort+0x230>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d027      	beq.n	80023ee <HAL_DMA_Abort+0xd6>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a6a      	ldr	r2, [pc, #424]	@ (800254c <HAL_DMA_Abort+0x234>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d022      	beq.n	80023ee <HAL_DMA_Abort+0xd6>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a68      	ldr	r2, [pc, #416]	@ (8002550 <HAL_DMA_Abort+0x238>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d01d      	beq.n	80023ee <HAL_DMA_Abort+0xd6>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a67      	ldr	r2, [pc, #412]	@ (8002554 <HAL_DMA_Abort+0x23c>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d018      	beq.n	80023ee <HAL_DMA_Abort+0xd6>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a65      	ldr	r2, [pc, #404]	@ (8002558 <HAL_DMA_Abort+0x240>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d013      	beq.n	80023ee <HAL_DMA_Abort+0xd6>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a64      	ldr	r2, [pc, #400]	@ (800255c <HAL_DMA_Abort+0x244>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d00e      	beq.n	80023ee <HAL_DMA_Abort+0xd6>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a62      	ldr	r2, [pc, #392]	@ (8002560 <HAL_DMA_Abort+0x248>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d009      	beq.n	80023ee <HAL_DMA_Abort+0xd6>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a61      	ldr	r2, [pc, #388]	@ (8002564 <HAL_DMA_Abort+0x24c>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d004      	beq.n	80023ee <HAL_DMA_Abort+0xd6>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a5f      	ldr	r2, [pc, #380]	@ (8002568 <HAL_DMA_Abort+0x250>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d101      	bne.n	80023f2 <HAL_DMA_Abort+0xda>
 80023ee:	2301      	movs	r3, #1
 80023f0:	e000      	b.n	80023f4 <HAL_DMA_Abort+0xdc>
 80023f2:	2300      	movs	r3, #0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d013      	beq.n	8002420 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f022 021e 	bic.w	r2, r2, #30
 8002406:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	695a      	ldr	r2, [r3, #20]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002416:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	617b      	str	r3, [r7, #20]
 800241e:	e00a      	b.n	8002436 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 020e 	bic.w	r2, r2, #14
 800242e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a3c      	ldr	r2, [pc, #240]	@ (800252c <HAL_DMA_Abort+0x214>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d072      	beq.n	8002526 <HAL_DMA_Abort+0x20e>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a3a      	ldr	r2, [pc, #232]	@ (8002530 <HAL_DMA_Abort+0x218>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d06d      	beq.n	8002526 <HAL_DMA_Abort+0x20e>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a39      	ldr	r2, [pc, #228]	@ (8002534 <HAL_DMA_Abort+0x21c>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d068      	beq.n	8002526 <HAL_DMA_Abort+0x20e>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a37      	ldr	r2, [pc, #220]	@ (8002538 <HAL_DMA_Abort+0x220>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d063      	beq.n	8002526 <HAL_DMA_Abort+0x20e>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a36      	ldr	r2, [pc, #216]	@ (800253c <HAL_DMA_Abort+0x224>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d05e      	beq.n	8002526 <HAL_DMA_Abort+0x20e>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a34      	ldr	r2, [pc, #208]	@ (8002540 <HAL_DMA_Abort+0x228>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d059      	beq.n	8002526 <HAL_DMA_Abort+0x20e>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a33      	ldr	r2, [pc, #204]	@ (8002544 <HAL_DMA_Abort+0x22c>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d054      	beq.n	8002526 <HAL_DMA_Abort+0x20e>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a31      	ldr	r2, [pc, #196]	@ (8002548 <HAL_DMA_Abort+0x230>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d04f      	beq.n	8002526 <HAL_DMA_Abort+0x20e>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a30      	ldr	r2, [pc, #192]	@ (800254c <HAL_DMA_Abort+0x234>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d04a      	beq.n	8002526 <HAL_DMA_Abort+0x20e>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a2e      	ldr	r2, [pc, #184]	@ (8002550 <HAL_DMA_Abort+0x238>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d045      	beq.n	8002526 <HAL_DMA_Abort+0x20e>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a2d      	ldr	r2, [pc, #180]	@ (8002554 <HAL_DMA_Abort+0x23c>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d040      	beq.n	8002526 <HAL_DMA_Abort+0x20e>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a2b      	ldr	r2, [pc, #172]	@ (8002558 <HAL_DMA_Abort+0x240>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d03b      	beq.n	8002526 <HAL_DMA_Abort+0x20e>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a2a      	ldr	r2, [pc, #168]	@ (800255c <HAL_DMA_Abort+0x244>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d036      	beq.n	8002526 <HAL_DMA_Abort+0x20e>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a28      	ldr	r2, [pc, #160]	@ (8002560 <HAL_DMA_Abort+0x248>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d031      	beq.n	8002526 <HAL_DMA_Abort+0x20e>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a27      	ldr	r2, [pc, #156]	@ (8002564 <HAL_DMA_Abort+0x24c>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d02c      	beq.n	8002526 <HAL_DMA_Abort+0x20e>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a25      	ldr	r2, [pc, #148]	@ (8002568 <HAL_DMA_Abort+0x250>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d027      	beq.n	8002526 <HAL_DMA_Abort+0x20e>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a24      	ldr	r2, [pc, #144]	@ (800256c <HAL_DMA_Abort+0x254>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d022      	beq.n	8002526 <HAL_DMA_Abort+0x20e>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a22      	ldr	r2, [pc, #136]	@ (8002570 <HAL_DMA_Abort+0x258>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d01d      	beq.n	8002526 <HAL_DMA_Abort+0x20e>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a21      	ldr	r2, [pc, #132]	@ (8002574 <HAL_DMA_Abort+0x25c>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d018      	beq.n	8002526 <HAL_DMA_Abort+0x20e>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a1f      	ldr	r2, [pc, #124]	@ (8002578 <HAL_DMA_Abort+0x260>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d013      	beq.n	8002526 <HAL_DMA_Abort+0x20e>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a1e      	ldr	r2, [pc, #120]	@ (800257c <HAL_DMA_Abort+0x264>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d00e      	beq.n	8002526 <HAL_DMA_Abort+0x20e>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a1c      	ldr	r2, [pc, #112]	@ (8002580 <HAL_DMA_Abort+0x268>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d009      	beq.n	8002526 <HAL_DMA_Abort+0x20e>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a1b      	ldr	r2, [pc, #108]	@ (8002584 <HAL_DMA_Abort+0x26c>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d004      	beq.n	8002526 <HAL_DMA_Abort+0x20e>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a19      	ldr	r2, [pc, #100]	@ (8002588 <HAL_DMA_Abort+0x270>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d132      	bne.n	800258c <HAL_DMA_Abort+0x274>
 8002526:	2301      	movs	r3, #1
 8002528:	e031      	b.n	800258e <HAL_DMA_Abort+0x276>
 800252a:	bf00      	nop
 800252c:	40020010 	.word	0x40020010
 8002530:	40020028 	.word	0x40020028
 8002534:	40020040 	.word	0x40020040
 8002538:	40020058 	.word	0x40020058
 800253c:	40020070 	.word	0x40020070
 8002540:	40020088 	.word	0x40020088
 8002544:	400200a0 	.word	0x400200a0
 8002548:	400200b8 	.word	0x400200b8
 800254c:	40020410 	.word	0x40020410
 8002550:	40020428 	.word	0x40020428
 8002554:	40020440 	.word	0x40020440
 8002558:	40020458 	.word	0x40020458
 800255c:	40020470 	.word	0x40020470
 8002560:	40020488 	.word	0x40020488
 8002564:	400204a0 	.word	0x400204a0
 8002568:	400204b8 	.word	0x400204b8
 800256c:	58025408 	.word	0x58025408
 8002570:	5802541c 	.word	0x5802541c
 8002574:	58025430 	.word	0x58025430
 8002578:	58025444 	.word	0x58025444
 800257c:	58025458 	.word	0x58025458
 8002580:	5802546c 	.word	0x5802546c
 8002584:	58025480 	.word	0x58025480
 8002588:	58025494 	.word	0x58025494
 800258c:	2300      	movs	r3, #0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d007      	beq.n	80025a2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800259c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80025a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a6d      	ldr	r2, [pc, #436]	@ (800275c <HAL_DMA_Abort+0x444>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d04a      	beq.n	8002642 <HAL_DMA_Abort+0x32a>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a6b      	ldr	r2, [pc, #428]	@ (8002760 <HAL_DMA_Abort+0x448>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d045      	beq.n	8002642 <HAL_DMA_Abort+0x32a>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a6a      	ldr	r2, [pc, #424]	@ (8002764 <HAL_DMA_Abort+0x44c>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d040      	beq.n	8002642 <HAL_DMA_Abort+0x32a>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a68      	ldr	r2, [pc, #416]	@ (8002768 <HAL_DMA_Abort+0x450>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d03b      	beq.n	8002642 <HAL_DMA_Abort+0x32a>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a67      	ldr	r2, [pc, #412]	@ (800276c <HAL_DMA_Abort+0x454>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d036      	beq.n	8002642 <HAL_DMA_Abort+0x32a>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a65      	ldr	r2, [pc, #404]	@ (8002770 <HAL_DMA_Abort+0x458>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d031      	beq.n	8002642 <HAL_DMA_Abort+0x32a>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a64      	ldr	r2, [pc, #400]	@ (8002774 <HAL_DMA_Abort+0x45c>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d02c      	beq.n	8002642 <HAL_DMA_Abort+0x32a>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a62      	ldr	r2, [pc, #392]	@ (8002778 <HAL_DMA_Abort+0x460>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d027      	beq.n	8002642 <HAL_DMA_Abort+0x32a>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a61      	ldr	r2, [pc, #388]	@ (800277c <HAL_DMA_Abort+0x464>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d022      	beq.n	8002642 <HAL_DMA_Abort+0x32a>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a5f      	ldr	r2, [pc, #380]	@ (8002780 <HAL_DMA_Abort+0x468>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d01d      	beq.n	8002642 <HAL_DMA_Abort+0x32a>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a5e      	ldr	r2, [pc, #376]	@ (8002784 <HAL_DMA_Abort+0x46c>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d018      	beq.n	8002642 <HAL_DMA_Abort+0x32a>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a5c      	ldr	r2, [pc, #368]	@ (8002788 <HAL_DMA_Abort+0x470>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d013      	beq.n	8002642 <HAL_DMA_Abort+0x32a>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a5b      	ldr	r2, [pc, #364]	@ (800278c <HAL_DMA_Abort+0x474>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d00e      	beq.n	8002642 <HAL_DMA_Abort+0x32a>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a59      	ldr	r2, [pc, #356]	@ (8002790 <HAL_DMA_Abort+0x478>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d009      	beq.n	8002642 <HAL_DMA_Abort+0x32a>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a58      	ldr	r2, [pc, #352]	@ (8002794 <HAL_DMA_Abort+0x47c>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d004      	beq.n	8002642 <HAL_DMA_Abort+0x32a>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a56      	ldr	r2, [pc, #344]	@ (8002798 <HAL_DMA_Abort+0x480>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d108      	bne.n	8002654 <HAL_DMA_Abort+0x33c>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f022 0201 	bic.w	r2, r2, #1
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	e007      	b.n	8002664 <HAL_DMA_Abort+0x34c>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f022 0201 	bic.w	r2, r2, #1
 8002662:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002664:	e013      	b.n	800268e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002666:	f7fe ff45 	bl	80014f4 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b05      	cmp	r3, #5
 8002672:	d90c      	bls.n	800268e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2220      	movs	r2, #32
 8002678:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2203      	movs	r2, #3
 800267e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e12d      	b.n	80028ea <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1e5      	bne.n	8002666 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a2f      	ldr	r2, [pc, #188]	@ (800275c <HAL_DMA_Abort+0x444>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d04a      	beq.n	800273a <HAL_DMA_Abort+0x422>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a2d      	ldr	r2, [pc, #180]	@ (8002760 <HAL_DMA_Abort+0x448>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d045      	beq.n	800273a <HAL_DMA_Abort+0x422>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a2c      	ldr	r2, [pc, #176]	@ (8002764 <HAL_DMA_Abort+0x44c>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d040      	beq.n	800273a <HAL_DMA_Abort+0x422>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a2a      	ldr	r2, [pc, #168]	@ (8002768 <HAL_DMA_Abort+0x450>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d03b      	beq.n	800273a <HAL_DMA_Abort+0x422>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a29      	ldr	r2, [pc, #164]	@ (800276c <HAL_DMA_Abort+0x454>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d036      	beq.n	800273a <HAL_DMA_Abort+0x422>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a27      	ldr	r2, [pc, #156]	@ (8002770 <HAL_DMA_Abort+0x458>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d031      	beq.n	800273a <HAL_DMA_Abort+0x422>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a26      	ldr	r2, [pc, #152]	@ (8002774 <HAL_DMA_Abort+0x45c>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d02c      	beq.n	800273a <HAL_DMA_Abort+0x422>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a24      	ldr	r2, [pc, #144]	@ (8002778 <HAL_DMA_Abort+0x460>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d027      	beq.n	800273a <HAL_DMA_Abort+0x422>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a23      	ldr	r2, [pc, #140]	@ (800277c <HAL_DMA_Abort+0x464>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d022      	beq.n	800273a <HAL_DMA_Abort+0x422>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a21      	ldr	r2, [pc, #132]	@ (8002780 <HAL_DMA_Abort+0x468>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d01d      	beq.n	800273a <HAL_DMA_Abort+0x422>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a20      	ldr	r2, [pc, #128]	@ (8002784 <HAL_DMA_Abort+0x46c>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d018      	beq.n	800273a <HAL_DMA_Abort+0x422>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a1e      	ldr	r2, [pc, #120]	@ (8002788 <HAL_DMA_Abort+0x470>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d013      	beq.n	800273a <HAL_DMA_Abort+0x422>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a1d      	ldr	r2, [pc, #116]	@ (800278c <HAL_DMA_Abort+0x474>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d00e      	beq.n	800273a <HAL_DMA_Abort+0x422>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a1b      	ldr	r2, [pc, #108]	@ (8002790 <HAL_DMA_Abort+0x478>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d009      	beq.n	800273a <HAL_DMA_Abort+0x422>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a1a      	ldr	r2, [pc, #104]	@ (8002794 <HAL_DMA_Abort+0x47c>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d004      	beq.n	800273a <HAL_DMA_Abort+0x422>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a18      	ldr	r2, [pc, #96]	@ (8002798 <HAL_DMA_Abort+0x480>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d101      	bne.n	800273e <HAL_DMA_Abort+0x426>
 800273a:	2301      	movs	r3, #1
 800273c:	e000      	b.n	8002740 <HAL_DMA_Abort+0x428>
 800273e:	2300      	movs	r3, #0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d02b      	beq.n	800279c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002748:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800274e:	f003 031f 	and.w	r3, r3, #31
 8002752:	223f      	movs	r2, #63	@ 0x3f
 8002754:	409a      	lsls	r2, r3
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	609a      	str	r2, [r3, #8]
 800275a:	e02a      	b.n	80027b2 <HAL_DMA_Abort+0x49a>
 800275c:	40020010 	.word	0x40020010
 8002760:	40020028 	.word	0x40020028
 8002764:	40020040 	.word	0x40020040
 8002768:	40020058 	.word	0x40020058
 800276c:	40020070 	.word	0x40020070
 8002770:	40020088 	.word	0x40020088
 8002774:	400200a0 	.word	0x400200a0
 8002778:	400200b8 	.word	0x400200b8
 800277c:	40020410 	.word	0x40020410
 8002780:	40020428 	.word	0x40020428
 8002784:	40020440 	.word	0x40020440
 8002788:	40020458 	.word	0x40020458
 800278c:	40020470 	.word	0x40020470
 8002790:	40020488 	.word	0x40020488
 8002794:	400204a0 	.word	0x400204a0
 8002798:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027a0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027a6:	f003 031f 	and.w	r3, r3, #31
 80027aa:	2201      	movs	r2, #1
 80027ac:	409a      	lsls	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a4f      	ldr	r2, [pc, #316]	@ (80028f4 <HAL_DMA_Abort+0x5dc>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d072      	beq.n	80028a2 <HAL_DMA_Abort+0x58a>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a4d      	ldr	r2, [pc, #308]	@ (80028f8 <HAL_DMA_Abort+0x5e0>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d06d      	beq.n	80028a2 <HAL_DMA_Abort+0x58a>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a4c      	ldr	r2, [pc, #304]	@ (80028fc <HAL_DMA_Abort+0x5e4>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d068      	beq.n	80028a2 <HAL_DMA_Abort+0x58a>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a4a      	ldr	r2, [pc, #296]	@ (8002900 <HAL_DMA_Abort+0x5e8>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d063      	beq.n	80028a2 <HAL_DMA_Abort+0x58a>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a49      	ldr	r2, [pc, #292]	@ (8002904 <HAL_DMA_Abort+0x5ec>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d05e      	beq.n	80028a2 <HAL_DMA_Abort+0x58a>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a47      	ldr	r2, [pc, #284]	@ (8002908 <HAL_DMA_Abort+0x5f0>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d059      	beq.n	80028a2 <HAL_DMA_Abort+0x58a>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a46      	ldr	r2, [pc, #280]	@ (800290c <HAL_DMA_Abort+0x5f4>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d054      	beq.n	80028a2 <HAL_DMA_Abort+0x58a>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a44      	ldr	r2, [pc, #272]	@ (8002910 <HAL_DMA_Abort+0x5f8>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d04f      	beq.n	80028a2 <HAL_DMA_Abort+0x58a>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a43      	ldr	r2, [pc, #268]	@ (8002914 <HAL_DMA_Abort+0x5fc>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d04a      	beq.n	80028a2 <HAL_DMA_Abort+0x58a>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a41      	ldr	r2, [pc, #260]	@ (8002918 <HAL_DMA_Abort+0x600>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d045      	beq.n	80028a2 <HAL_DMA_Abort+0x58a>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a40      	ldr	r2, [pc, #256]	@ (800291c <HAL_DMA_Abort+0x604>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d040      	beq.n	80028a2 <HAL_DMA_Abort+0x58a>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a3e      	ldr	r2, [pc, #248]	@ (8002920 <HAL_DMA_Abort+0x608>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d03b      	beq.n	80028a2 <HAL_DMA_Abort+0x58a>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a3d      	ldr	r2, [pc, #244]	@ (8002924 <HAL_DMA_Abort+0x60c>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d036      	beq.n	80028a2 <HAL_DMA_Abort+0x58a>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a3b      	ldr	r2, [pc, #236]	@ (8002928 <HAL_DMA_Abort+0x610>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d031      	beq.n	80028a2 <HAL_DMA_Abort+0x58a>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a3a      	ldr	r2, [pc, #232]	@ (800292c <HAL_DMA_Abort+0x614>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d02c      	beq.n	80028a2 <HAL_DMA_Abort+0x58a>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a38      	ldr	r2, [pc, #224]	@ (8002930 <HAL_DMA_Abort+0x618>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d027      	beq.n	80028a2 <HAL_DMA_Abort+0x58a>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a37      	ldr	r2, [pc, #220]	@ (8002934 <HAL_DMA_Abort+0x61c>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d022      	beq.n	80028a2 <HAL_DMA_Abort+0x58a>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a35      	ldr	r2, [pc, #212]	@ (8002938 <HAL_DMA_Abort+0x620>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d01d      	beq.n	80028a2 <HAL_DMA_Abort+0x58a>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a34      	ldr	r2, [pc, #208]	@ (800293c <HAL_DMA_Abort+0x624>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d018      	beq.n	80028a2 <HAL_DMA_Abort+0x58a>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a32      	ldr	r2, [pc, #200]	@ (8002940 <HAL_DMA_Abort+0x628>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d013      	beq.n	80028a2 <HAL_DMA_Abort+0x58a>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a31      	ldr	r2, [pc, #196]	@ (8002944 <HAL_DMA_Abort+0x62c>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d00e      	beq.n	80028a2 <HAL_DMA_Abort+0x58a>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a2f      	ldr	r2, [pc, #188]	@ (8002948 <HAL_DMA_Abort+0x630>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d009      	beq.n	80028a2 <HAL_DMA_Abort+0x58a>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a2e      	ldr	r2, [pc, #184]	@ (800294c <HAL_DMA_Abort+0x634>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d004      	beq.n	80028a2 <HAL_DMA_Abort+0x58a>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a2c      	ldr	r2, [pc, #176]	@ (8002950 <HAL_DMA_Abort+0x638>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d101      	bne.n	80028a6 <HAL_DMA_Abort+0x58e>
 80028a2:	2301      	movs	r3, #1
 80028a4:	e000      	b.n	80028a8 <HAL_DMA_Abort+0x590>
 80028a6:	2300      	movs	r3, #0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d015      	beq.n	80028d8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80028b4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00c      	beq.n	80028d8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028cc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80028d6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3718      	adds	r7, #24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	40020010 	.word	0x40020010
 80028f8:	40020028 	.word	0x40020028
 80028fc:	40020040 	.word	0x40020040
 8002900:	40020058 	.word	0x40020058
 8002904:	40020070 	.word	0x40020070
 8002908:	40020088 	.word	0x40020088
 800290c:	400200a0 	.word	0x400200a0
 8002910:	400200b8 	.word	0x400200b8
 8002914:	40020410 	.word	0x40020410
 8002918:	40020428 	.word	0x40020428
 800291c:	40020440 	.word	0x40020440
 8002920:	40020458 	.word	0x40020458
 8002924:	40020470 	.word	0x40020470
 8002928:	40020488 	.word	0x40020488
 800292c:	400204a0 	.word	0x400204a0
 8002930:	400204b8 	.word	0x400204b8
 8002934:	58025408 	.word	0x58025408
 8002938:	5802541c 	.word	0x5802541c
 800293c:	58025430 	.word	0x58025430
 8002940:	58025444 	.word	0x58025444
 8002944:	58025458 	.word	0x58025458
 8002948:	5802546c 	.word	0x5802546c
 800294c:	58025480 	.word	0x58025480
 8002950:	58025494 	.word	0x58025494

08002954 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e237      	b.n	8002dd6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d004      	beq.n	800297c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2280      	movs	r2, #128	@ 0x80
 8002976:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e22c      	b.n	8002dd6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a5c      	ldr	r2, [pc, #368]	@ (8002af4 <HAL_DMA_Abort_IT+0x1a0>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d04a      	beq.n	8002a1c <HAL_DMA_Abort_IT+0xc8>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a5b      	ldr	r2, [pc, #364]	@ (8002af8 <HAL_DMA_Abort_IT+0x1a4>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d045      	beq.n	8002a1c <HAL_DMA_Abort_IT+0xc8>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a59      	ldr	r2, [pc, #356]	@ (8002afc <HAL_DMA_Abort_IT+0x1a8>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d040      	beq.n	8002a1c <HAL_DMA_Abort_IT+0xc8>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a58      	ldr	r2, [pc, #352]	@ (8002b00 <HAL_DMA_Abort_IT+0x1ac>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d03b      	beq.n	8002a1c <HAL_DMA_Abort_IT+0xc8>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a56      	ldr	r2, [pc, #344]	@ (8002b04 <HAL_DMA_Abort_IT+0x1b0>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d036      	beq.n	8002a1c <HAL_DMA_Abort_IT+0xc8>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a55      	ldr	r2, [pc, #340]	@ (8002b08 <HAL_DMA_Abort_IT+0x1b4>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d031      	beq.n	8002a1c <HAL_DMA_Abort_IT+0xc8>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a53      	ldr	r2, [pc, #332]	@ (8002b0c <HAL_DMA_Abort_IT+0x1b8>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d02c      	beq.n	8002a1c <HAL_DMA_Abort_IT+0xc8>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a52      	ldr	r2, [pc, #328]	@ (8002b10 <HAL_DMA_Abort_IT+0x1bc>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d027      	beq.n	8002a1c <HAL_DMA_Abort_IT+0xc8>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a50      	ldr	r2, [pc, #320]	@ (8002b14 <HAL_DMA_Abort_IT+0x1c0>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d022      	beq.n	8002a1c <HAL_DMA_Abort_IT+0xc8>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a4f      	ldr	r2, [pc, #316]	@ (8002b18 <HAL_DMA_Abort_IT+0x1c4>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d01d      	beq.n	8002a1c <HAL_DMA_Abort_IT+0xc8>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a4d      	ldr	r2, [pc, #308]	@ (8002b1c <HAL_DMA_Abort_IT+0x1c8>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d018      	beq.n	8002a1c <HAL_DMA_Abort_IT+0xc8>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a4c      	ldr	r2, [pc, #304]	@ (8002b20 <HAL_DMA_Abort_IT+0x1cc>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d013      	beq.n	8002a1c <HAL_DMA_Abort_IT+0xc8>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a4a      	ldr	r2, [pc, #296]	@ (8002b24 <HAL_DMA_Abort_IT+0x1d0>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d00e      	beq.n	8002a1c <HAL_DMA_Abort_IT+0xc8>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a49      	ldr	r2, [pc, #292]	@ (8002b28 <HAL_DMA_Abort_IT+0x1d4>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d009      	beq.n	8002a1c <HAL_DMA_Abort_IT+0xc8>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a47      	ldr	r2, [pc, #284]	@ (8002b2c <HAL_DMA_Abort_IT+0x1d8>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d004      	beq.n	8002a1c <HAL_DMA_Abort_IT+0xc8>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a46      	ldr	r2, [pc, #280]	@ (8002b30 <HAL_DMA_Abort_IT+0x1dc>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d101      	bne.n	8002a20 <HAL_DMA_Abort_IT+0xcc>
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e000      	b.n	8002a22 <HAL_DMA_Abort_IT+0xce>
 8002a20:	2300      	movs	r3, #0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f000 8086 	beq.w	8002b34 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2204      	movs	r2, #4
 8002a2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a2f      	ldr	r2, [pc, #188]	@ (8002af4 <HAL_DMA_Abort_IT+0x1a0>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d04a      	beq.n	8002ad0 <HAL_DMA_Abort_IT+0x17c>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a2e      	ldr	r2, [pc, #184]	@ (8002af8 <HAL_DMA_Abort_IT+0x1a4>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d045      	beq.n	8002ad0 <HAL_DMA_Abort_IT+0x17c>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a2c      	ldr	r2, [pc, #176]	@ (8002afc <HAL_DMA_Abort_IT+0x1a8>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d040      	beq.n	8002ad0 <HAL_DMA_Abort_IT+0x17c>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a2b      	ldr	r2, [pc, #172]	@ (8002b00 <HAL_DMA_Abort_IT+0x1ac>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d03b      	beq.n	8002ad0 <HAL_DMA_Abort_IT+0x17c>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a29      	ldr	r2, [pc, #164]	@ (8002b04 <HAL_DMA_Abort_IT+0x1b0>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d036      	beq.n	8002ad0 <HAL_DMA_Abort_IT+0x17c>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a28      	ldr	r2, [pc, #160]	@ (8002b08 <HAL_DMA_Abort_IT+0x1b4>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d031      	beq.n	8002ad0 <HAL_DMA_Abort_IT+0x17c>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a26      	ldr	r2, [pc, #152]	@ (8002b0c <HAL_DMA_Abort_IT+0x1b8>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d02c      	beq.n	8002ad0 <HAL_DMA_Abort_IT+0x17c>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a25      	ldr	r2, [pc, #148]	@ (8002b10 <HAL_DMA_Abort_IT+0x1bc>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d027      	beq.n	8002ad0 <HAL_DMA_Abort_IT+0x17c>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a23      	ldr	r2, [pc, #140]	@ (8002b14 <HAL_DMA_Abort_IT+0x1c0>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d022      	beq.n	8002ad0 <HAL_DMA_Abort_IT+0x17c>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a22      	ldr	r2, [pc, #136]	@ (8002b18 <HAL_DMA_Abort_IT+0x1c4>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d01d      	beq.n	8002ad0 <HAL_DMA_Abort_IT+0x17c>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a20      	ldr	r2, [pc, #128]	@ (8002b1c <HAL_DMA_Abort_IT+0x1c8>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d018      	beq.n	8002ad0 <HAL_DMA_Abort_IT+0x17c>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a1f      	ldr	r2, [pc, #124]	@ (8002b20 <HAL_DMA_Abort_IT+0x1cc>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d013      	beq.n	8002ad0 <HAL_DMA_Abort_IT+0x17c>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a1d      	ldr	r2, [pc, #116]	@ (8002b24 <HAL_DMA_Abort_IT+0x1d0>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d00e      	beq.n	8002ad0 <HAL_DMA_Abort_IT+0x17c>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a1c      	ldr	r2, [pc, #112]	@ (8002b28 <HAL_DMA_Abort_IT+0x1d4>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d009      	beq.n	8002ad0 <HAL_DMA_Abort_IT+0x17c>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a1a      	ldr	r2, [pc, #104]	@ (8002b2c <HAL_DMA_Abort_IT+0x1d8>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d004      	beq.n	8002ad0 <HAL_DMA_Abort_IT+0x17c>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a19      	ldr	r2, [pc, #100]	@ (8002b30 <HAL_DMA_Abort_IT+0x1dc>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d108      	bne.n	8002ae2 <HAL_DMA_Abort_IT+0x18e>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f022 0201 	bic.w	r2, r2, #1
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	e178      	b.n	8002dd4 <HAL_DMA_Abort_IT+0x480>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f022 0201 	bic.w	r2, r2, #1
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	e16f      	b.n	8002dd4 <HAL_DMA_Abort_IT+0x480>
 8002af4:	40020010 	.word	0x40020010
 8002af8:	40020028 	.word	0x40020028
 8002afc:	40020040 	.word	0x40020040
 8002b00:	40020058 	.word	0x40020058
 8002b04:	40020070 	.word	0x40020070
 8002b08:	40020088 	.word	0x40020088
 8002b0c:	400200a0 	.word	0x400200a0
 8002b10:	400200b8 	.word	0x400200b8
 8002b14:	40020410 	.word	0x40020410
 8002b18:	40020428 	.word	0x40020428
 8002b1c:	40020440 	.word	0x40020440
 8002b20:	40020458 	.word	0x40020458
 8002b24:	40020470 	.word	0x40020470
 8002b28:	40020488 	.word	0x40020488
 8002b2c:	400204a0 	.word	0x400204a0
 8002b30:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f022 020e 	bic.w	r2, r2, #14
 8002b42:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a6c      	ldr	r2, [pc, #432]	@ (8002cfc <HAL_DMA_Abort_IT+0x3a8>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d04a      	beq.n	8002be4 <HAL_DMA_Abort_IT+0x290>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a6b      	ldr	r2, [pc, #428]	@ (8002d00 <HAL_DMA_Abort_IT+0x3ac>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d045      	beq.n	8002be4 <HAL_DMA_Abort_IT+0x290>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a69      	ldr	r2, [pc, #420]	@ (8002d04 <HAL_DMA_Abort_IT+0x3b0>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d040      	beq.n	8002be4 <HAL_DMA_Abort_IT+0x290>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a68      	ldr	r2, [pc, #416]	@ (8002d08 <HAL_DMA_Abort_IT+0x3b4>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d03b      	beq.n	8002be4 <HAL_DMA_Abort_IT+0x290>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a66      	ldr	r2, [pc, #408]	@ (8002d0c <HAL_DMA_Abort_IT+0x3b8>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d036      	beq.n	8002be4 <HAL_DMA_Abort_IT+0x290>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a65      	ldr	r2, [pc, #404]	@ (8002d10 <HAL_DMA_Abort_IT+0x3bc>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d031      	beq.n	8002be4 <HAL_DMA_Abort_IT+0x290>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a63      	ldr	r2, [pc, #396]	@ (8002d14 <HAL_DMA_Abort_IT+0x3c0>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d02c      	beq.n	8002be4 <HAL_DMA_Abort_IT+0x290>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a62      	ldr	r2, [pc, #392]	@ (8002d18 <HAL_DMA_Abort_IT+0x3c4>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d027      	beq.n	8002be4 <HAL_DMA_Abort_IT+0x290>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a60      	ldr	r2, [pc, #384]	@ (8002d1c <HAL_DMA_Abort_IT+0x3c8>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d022      	beq.n	8002be4 <HAL_DMA_Abort_IT+0x290>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a5f      	ldr	r2, [pc, #380]	@ (8002d20 <HAL_DMA_Abort_IT+0x3cc>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d01d      	beq.n	8002be4 <HAL_DMA_Abort_IT+0x290>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a5d      	ldr	r2, [pc, #372]	@ (8002d24 <HAL_DMA_Abort_IT+0x3d0>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d018      	beq.n	8002be4 <HAL_DMA_Abort_IT+0x290>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a5c      	ldr	r2, [pc, #368]	@ (8002d28 <HAL_DMA_Abort_IT+0x3d4>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d013      	beq.n	8002be4 <HAL_DMA_Abort_IT+0x290>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a5a      	ldr	r2, [pc, #360]	@ (8002d2c <HAL_DMA_Abort_IT+0x3d8>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d00e      	beq.n	8002be4 <HAL_DMA_Abort_IT+0x290>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a59      	ldr	r2, [pc, #356]	@ (8002d30 <HAL_DMA_Abort_IT+0x3dc>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d009      	beq.n	8002be4 <HAL_DMA_Abort_IT+0x290>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a57      	ldr	r2, [pc, #348]	@ (8002d34 <HAL_DMA_Abort_IT+0x3e0>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d004      	beq.n	8002be4 <HAL_DMA_Abort_IT+0x290>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a56      	ldr	r2, [pc, #344]	@ (8002d38 <HAL_DMA_Abort_IT+0x3e4>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d108      	bne.n	8002bf6 <HAL_DMA_Abort_IT+0x2a2>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f022 0201 	bic.w	r2, r2, #1
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	e007      	b.n	8002c06 <HAL_DMA_Abort_IT+0x2b2>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f022 0201 	bic.w	r2, r2, #1
 8002c04:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a3c      	ldr	r2, [pc, #240]	@ (8002cfc <HAL_DMA_Abort_IT+0x3a8>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d072      	beq.n	8002cf6 <HAL_DMA_Abort_IT+0x3a2>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a3a      	ldr	r2, [pc, #232]	@ (8002d00 <HAL_DMA_Abort_IT+0x3ac>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d06d      	beq.n	8002cf6 <HAL_DMA_Abort_IT+0x3a2>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a39      	ldr	r2, [pc, #228]	@ (8002d04 <HAL_DMA_Abort_IT+0x3b0>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d068      	beq.n	8002cf6 <HAL_DMA_Abort_IT+0x3a2>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a37      	ldr	r2, [pc, #220]	@ (8002d08 <HAL_DMA_Abort_IT+0x3b4>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d063      	beq.n	8002cf6 <HAL_DMA_Abort_IT+0x3a2>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a36      	ldr	r2, [pc, #216]	@ (8002d0c <HAL_DMA_Abort_IT+0x3b8>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d05e      	beq.n	8002cf6 <HAL_DMA_Abort_IT+0x3a2>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a34      	ldr	r2, [pc, #208]	@ (8002d10 <HAL_DMA_Abort_IT+0x3bc>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d059      	beq.n	8002cf6 <HAL_DMA_Abort_IT+0x3a2>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a33      	ldr	r2, [pc, #204]	@ (8002d14 <HAL_DMA_Abort_IT+0x3c0>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d054      	beq.n	8002cf6 <HAL_DMA_Abort_IT+0x3a2>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a31      	ldr	r2, [pc, #196]	@ (8002d18 <HAL_DMA_Abort_IT+0x3c4>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d04f      	beq.n	8002cf6 <HAL_DMA_Abort_IT+0x3a2>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a30      	ldr	r2, [pc, #192]	@ (8002d1c <HAL_DMA_Abort_IT+0x3c8>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d04a      	beq.n	8002cf6 <HAL_DMA_Abort_IT+0x3a2>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a2e      	ldr	r2, [pc, #184]	@ (8002d20 <HAL_DMA_Abort_IT+0x3cc>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d045      	beq.n	8002cf6 <HAL_DMA_Abort_IT+0x3a2>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a2d      	ldr	r2, [pc, #180]	@ (8002d24 <HAL_DMA_Abort_IT+0x3d0>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d040      	beq.n	8002cf6 <HAL_DMA_Abort_IT+0x3a2>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a2b      	ldr	r2, [pc, #172]	@ (8002d28 <HAL_DMA_Abort_IT+0x3d4>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d03b      	beq.n	8002cf6 <HAL_DMA_Abort_IT+0x3a2>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a2a      	ldr	r2, [pc, #168]	@ (8002d2c <HAL_DMA_Abort_IT+0x3d8>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d036      	beq.n	8002cf6 <HAL_DMA_Abort_IT+0x3a2>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a28      	ldr	r2, [pc, #160]	@ (8002d30 <HAL_DMA_Abort_IT+0x3dc>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d031      	beq.n	8002cf6 <HAL_DMA_Abort_IT+0x3a2>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a27      	ldr	r2, [pc, #156]	@ (8002d34 <HAL_DMA_Abort_IT+0x3e0>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d02c      	beq.n	8002cf6 <HAL_DMA_Abort_IT+0x3a2>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a25      	ldr	r2, [pc, #148]	@ (8002d38 <HAL_DMA_Abort_IT+0x3e4>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d027      	beq.n	8002cf6 <HAL_DMA_Abort_IT+0x3a2>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a24      	ldr	r2, [pc, #144]	@ (8002d3c <HAL_DMA_Abort_IT+0x3e8>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d022      	beq.n	8002cf6 <HAL_DMA_Abort_IT+0x3a2>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a22      	ldr	r2, [pc, #136]	@ (8002d40 <HAL_DMA_Abort_IT+0x3ec>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d01d      	beq.n	8002cf6 <HAL_DMA_Abort_IT+0x3a2>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a21      	ldr	r2, [pc, #132]	@ (8002d44 <HAL_DMA_Abort_IT+0x3f0>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d018      	beq.n	8002cf6 <HAL_DMA_Abort_IT+0x3a2>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a1f      	ldr	r2, [pc, #124]	@ (8002d48 <HAL_DMA_Abort_IT+0x3f4>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d013      	beq.n	8002cf6 <HAL_DMA_Abort_IT+0x3a2>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a1e      	ldr	r2, [pc, #120]	@ (8002d4c <HAL_DMA_Abort_IT+0x3f8>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d00e      	beq.n	8002cf6 <HAL_DMA_Abort_IT+0x3a2>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a1c      	ldr	r2, [pc, #112]	@ (8002d50 <HAL_DMA_Abort_IT+0x3fc>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d009      	beq.n	8002cf6 <HAL_DMA_Abort_IT+0x3a2>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a1b      	ldr	r2, [pc, #108]	@ (8002d54 <HAL_DMA_Abort_IT+0x400>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d004      	beq.n	8002cf6 <HAL_DMA_Abort_IT+0x3a2>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a19      	ldr	r2, [pc, #100]	@ (8002d58 <HAL_DMA_Abort_IT+0x404>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d132      	bne.n	8002d5c <HAL_DMA_Abort_IT+0x408>
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e031      	b.n	8002d5e <HAL_DMA_Abort_IT+0x40a>
 8002cfa:	bf00      	nop
 8002cfc:	40020010 	.word	0x40020010
 8002d00:	40020028 	.word	0x40020028
 8002d04:	40020040 	.word	0x40020040
 8002d08:	40020058 	.word	0x40020058
 8002d0c:	40020070 	.word	0x40020070
 8002d10:	40020088 	.word	0x40020088
 8002d14:	400200a0 	.word	0x400200a0
 8002d18:	400200b8 	.word	0x400200b8
 8002d1c:	40020410 	.word	0x40020410
 8002d20:	40020428 	.word	0x40020428
 8002d24:	40020440 	.word	0x40020440
 8002d28:	40020458 	.word	0x40020458
 8002d2c:	40020470 	.word	0x40020470
 8002d30:	40020488 	.word	0x40020488
 8002d34:	400204a0 	.word	0x400204a0
 8002d38:	400204b8 	.word	0x400204b8
 8002d3c:	58025408 	.word	0x58025408
 8002d40:	5802541c 	.word	0x5802541c
 8002d44:	58025430 	.word	0x58025430
 8002d48:	58025444 	.word	0x58025444
 8002d4c:	58025458 	.word	0x58025458
 8002d50:	5802546c 	.word	0x5802546c
 8002d54:	58025480 	.word	0x58025480
 8002d58:	58025494 	.word	0x58025494
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d028      	beq.n	8002db4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d70:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d76:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d7c:	f003 031f 	and.w	r3, r3, #31
 8002d80:	2201      	movs	r2, #1
 8002d82:	409a      	lsls	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002d90:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00c      	beq.n	8002db4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002da4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002da8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002db2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d003      	beq.n	8002dd4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop

08002de0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b08a      	sub	sp, #40	@ 0x28
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002de8:	2300      	movs	r3, #0
 8002dea:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002dec:	4b67      	ldr	r3, [pc, #412]	@ (8002f8c <HAL_DMA_IRQHandler+0x1ac>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a67      	ldr	r2, [pc, #412]	@ (8002f90 <HAL_DMA_IRQHandler+0x1b0>)
 8002df2:	fba2 2303 	umull	r2, r3, r2, r3
 8002df6:	0a9b      	lsrs	r3, r3, #10
 8002df8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dfe:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e04:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002e06:	6a3b      	ldr	r3, [r7, #32]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a5f      	ldr	r2, [pc, #380]	@ (8002f94 <HAL_DMA_IRQHandler+0x1b4>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d04a      	beq.n	8002eb2 <HAL_DMA_IRQHandler+0xd2>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a5d      	ldr	r2, [pc, #372]	@ (8002f98 <HAL_DMA_IRQHandler+0x1b8>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d045      	beq.n	8002eb2 <HAL_DMA_IRQHandler+0xd2>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a5c      	ldr	r2, [pc, #368]	@ (8002f9c <HAL_DMA_IRQHandler+0x1bc>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d040      	beq.n	8002eb2 <HAL_DMA_IRQHandler+0xd2>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a5a      	ldr	r2, [pc, #360]	@ (8002fa0 <HAL_DMA_IRQHandler+0x1c0>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d03b      	beq.n	8002eb2 <HAL_DMA_IRQHandler+0xd2>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a59      	ldr	r2, [pc, #356]	@ (8002fa4 <HAL_DMA_IRQHandler+0x1c4>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d036      	beq.n	8002eb2 <HAL_DMA_IRQHandler+0xd2>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a57      	ldr	r2, [pc, #348]	@ (8002fa8 <HAL_DMA_IRQHandler+0x1c8>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d031      	beq.n	8002eb2 <HAL_DMA_IRQHandler+0xd2>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a56      	ldr	r2, [pc, #344]	@ (8002fac <HAL_DMA_IRQHandler+0x1cc>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d02c      	beq.n	8002eb2 <HAL_DMA_IRQHandler+0xd2>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a54      	ldr	r2, [pc, #336]	@ (8002fb0 <HAL_DMA_IRQHandler+0x1d0>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d027      	beq.n	8002eb2 <HAL_DMA_IRQHandler+0xd2>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a53      	ldr	r2, [pc, #332]	@ (8002fb4 <HAL_DMA_IRQHandler+0x1d4>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d022      	beq.n	8002eb2 <HAL_DMA_IRQHandler+0xd2>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a51      	ldr	r2, [pc, #324]	@ (8002fb8 <HAL_DMA_IRQHandler+0x1d8>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d01d      	beq.n	8002eb2 <HAL_DMA_IRQHandler+0xd2>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a50      	ldr	r2, [pc, #320]	@ (8002fbc <HAL_DMA_IRQHandler+0x1dc>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d018      	beq.n	8002eb2 <HAL_DMA_IRQHandler+0xd2>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a4e      	ldr	r2, [pc, #312]	@ (8002fc0 <HAL_DMA_IRQHandler+0x1e0>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d013      	beq.n	8002eb2 <HAL_DMA_IRQHandler+0xd2>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a4d      	ldr	r2, [pc, #308]	@ (8002fc4 <HAL_DMA_IRQHandler+0x1e4>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d00e      	beq.n	8002eb2 <HAL_DMA_IRQHandler+0xd2>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a4b      	ldr	r2, [pc, #300]	@ (8002fc8 <HAL_DMA_IRQHandler+0x1e8>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d009      	beq.n	8002eb2 <HAL_DMA_IRQHandler+0xd2>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a4a      	ldr	r2, [pc, #296]	@ (8002fcc <HAL_DMA_IRQHandler+0x1ec>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d004      	beq.n	8002eb2 <HAL_DMA_IRQHandler+0xd2>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a48      	ldr	r2, [pc, #288]	@ (8002fd0 <HAL_DMA_IRQHandler+0x1f0>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d101      	bne.n	8002eb6 <HAL_DMA_IRQHandler+0xd6>
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e000      	b.n	8002eb8 <HAL_DMA_IRQHandler+0xd8>
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f000 842b 	beq.w	8003714 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ec2:	f003 031f 	and.w	r3, r3, #31
 8002ec6:	2208      	movs	r2, #8
 8002ec8:	409a      	lsls	r2, r3
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	f000 80a2 	beq.w	8003018 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a2e      	ldr	r2, [pc, #184]	@ (8002f94 <HAL_DMA_IRQHandler+0x1b4>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d04a      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x194>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a2d      	ldr	r2, [pc, #180]	@ (8002f98 <HAL_DMA_IRQHandler+0x1b8>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d045      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x194>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a2b      	ldr	r2, [pc, #172]	@ (8002f9c <HAL_DMA_IRQHandler+0x1bc>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d040      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x194>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a2a      	ldr	r2, [pc, #168]	@ (8002fa0 <HAL_DMA_IRQHandler+0x1c0>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d03b      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x194>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a28      	ldr	r2, [pc, #160]	@ (8002fa4 <HAL_DMA_IRQHandler+0x1c4>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d036      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x194>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a27      	ldr	r2, [pc, #156]	@ (8002fa8 <HAL_DMA_IRQHandler+0x1c8>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d031      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x194>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a25      	ldr	r2, [pc, #148]	@ (8002fac <HAL_DMA_IRQHandler+0x1cc>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d02c      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x194>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a24      	ldr	r2, [pc, #144]	@ (8002fb0 <HAL_DMA_IRQHandler+0x1d0>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d027      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x194>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a22      	ldr	r2, [pc, #136]	@ (8002fb4 <HAL_DMA_IRQHandler+0x1d4>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d022      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x194>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a21      	ldr	r2, [pc, #132]	@ (8002fb8 <HAL_DMA_IRQHandler+0x1d8>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d01d      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x194>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a1f      	ldr	r2, [pc, #124]	@ (8002fbc <HAL_DMA_IRQHandler+0x1dc>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d018      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x194>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a1e      	ldr	r2, [pc, #120]	@ (8002fc0 <HAL_DMA_IRQHandler+0x1e0>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d013      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x194>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a1c      	ldr	r2, [pc, #112]	@ (8002fc4 <HAL_DMA_IRQHandler+0x1e4>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d00e      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x194>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a1b      	ldr	r2, [pc, #108]	@ (8002fc8 <HAL_DMA_IRQHandler+0x1e8>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d009      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x194>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a19      	ldr	r2, [pc, #100]	@ (8002fcc <HAL_DMA_IRQHandler+0x1ec>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d004      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x194>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a18      	ldr	r2, [pc, #96]	@ (8002fd0 <HAL_DMA_IRQHandler+0x1f0>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d12f      	bne.n	8002fd4 <HAL_DMA_IRQHandler+0x1f4>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0304 	and.w	r3, r3, #4
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	bf14      	ite	ne
 8002f82:	2301      	movne	r3, #1
 8002f84:	2300      	moveq	r3, #0
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	e02e      	b.n	8002fe8 <HAL_DMA_IRQHandler+0x208>
 8002f8a:	bf00      	nop
 8002f8c:	24000000 	.word	0x24000000
 8002f90:	1b4e81b5 	.word	0x1b4e81b5
 8002f94:	40020010 	.word	0x40020010
 8002f98:	40020028 	.word	0x40020028
 8002f9c:	40020040 	.word	0x40020040
 8002fa0:	40020058 	.word	0x40020058
 8002fa4:	40020070 	.word	0x40020070
 8002fa8:	40020088 	.word	0x40020088
 8002fac:	400200a0 	.word	0x400200a0
 8002fb0:	400200b8 	.word	0x400200b8
 8002fb4:	40020410 	.word	0x40020410
 8002fb8:	40020428 	.word	0x40020428
 8002fbc:	40020440 	.word	0x40020440
 8002fc0:	40020458 	.word	0x40020458
 8002fc4:	40020470 	.word	0x40020470
 8002fc8:	40020488 	.word	0x40020488
 8002fcc:	400204a0 	.word	0x400204a0
 8002fd0:	400204b8 	.word	0x400204b8
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0308 	and.w	r3, r3, #8
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	bf14      	ite	ne
 8002fe2:	2301      	movne	r3, #1
 8002fe4:	2300      	moveq	r3, #0
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d015      	beq.n	8003018 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 0204 	bic.w	r2, r2, #4
 8002ffa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003000:	f003 031f 	and.w	r3, r3, #31
 8003004:	2208      	movs	r2, #8
 8003006:	409a      	lsls	r2, r3
 8003008:	6a3b      	ldr	r3, [r7, #32]
 800300a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003010:	f043 0201 	orr.w	r2, r3, #1
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800301c:	f003 031f 	and.w	r3, r3, #31
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	fa22 f303 	lsr.w	r3, r2, r3
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b00      	cmp	r3, #0
 800302c:	d06e      	beq.n	800310c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a69      	ldr	r2, [pc, #420]	@ (80031d8 <HAL_DMA_IRQHandler+0x3f8>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d04a      	beq.n	80030ce <HAL_DMA_IRQHandler+0x2ee>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a67      	ldr	r2, [pc, #412]	@ (80031dc <HAL_DMA_IRQHandler+0x3fc>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d045      	beq.n	80030ce <HAL_DMA_IRQHandler+0x2ee>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a66      	ldr	r2, [pc, #408]	@ (80031e0 <HAL_DMA_IRQHandler+0x400>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d040      	beq.n	80030ce <HAL_DMA_IRQHandler+0x2ee>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a64      	ldr	r2, [pc, #400]	@ (80031e4 <HAL_DMA_IRQHandler+0x404>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d03b      	beq.n	80030ce <HAL_DMA_IRQHandler+0x2ee>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a63      	ldr	r2, [pc, #396]	@ (80031e8 <HAL_DMA_IRQHandler+0x408>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d036      	beq.n	80030ce <HAL_DMA_IRQHandler+0x2ee>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a61      	ldr	r2, [pc, #388]	@ (80031ec <HAL_DMA_IRQHandler+0x40c>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d031      	beq.n	80030ce <HAL_DMA_IRQHandler+0x2ee>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a60      	ldr	r2, [pc, #384]	@ (80031f0 <HAL_DMA_IRQHandler+0x410>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d02c      	beq.n	80030ce <HAL_DMA_IRQHandler+0x2ee>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a5e      	ldr	r2, [pc, #376]	@ (80031f4 <HAL_DMA_IRQHandler+0x414>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d027      	beq.n	80030ce <HAL_DMA_IRQHandler+0x2ee>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a5d      	ldr	r2, [pc, #372]	@ (80031f8 <HAL_DMA_IRQHandler+0x418>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d022      	beq.n	80030ce <HAL_DMA_IRQHandler+0x2ee>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a5b      	ldr	r2, [pc, #364]	@ (80031fc <HAL_DMA_IRQHandler+0x41c>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d01d      	beq.n	80030ce <HAL_DMA_IRQHandler+0x2ee>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a5a      	ldr	r2, [pc, #360]	@ (8003200 <HAL_DMA_IRQHandler+0x420>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d018      	beq.n	80030ce <HAL_DMA_IRQHandler+0x2ee>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a58      	ldr	r2, [pc, #352]	@ (8003204 <HAL_DMA_IRQHandler+0x424>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d013      	beq.n	80030ce <HAL_DMA_IRQHandler+0x2ee>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a57      	ldr	r2, [pc, #348]	@ (8003208 <HAL_DMA_IRQHandler+0x428>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d00e      	beq.n	80030ce <HAL_DMA_IRQHandler+0x2ee>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a55      	ldr	r2, [pc, #340]	@ (800320c <HAL_DMA_IRQHandler+0x42c>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d009      	beq.n	80030ce <HAL_DMA_IRQHandler+0x2ee>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a54      	ldr	r2, [pc, #336]	@ (8003210 <HAL_DMA_IRQHandler+0x430>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d004      	beq.n	80030ce <HAL_DMA_IRQHandler+0x2ee>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a52      	ldr	r2, [pc, #328]	@ (8003214 <HAL_DMA_IRQHandler+0x434>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d10a      	bne.n	80030e4 <HAL_DMA_IRQHandler+0x304>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	695b      	ldr	r3, [r3, #20]
 80030d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030d8:	2b00      	cmp	r3, #0
 80030da:	bf14      	ite	ne
 80030dc:	2301      	movne	r3, #1
 80030de:	2300      	moveq	r3, #0
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	e003      	b.n	80030ec <HAL_DMA_IRQHandler+0x30c>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2300      	movs	r3, #0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d00d      	beq.n	800310c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030f4:	f003 031f 	and.w	r3, r3, #31
 80030f8:	2201      	movs	r2, #1
 80030fa:	409a      	lsls	r2, r3
 80030fc:	6a3b      	ldr	r3, [r7, #32]
 80030fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003104:	f043 0202 	orr.w	r2, r3, #2
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003110:	f003 031f 	and.w	r3, r3, #31
 8003114:	2204      	movs	r2, #4
 8003116:	409a      	lsls	r2, r3
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	4013      	ands	r3, r2
 800311c:	2b00      	cmp	r3, #0
 800311e:	f000 808f 	beq.w	8003240 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a2c      	ldr	r2, [pc, #176]	@ (80031d8 <HAL_DMA_IRQHandler+0x3f8>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d04a      	beq.n	80031c2 <HAL_DMA_IRQHandler+0x3e2>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a2a      	ldr	r2, [pc, #168]	@ (80031dc <HAL_DMA_IRQHandler+0x3fc>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d045      	beq.n	80031c2 <HAL_DMA_IRQHandler+0x3e2>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a29      	ldr	r2, [pc, #164]	@ (80031e0 <HAL_DMA_IRQHandler+0x400>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d040      	beq.n	80031c2 <HAL_DMA_IRQHandler+0x3e2>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a27      	ldr	r2, [pc, #156]	@ (80031e4 <HAL_DMA_IRQHandler+0x404>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d03b      	beq.n	80031c2 <HAL_DMA_IRQHandler+0x3e2>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a26      	ldr	r2, [pc, #152]	@ (80031e8 <HAL_DMA_IRQHandler+0x408>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d036      	beq.n	80031c2 <HAL_DMA_IRQHandler+0x3e2>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a24      	ldr	r2, [pc, #144]	@ (80031ec <HAL_DMA_IRQHandler+0x40c>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d031      	beq.n	80031c2 <HAL_DMA_IRQHandler+0x3e2>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a23      	ldr	r2, [pc, #140]	@ (80031f0 <HAL_DMA_IRQHandler+0x410>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d02c      	beq.n	80031c2 <HAL_DMA_IRQHandler+0x3e2>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a21      	ldr	r2, [pc, #132]	@ (80031f4 <HAL_DMA_IRQHandler+0x414>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d027      	beq.n	80031c2 <HAL_DMA_IRQHandler+0x3e2>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a20      	ldr	r2, [pc, #128]	@ (80031f8 <HAL_DMA_IRQHandler+0x418>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d022      	beq.n	80031c2 <HAL_DMA_IRQHandler+0x3e2>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a1e      	ldr	r2, [pc, #120]	@ (80031fc <HAL_DMA_IRQHandler+0x41c>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d01d      	beq.n	80031c2 <HAL_DMA_IRQHandler+0x3e2>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a1d      	ldr	r2, [pc, #116]	@ (8003200 <HAL_DMA_IRQHandler+0x420>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d018      	beq.n	80031c2 <HAL_DMA_IRQHandler+0x3e2>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a1b      	ldr	r2, [pc, #108]	@ (8003204 <HAL_DMA_IRQHandler+0x424>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d013      	beq.n	80031c2 <HAL_DMA_IRQHandler+0x3e2>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a1a      	ldr	r2, [pc, #104]	@ (8003208 <HAL_DMA_IRQHandler+0x428>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d00e      	beq.n	80031c2 <HAL_DMA_IRQHandler+0x3e2>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a18      	ldr	r2, [pc, #96]	@ (800320c <HAL_DMA_IRQHandler+0x42c>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d009      	beq.n	80031c2 <HAL_DMA_IRQHandler+0x3e2>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a17      	ldr	r2, [pc, #92]	@ (8003210 <HAL_DMA_IRQHandler+0x430>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d004      	beq.n	80031c2 <HAL_DMA_IRQHandler+0x3e2>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a15      	ldr	r2, [pc, #84]	@ (8003214 <HAL_DMA_IRQHandler+0x434>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d12a      	bne.n	8003218 <HAL_DMA_IRQHandler+0x438>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0302 	and.w	r3, r3, #2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	bf14      	ite	ne
 80031d0:	2301      	movne	r3, #1
 80031d2:	2300      	moveq	r3, #0
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	e023      	b.n	8003220 <HAL_DMA_IRQHandler+0x440>
 80031d8:	40020010 	.word	0x40020010
 80031dc:	40020028 	.word	0x40020028
 80031e0:	40020040 	.word	0x40020040
 80031e4:	40020058 	.word	0x40020058
 80031e8:	40020070 	.word	0x40020070
 80031ec:	40020088 	.word	0x40020088
 80031f0:	400200a0 	.word	0x400200a0
 80031f4:	400200b8 	.word	0x400200b8
 80031f8:	40020410 	.word	0x40020410
 80031fc:	40020428 	.word	0x40020428
 8003200:	40020440 	.word	0x40020440
 8003204:	40020458 	.word	0x40020458
 8003208:	40020470 	.word	0x40020470
 800320c:	40020488 	.word	0x40020488
 8003210:	400204a0 	.word	0x400204a0
 8003214:	400204b8 	.word	0x400204b8
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2300      	movs	r3, #0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d00d      	beq.n	8003240 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003228:	f003 031f 	and.w	r3, r3, #31
 800322c:	2204      	movs	r2, #4
 800322e:	409a      	lsls	r2, r3
 8003230:	6a3b      	ldr	r3, [r7, #32]
 8003232:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003238:	f043 0204 	orr.w	r2, r3, #4
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003244:	f003 031f 	and.w	r3, r3, #31
 8003248:	2210      	movs	r2, #16
 800324a:	409a      	lsls	r2, r3
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	4013      	ands	r3, r2
 8003250:	2b00      	cmp	r3, #0
 8003252:	f000 80a6 	beq.w	80033a2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a85      	ldr	r2, [pc, #532]	@ (8003470 <HAL_DMA_IRQHandler+0x690>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d04a      	beq.n	80032f6 <HAL_DMA_IRQHandler+0x516>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a83      	ldr	r2, [pc, #524]	@ (8003474 <HAL_DMA_IRQHandler+0x694>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d045      	beq.n	80032f6 <HAL_DMA_IRQHandler+0x516>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a82      	ldr	r2, [pc, #520]	@ (8003478 <HAL_DMA_IRQHandler+0x698>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d040      	beq.n	80032f6 <HAL_DMA_IRQHandler+0x516>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a80      	ldr	r2, [pc, #512]	@ (800347c <HAL_DMA_IRQHandler+0x69c>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d03b      	beq.n	80032f6 <HAL_DMA_IRQHandler+0x516>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a7f      	ldr	r2, [pc, #508]	@ (8003480 <HAL_DMA_IRQHandler+0x6a0>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d036      	beq.n	80032f6 <HAL_DMA_IRQHandler+0x516>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a7d      	ldr	r2, [pc, #500]	@ (8003484 <HAL_DMA_IRQHandler+0x6a4>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d031      	beq.n	80032f6 <HAL_DMA_IRQHandler+0x516>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a7c      	ldr	r2, [pc, #496]	@ (8003488 <HAL_DMA_IRQHandler+0x6a8>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d02c      	beq.n	80032f6 <HAL_DMA_IRQHandler+0x516>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a7a      	ldr	r2, [pc, #488]	@ (800348c <HAL_DMA_IRQHandler+0x6ac>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d027      	beq.n	80032f6 <HAL_DMA_IRQHandler+0x516>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a79      	ldr	r2, [pc, #484]	@ (8003490 <HAL_DMA_IRQHandler+0x6b0>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d022      	beq.n	80032f6 <HAL_DMA_IRQHandler+0x516>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a77      	ldr	r2, [pc, #476]	@ (8003494 <HAL_DMA_IRQHandler+0x6b4>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d01d      	beq.n	80032f6 <HAL_DMA_IRQHandler+0x516>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a76      	ldr	r2, [pc, #472]	@ (8003498 <HAL_DMA_IRQHandler+0x6b8>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d018      	beq.n	80032f6 <HAL_DMA_IRQHandler+0x516>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a74      	ldr	r2, [pc, #464]	@ (800349c <HAL_DMA_IRQHandler+0x6bc>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d013      	beq.n	80032f6 <HAL_DMA_IRQHandler+0x516>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a73      	ldr	r2, [pc, #460]	@ (80034a0 <HAL_DMA_IRQHandler+0x6c0>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d00e      	beq.n	80032f6 <HAL_DMA_IRQHandler+0x516>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a71      	ldr	r2, [pc, #452]	@ (80034a4 <HAL_DMA_IRQHandler+0x6c4>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d009      	beq.n	80032f6 <HAL_DMA_IRQHandler+0x516>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a70      	ldr	r2, [pc, #448]	@ (80034a8 <HAL_DMA_IRQHandler+0x6c8>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d004      	beq.n	80032f6 <HAL_DMA_IRQHandler+0x516>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a6e      	ldr	r2, [pc, #440]	@ (80034ac <HAL_DMA_IRQHandler+0x6cc>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d10a      	bne.n	800330c <HAL_DMA_IRQHandler+0x52c>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0308 	and.w	r3, r3, #8
 8003300:	2b00      	cmp	r3, #0
 8003302:	bf14      	ite	ne
 8003304:	2301      	movne	r3, #1
 8003306:	2300      	moveq	r3, #0
 8003308:	b2db      	uxtb	r3, r3
 800330a:	e009      	b.n	8003320 <HAL_DMA_IRQHandler+0x540>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0304 	and.w	r3, r3, #4
 8003316:	2b00      	cmp	r3, #0
 8003318:	bf14      	ite	ne
 800331a:	2301      	movne	r3, #1
 800331c:	2300      	moveq	r3, #0
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	d03e      	beq.n	80033a2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003328:	f003 031f 	and.w	r3, r3, #31
 800332c:	2210      	movs	r2, #16
 800332e:	409a      	lsls	r2, r3
 8003330:	6a3b      	ldr	r3, [r7, #32]
 8003332:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d018      	beq.n	8003374 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d108      	bne.n	8003362 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003354:	2b00      	cmp	r3, #0
 8003356:	d024      	beq.n	80033a2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	4798      	blx	r3
 8003360:	e01f      	b.n	80033a2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003366:	2b00      	cmp	r3, #0
 8003368:	d01b      	beq.n	80033a2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	4798      	blx	r3
 8003372:	e016      	b.n	80033a2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800337e:	2b00      	cmp	r3, #0
 8003380:	d107      	bne.n	8003392 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 0208 	bic.w	r2, r2, #8
 8003390:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a6:	f003 031f 	and.w	r3, r3, #31
 80033aa:	2220      	movs	r2, #32
 80033ac:	409a      	lsls	r2, r3
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	4013      	ands	r3, r2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f000 8110 	beq.w	80035d8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a2c      	ldr	r2, [pc, #176]	@ (8003470 <HAL_DMA_IRQHandler+0x690>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d04a      	beq.n	8003458 <HAL_DMA_IRQHandler+0x678>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a2b      	ldr	r2, [pc, #172]	@ (8003474 <HAL_DMA_IRQHandler+0x694>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d045      	beq.n	8003458 <HAL_DMA_IRQHandler+0x678>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a29      	ldr	r2, [pc, #164]	@ (8003478 <HAL_DMA_IRQHandler+0x698>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d040      	beq.n	8003458 <HAL_DMA_IRQHandler+0x678>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a28      	ldr	r2, [pc, #160]	@ (800347c <HAL_DMA_IRQHandler+0x69c>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d03b      	beq.n	8003458 <HAL_DMA_IRQHandler+0x678>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a26      	ldr	r2, [pc, #152]	@ (8003480 <HAL_DMA_IRQHandler+0x6a0>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d036      	beq.n	8003458 <HAL_DMA_IRQHandler+0x678>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a25      	ldr	r2, [pc, #148]	@ (8003484 <HAL_DMA_IRQHandler+0x6a4>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d031      	beq.n	8003458 <HAL_DMA_IRQHandler+0x678>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a23      	ldr	r2, [pc, #140]	@ (8003488 <HAL_DMA_IRQHandler+0x6a8>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d02c      	beq.n	8003458 <HAL_DMA_IRQHandler+0x678>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a22      	ldr	r2, [pc, #136]	@ (800348c <HAL_DMA_IRQHandler+0x6ac>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d027      	beq.n	8003458 <HAL_DMA_IRQHandler+0x678>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a20      	ldr	r2, [pc, #128]	@ (8003490 <HAL_DMA_IRQHandler+0x6b0>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d022      	beq.n	8003458 <HAL_DMA_IRQHandler+0x678>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a1f      	ldr	r2, [pc, #124]	@ (8003494 <HAL_DMA_IRQHandler+0x6b4>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d01d      	beq.n	8003458 <HAL_DMA_IRQHandler+0x678>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a1d      	ldr	r2, [pc, #116]	@ (8003498 <HAL_DMA_IRQHandler+0x6b8>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d018      	beq.n	8003458 <HAL_DMA_IRQHandler+0x678>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a1c      	ldr	r2, [pc, #112]	@ (800349c <HAL_DMA_IRQHandler+0x6bc>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d013      	beq.n	8003458 <HAL_DMA_IRQHandler+0x678>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a1a      	ldr	r2, [pc, #104]	@ (80034a0 <HAL_DMA_IRQHandler+0x6c0>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d00e      	beq.n	8003458 <HAL_DMA_IRQHandler+0x678>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a19      	ldr	r2, [pc, #100]	@ (80034a4 <HAL_DMA_IRQHandler+0x6c4>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d009      	beq.n	8003458 <HAL_DMA_IRQHandler+0x678>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a17      	ldr	r2, [pc, #92]	@ (80034a8 <HAL_DMA_IRQHandler+0x6c8>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d004      	beq.n	8003458 <HAL_DMA_IRQHandler+0x678>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a16      	ldr	r2, [pc, #88]	@ (80034ac <HAL_DMA_IRQHandler+0x6cc>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d12b      	bne.n	80034b0 <HAL_DMA_IRQHandler+0x6d0>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0310 	and.w	r3, r3, #16
 8003462:	2b00      	cmp	r3, #0
 8003464:	bf14      	ite	ne
 8003466:	2301      	movne	r3, #1
 8003468:	2300      	moveq	r3, #0
 800346a:	b2db      	uxtb	r3, r3
 800346c:	e02a      	b.n	80034c4 <HAL_DMA_IRQHandler+0x6e4>
 800346e:	bf00      	nop
 8003470:	40020010 	.word	0x40020010
 8003474:	40020028 	.word	0x40020028
 8003478:	40020040 	.word	0x40020040
 800347c:	40020058 	.word	0x40020058
 8003480:	40020070 	.word	0x40020070
 8003484:	40020088 	.word	0x40020088
 8003488:	400200a0 	.word	0x400200a0
 800348c:	400200b8 	.word	0x400200b8
 8003490:	40020410 	.word	0x40020410
 8003494:	40020428 	.word	0x40020428
 8003498:	40020440 	.word	0x40020440
 800349c:	40020458 	.word	0x40020458
 80034a0:	40020470 	.word	0x40020470
 80034a4:	40020488 	.word	0x40020488
 80034a8:	400204a0 	.word	0x400204a0
 80034ac:	400204b8 	.word	0x400204b8
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	bf14      	ite	ne
 80034be:	2301      	movne	r3, #1
 80034c0:	2300      	moveq	r3, #0
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f000 8087 	beq.w	80035d8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ce:	f003 031f 	and.w	r3, r3, #31
 80034d2:	2220      	movs	r2, #32
 80034d4:	409a      	lsls	r2, r3
 80034d6:	6a3b      	ldr	r3, [r7, #32]
 80034d8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b04      	cmp	r3, #4
 80034e4:	d139      	bne.n	800355a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 0216 	bic.w	r2, r2, #22
 80034f4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	695a      	ldr	r2, [r3, #20]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003504:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350a:	2b00      	cmp	r3, #0
 800350c:	d103      	bne.n	8003516 <HAL_DMA_IRQHandler+0x736>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003512:	2b00      	cmp	r3, #0
 8003514:	d007      	beq.n	8003526 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 0208 	bic.w	r2, r2, #8
 8003524:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800352a:	f003 031f 	and.w	r3, r3, #31
 800352e:	223f      	movs	r2, #63	@ 0x3f
 8003530:	409a      	lsls	r2, r3
 8003532:	6a3b      	ldr	r3, [r7, #32]
 8003534:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2201      	movs	r2, #1
 800353a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 834a 	beq.w	8003be4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	4798      	blx	r3
          }
          return;
 8003558:	e344      	b.n	8003be4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d018      	beq.n	800359a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d108      	bne.n	8003588 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800357a:	2b00      	cmp	r3, #0
 800357c:	d02c      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	4798      	blx	r3
 8003586:	e027      	b.n	80035d8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800358c:	2b00      	cmp	r3, #0
 800358e:	d023      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	4798      	blx	r3
 8003598:	e01e      	b.n	80035d8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d10f      	bne.n	80035c8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 0210 	bic.w	r2, r2, #16
 80035b6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d003      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f000 8306 	beq.w	8003bee <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f000 8088 	beq.w	8003700 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2204      	movs	r2, #4
 80035f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a7a      	ldr	r2, [pc, #488]	@ (80037e8 <HAL_DMA_IRQHandler+0xa08>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d04a      	beq.n	8003698 <HAL_DMA_IRQHandler+0x8b8>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a79      	ldr	r2, [pc, #484]	@ (80037ec <HAL_DMA_IRQHandler+0xa0c>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d045      	beq.n	8003698 <HAL_DMA_IRQHandler+0x8b8>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a77      	ldr	r2, [pc, #476]	@ (80037f0 <HAL_DMA_IRQHandler+0xa10>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d040      	beq.n	8003698 <HAL_DMA_IRQHandler+0x8b8>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a76      	ldr	r2, [pc, #472]	@ (80037f4 <HAL_DMA_IRQHandler+0xa14>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d03b      	beq.n	8003698 <HAL_DMA_IRQHandler+0x8b8>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a74      	ldr	r2, [pc, #464]	@ (80037f8 <HAL_DMA_IRQHandler+0xa18>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d036      	beq.n	8003698 <HAL_DMA_IRQHandler+0x8b8>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a73      	ldr	r2, [pc, #460]	@ (80037fc <HAL_DMA_IRQHandler+0xa1c>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d031      	beq.n	8003698 <HAL_DMA_IRQHandler+0x8b8>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a71      	ldr	r2, [pc, #452]	@ (8003800 <HAL_DMA_IRQHandler+0xa20>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d02c      	beq.n	8003698 <HAL_DMA_IRQHandler+0x8b8>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a70      	ldr	r2, [pc, #448]	@ (8003804 <HAL_DMA_IRQHandler+0xa24>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d027      	beq.n	8003698 <HAL_DMA_IRQHandler+0x8b8>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a6e      	ldr	r2, [pc, #440]	@ (8003808 <HAL_DMA_IRQHandler+0xa28>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d022      	beq.n	8003698 <HAL_DMA_IRQHandler+0x8b8>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a6d      	ldr	r2, [pc, #436]	@ (800380c <HAL_DMA_IRQHandler+0xa2c>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d01d      	beq.n	8003698 <HAL_DMA_IRQHandler+0x8b8>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a6b      	ldr	r2, [pc, #428]	@ (8003810 <HAL_DMA_IRQHandler+0xa30>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d018      	beq.n	8003698 <HAL_DMA_IRQHandler+0x8b8>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a6a      	ldr	r2, [pc, #424]	@ (8003814 <HAL_DMA_IRQHandler+0xa34>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d013      	beq.n	8003698 <HAL_DMA_IRQHandler+0x8b8>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a68      	ldr	r2, [pc, #416]	@ (8003818 <HAL_DMA_IRQHandler+0xa38>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d00e      	beq.n	8003698 <HAL_DMA_IRQHandler+0x8b8>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a67      	ldr	r2, [pc, #412]	@ (800381c <HAL_DMA_IRQHandler+0xa3c>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d009      	beq.n	8003698 <HAL_DMA_IRQHandler+0x8b8>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a65      	ldr	r2, [pc, #404]	@ (8003820 <HAL_DMA_IRQHandler+0xa40>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d004      	beq.n	8003698 <HAL_DMA_IRQHandler+0x8b8>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a64      	ldr	r2, [pc, #400]	@ (8003824 <HAL_DMA_IRQHandler+0xa44>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d108      	bne.n	80036aa <HAL_DMA_IRQHandler+0x8ca>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f022 0201 	bic.w	r2, r2, #1
 80036a6:	601a      	str	r2, [r3, #0]
 80036a8:	e007      	b.n	80036ba <HAL_DMA_IRQHandler+0x8da>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f022 0201 	bic.w	r2, r2, #1
 80036b8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	3301      	adds	r3, #1
 80036be:	60fb      	str	r3, [r7, #12]
 80036c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d307      	bcc.n	80036d6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1f2      	bne.n	80036ba <HAL_DMA_IRQHandler+0x8da>
 80036d4:	e000      	b.n	80036d8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80036d6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d004      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2203      	movs	r2, #3
 80036ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80036ee:	e003      	b.n	80036f8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003704:	2b00      	cmp	r3, #0
 8003706:	f000 8272 	beq.w	8003bee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	4798      	blx	r3
 8003712:	e26c      	b.n	8003bee <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a43      	ldr	r2, [pc, #268]	@ (8003828 <HAL_DMA_IRQHandler+0xa48>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d022      	beq.n	8003764 <HAL_DMA_IRQHandler+0x984>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a42      	ldr	r2, [pc, #264]	@ (800382c <HAL_DMA_IRQHandler+0xa4c>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d01d      	beq.n	8003764 <HAL_DMA_IRQHandler+0x984>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a40      	ldr	r2, [pc, #256]	@ (8003830 <HAL_DMA_IRQHandler+0xa50>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d018      	beq.n	8003764 <HAL_DMA_IRQHandler+0x984>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a3f      	ldr	r2, [pc, #252]	@ (8003834 <HAL_DMA_IRQHandler+0xa54>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d013      	beq.n	8003764 <HAL_DMA_IRQHandler+0x984>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a3d      	ldr	r2, [pc, #244]	@ (8003838 <HAL_DMA_IRQHandler+0xa58>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d00e      	beq.n	8003764 <HAL_DMA_IRQHandler+0x984>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a3c      	ldr	r2, [pc, #240]	@ (800383c <HAL_DMA_IRQHandler+0xa5c>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d009      	beq.n	8003764 <HAL_DMA_IRQHandler+0x984>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a3a      	ldr	r2, [pc, #232]	@ (8003840 <HAL_DMA_IRQHandler+0xa60>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d004      	beq.n	8003764 <HAL_DMA_IRQHandler+0x984>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a39      	ldr	r2, [pc, #228]	@ (8003844 <HAL_DMA_IRQHandler+0xa64>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d101      	bne.n	8003768 <HAL_DMA_IRQHandler+0x988>
 8003764:	2301      	movs	r3, #1
 8003766:	e000      	b.n	800376a <HAL_DMA_IRQHandler+0x98a>
 8003768:	2300      	movs	r3, #0
 800376a:	2b00      	cmp	r3, #0
 800376c:	f000 823f 	beq.w	8003bee <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800377c:	f003 031f 	and.w	r3, r3, #31
 8003780:	2204      	movs	r2, #4
 8003782:	409a      	lsls	r2, r3
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	4013      	ands	r3, r2
 8003788:	2b00      	cmp	r3, #0
 800378a:	f000 80cd 	beq.w	8003928 <HAL_DMA_IRQHandler+0xb48>
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	f003 0304 	and.w	r3, r3, #4
 8003794:	2b00      	cmp	r3, #0
 8003796:	f000 80c7 	beq.w	8003928 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800379e:	f003 031f 	and.w	r3, r3, #31
 80037a2:	2204      	movs	r2, #4
 80037a4:	409a      	lsls	r2, r3
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d049      	beq.n	8003848 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d109      	bne.n	80037d2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f000 8210 	beq.w	8003be8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037d0:	e20a      	b.n	8003be8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f000 8206 	beq.w	8003be8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037e4:	e200      	b.n	8003be8 <HAL_DMA_IRQHandler+0xe08>
 80037e6:	bf00      	nop
 80037e8:	40020010 	.word	0x40020010
 80037ec:	40020028 	.word	0x40020028
 80037f0:	40020040 	.word	0x40020040
 80037f4:	40020058 	.word	0x40020058
 80037f8:	40020070 	.word	0x40020070
 80037fc:	40020088 	.word	0x40020088
 8003800:	400200a0 	.word	0x400200a0
 8003804:	400200b8 	.word	0x400200b8
 8003808:	40020410 	.word	0x40020410
 800380c:	40020428 	.word	0x40020428
 8003810:	40020440 	.word	0x40020440
 8003814:	40020458 	.word	0x40020458
 8003818:	40020470 	.word	0x40020470
 800381c:	40020488 	.word	0x40020488
 8003820:	400204a0 	.word	0x400204a0
 8003824:	400204b8 	.word	0x400204b8
 8003828:	58025408 	.word	0x58025408
 800382c:	5802541c 	.word	0x5802541c
 8003830:	58025430 	.word	0x58025430
 8003834:	58025444 	.word	0x58025444
 8003838:	58025458 	.word	0x58025458
 800383c:	5802546c 	.word	0x5802546c
 8003840:	58025480 	.word	0x58025480
 8003844:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	f003 0320 	and.w	r3, r3, #32
 800384e:	2b00      	cmp	r3, #0
 8003850:	d160      	bne.n	8003914 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a7f      	ldr	r2, [pc, #508]	@ (8003a54 <HAL_DMA_IRQHandler+0xc74>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d04a      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xb12>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a7d      	ldr	r2, [pc, #500]	@ (8003a58 <HAL_DMA_IRQHandler+0xc78>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d045      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xb12>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a7c      	ldr	r2, [pc, #496]	@ (8003a5c <HAL_DMA_IRQHandler+0xc7c>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d040      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xb12>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a7a      	ldr	r2, [pc, #488]	@ (8003a60 <HAL_DMA_IRQHandler+0xc80>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d03b      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xb12>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a79      	ldr	r2, [pc, #484]	@ (8003a64 <HAL_DMA_IRQHandler+0xc84>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d036      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xb12>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a77      	ldr	r2, [pc, #476]	@ (8003a68 <HAL_DMA_IRQHandler+0xc88>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d031      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xb12>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a76      	ldr	r2, [pc, #472]	@ (8003a6c <HAL_DMA_IRQHandler+0xc8c>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d02c      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xb12>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a74      	ldr	r2, [pc, #464]	@ (8003a70 <HAL_DMA_IRQHandler+0xc90>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d027      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xb12>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a73      	ldr	r2, [pc, #460]	@ (8003a74 <HAL_DMA_IRQHandler+0xc94>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d022      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xb12>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a71      	ldr	r2, [pc, #452]	@ (8003a78 <HAL_DMA_IRQHandler+0xc98>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d01d      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xb12>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a70      	ldr	r2, [pc, #448]	@ (8003a7c <HAL_DMA_IRQHandler+0xc9c>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d018      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xb12>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a6e      	ldr	r2, [pc, #440]	@ (8003a80 <HAL_DMA_IRQHandler+0xca0>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d013      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xb12>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a6d      	ldr	r2, [pc, #436]	@ (8003a84 <HAL_DMA_IRQHandler+0xca4>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d00e      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xb12>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a6b      	ldr	r2, [pc, #428]	@ (8003a88 <HAL_DMA_IRQHandler+0xca8>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d009      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xb12>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a6a      	ldr	r2, [pc, #424]	@ (8003a8c <HAL_DMA_IRQHandler+0xcac>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d004      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xb12>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a68      	ldr	r2, [pc, #416]	@ (8003a90 <HAL_DMA_IRQHandler+0xcb0>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d108      	bne.n	8003904 <HAL_DMA_IRQHandler+0xb24>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f022 0208 	bic.w	r2, r2, #8
 8003900:	601a      	str	r2, [r3, #0]
 8003902:	e007      	b.n	8003914 <HAL_DMA_IRQHandler+0xb34>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f022 0204 	bic.w	r2, r2, #4
 8003912:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003918:	2b00      	cmp	r3, #0
 800391a:	f000 8165 	beq.w	8003be8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003926:	e15f      	b.n	8003be8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800392c:	f003 031f 	and.w	r3, r3, #31
 8003930:	2202      	movs	r2, #2
 8003932:	409a      	lsls	r2, r3
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	4013      	ands	r3, r2
 8003938:	2b00      	cmp	r3, #0
 800393a:	f000 80c5 	beq.w	8003ac8 <HAL_DMA_IRQHandler+0xce8>
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 80bf 	beq.w	8003ac8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800394e:	f003 031f 	and.w	r3, r3, #31
 8003952:	2202      	movs	r2, #2
 8003954:	409a      	lsls	r2, r3
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d018      	beq.n	8003996 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d109      	bne.n	8003982 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003972:	2b00      	cmp	r3, #0
 8003974:	f000 813a 	beq.w	8003bec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003980:	e134      	b.n	8003bec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003986:	2b00      	cmp	r3, #0
 8003988:	f000 8130 	beq.w	8003bec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003994:	e12a      	b.n	8003bec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	f003 0320 	and.w	r3, r3, #32
 800399c:	2b00      	cmp	r3, #0
 800399e:	f040 8089 	bne.w	8003ab4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a2b      	ldr	r2, [pc, #172]	@ (8003a54 <HAL_DMA_IRQHandler+0xc74>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d04a      	beq.n	8003a42 <HAL_DMA_IRQHandler+0xc62>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a29      	ldr	r2, [pc, #164]	@ (8003a58 <HAL_DMA_IRQHandler+0xc78>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d045      	beq.n	8003a42 <HAL_DMA_IRQHandler+0xc62>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a28      	ldr	r2, [pc, #160]	@ (8003a5c <HAL_DMA_IRQHandler+0xc7c>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d040      	beq.n	8003a42 <HAL_DMA_IRQHandler+0xc62>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a26      	ldr	r2, [pc, #152]	@ (8003a60 <HAL_DMA_IRQHandler+0xc80>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d03b      	beq.n	8003a42 <HAL_DMA_IRQHandler+0xc62>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a25      	ldr	r2, [pc, #148]	@ (8003a64 <HAL_DMA_IRQHandler+0xc84>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d036      	beq.n	8003a42 <HAL_DMA_IRQHandler+0xc62>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a23      	ldr	r2, [pc, #140]	@ (8003a68 <HAL_DMA_IRQHandler+0xc88>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d031      	beq.n	8003a42 <HAL_DMA_IRQHandler+0xc62>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a22      	ldr	r2, [pc, #136]	@ (8003a6c <HAL_DMA_IRQHandler+0xc8c>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d02c      	beq.n	8003a42 <HAL_DMA_IRQHandler+0xc62>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a20      	ldr	r2, [pc, #128]	@ (8003a70 <HAL_DMA_IRQHandler+0xc90>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d027      	beq.n	8003a42 <HAL_DMA_IRQHandler+0xc62>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a1f      	ldr	r2, [pc, #124]	@ (8003a74 <HAL_DMA_IRQHandler+0xc94>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d022      	beq.n	8003a42 <HAL_DMA_IRQHandler+0xc62>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a1d      	ldr	r2, [pc, #116]	@ (8003a78 <HAL_DMA_IRQHandler+0xc98>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d01d      	beq.n	8003a42 <HAL_DMA_IRQHandler+0xc62>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a1c      	ldr	r2, [pc, #112]	@ (8003a7c <HAL_DMA_IRQHandler+0xc9c>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d018      	beq.n	8003a42 <HAL_DMA_IRQHandler+0xc62>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a1a      	ldr	r2, [pc, #104]	@ (8003a80 <HAL_DMA_IRQHandler+0xca0>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d013      	beq.n	8003a42 <HAL_DMA_IRQHandler+0xc62>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a19      	ldr	r2, [pc, #100]	@ (8003a84 <HAL_DMA_IRQHandler+0xca4>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d00e      	beq.n	8003a42 <HAL_DMA_IRQHandler+0xc62>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a17      	ldr	r2, [pc, #92]	@ (8003a88 <HAL_DMA_IRQHandler+0xca8>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d009      	beq.n	8003a42 <HAL_DMA_IRQHandler+0xc62>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a16      	ldr	r2, [pc, #88]	@ (8003a8c <HAL_DMA_IRQHandler+0xcac>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d004      	beq.n	8003a42 <HAL_DMA_IRQHandler+0xc62>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a14      	ldr	r2, [pc, #80]	@ (8003a90 <HAL_DMA_IRQHandler+0xcb0>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d128      	bne.n	8003a94 <HAL_DMA_IRQHandler+0xcb4>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f022 0214 	bic.w	r2, r2, #20
 8003a50:	601a      	str	r2, [r3, #0]
 8003a52:	e027      	b.n	8003aa4 <HAL_DMA_IRQHandler+0xcc4>
 8003a54:	40020010 	.word	0x40020010
 8003a58:	40020028 	.word	0x40020028
 8003a5c:	40020040 	.word	0x40020040
 8003a60:	40020058 	.word	0x40020058
 8003a64:	40020070 	.word	0x40020070
 8003a68:	40020088 	.word	0x40020088
 8003a6c:	400200a0 	.word	0x400200a0
 8003a70:	400200b8 	.word	0x400200b8
 8003a74:	40020410 	.word	0x40020410
 8003a78:	40020428 	.word	0x40020428
 8003a7c:	40020440 	.word	0x40020440
 8003a80:	40020458 	.word	0x40020458
 8003a84:	40020470 	.word	0x40020470
 8003a88:	40020488 	.word	0x40020488
 8003a8c:	400204a0 	.word	0x400204a0
 8003a90:	400204b8 	.word	0x400204b8
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 020a 	bic.w	r2, r2, #10
 8003aa2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f000 8097 	beq.w	8003bec <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ac6:	e091      	b.n	8003bec <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003acc:	f003 031f 	and.w	r3, r3, #31
 8003ad0:	2208      	movs	r2, #8
 8003ad2:	409a      	lsls	r2, r3
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f000 8088 	beq.w	8003bee <HAL_DMA_IRQHandler+0xe0e>
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	f003 0308 	and.w	r3, r3, #8
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f000 8082 	beq.w	8003bee <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a41      	ldr	r2, [pc, #260]	@ (8003bf4 <HAL_DMA_IRQHandler+0xe14>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d04a      	beq.n	8003b8a <HAL_DMA_IRQHandler+0xdaa>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a3f      	ldr	r2, [pc, #252]	@ (8003bf8 <HAL_DMA_IRQHandler+0xe18>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d045      	beq.n	8003b8a <HAL_DMA_IRQHandler+0xdaa>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a3e      	ldr	r2, [pc, #248]	@ (8003bfc <HAL_DMA_IRQHandler+0xe1c>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d040      	beq.n	8003b8a <HAL_DMA_IRQHandler+0xdaa>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a3c      	ldr	r2, [pc, #240]	@ (8003c00 <HAL_DMA_IRQHandler+0xe20>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d03b      	beq.n	8003b8a <HAL_DMA_IRQHandler+0xdaa>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a3b      	ldr	r2, [pc, #236]	@ (8003c04 <HAL_DMA_IRQHandler+0xe24>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d036      	beq.n	8003b8a <HAL_DMA_IRQHandler+0xdaa>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a39      	ldr	r2, [pc, #228]	@ (8003c08 <HAL_DMA_IRQHandler+0xe28>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d031      	beq.n	8003b8a <HAL_DMA_IRQHandler+0xdaa>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a38      	ldr	r2, [pc, #224]	@ (8003c0c <HAL_DMA_IRQHandler+0xe2c>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d02c      	beq.n	8003b8a <HAL_DMA_IRQHandler+0xdaa>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a36      	ldr	r2, [pc, #216]	@ (8003c10 <HAL_DMA_IRQHandler+0xe30>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d027      	beq.n	8003b8a <HAL_DMA_IRQHandler+0xdaa>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a35      	ldr	r2, [pc, #212]	@ (8003c14 <HAL_DMA_IRQHandler+0xe34>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d022      	beq.n	8003b8a <HAL_DMA_IRQHandler+0xdaa>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a33      	ldr	r2, [pc, #204]	@ (8003c18 <HAL_DMA_IRQHandler+0xe38>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d01d      	beq.n	8003b8a <HAL_DMA_IRQHandler+0xdaa>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a32      	ldr	r2, [pc, #200]	@ (8003c1c <HAL_DMA_IRQHandler+0xe3c>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d018      	beq.n	8003b8a <HAL_DMA_IRQHandler+0xdaa>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a30      	ldr	r2, [pc, #192]	@ (8003c20 <HAL_DMA_IRQHandler+0xe40>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d013      	beq.n	8003b8a <HAL_DMA_IRQHandler+0xdaa>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a2f      	ldr	r2, [pc, #188]	@ (8003c24 <HAL_DMA_IRQHandler+0xe44>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d00e      	beq.n	8003b8a <HAL_DMA_IRQHandler+0xdaa>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a2d      	ldr	r2, [pc, #180]	@ (8003c28 <HAL_DMA_IRQHandler+0xe48>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d009      	beq.n	8003b8a <HAL_DMA_IRQHandler+0xdaa>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a2c      	ldr	r2, [pc, #176]	@ (8003c2c <HAL_DMA_IRQHandler+0xe4c>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d004      	beq.n	8003b8a <HAL_DMA_IRQHandler+0xdaa>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a2a      	ldr	r2, [pc, #168]	@ (8003c30 <HAL_DMA_IRQHandler+0xe50>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d108      	bne.n	8003b9c <HAL_DMA_IRQHandler+0xdbc>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 021c 	bic.w	r2, r2, #28
 8003b98:	601a      	str	r2, [r3, #0]
 8003b9a:	e007      	b.n	8003bac <HAL_DMA_IRQHandler+0xdcc>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f022 020e 	bic.w	r2, r2, #14
 8003baa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bb0:	f003 031f 	and.w	r3, r3, #31
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	409a      	lsls	r2, r3
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d009      	beq.n	8003bee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	4798      	blx	r3
 8003be2:	e004      	b.n	8003bee <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003be4:	bf00      	nop
 8003be6:	e002      	b.n	8003bee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003be8:	bf00      	nop
 8003bea:	e000      	b.n	8003bee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bec:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003bee:	3728      	adds	r7, #40	@ 0x28
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	40020010 	.word	0x40020010
 8003bf8:	40020028 	.word	0x40020028
 8003bfc:	40020040 	.word	0x40020040
 8003c00:	40020058 	.word	0x40020058
 8003c04:	40020070 	.word	0x40020070
 8003c08:	40020088 	.word	0x40020088
 8003c0c:	400200a0 	.word	0x400200a0
 8003c10:	400200b8 	.word	0x400200b8
 8003c14:	40020410 	.word	0x40020410
 8003c18:	40020428 	.word	0x40020428
 8003c1c:	40020440 	.word	0x40020440
 8003c20:	40020458 	.word	0x40020458
 8003c24:	40020470 	.word	0x40020470
 8003c28:	40020488 	.word	0x40020488
 8003c2c:	400204a0 	.word	0x400204a0
 8003c30:	400204b8 	.word	0x400204b8

08003c34 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b087      	sub	sp, #28
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
 8003c58:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c5e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c64:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a7f      	ldr	r2, [pc, #508]	@ (8003e68 <DMA_SetConfig+0x21c>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d072      	beq.n	8003d56 <DMA_SetConfig+0x10a>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a7d      	ldr	r2, [pc, #500]	@ (8003e6c <DMA_SetConfig+0x220>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d06d      	beq.n	8003d56 <DMA_SetConfig+0x10a>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a7c      	ldr	r2, [pc, #496]	@ (8003e70 <DMA_SetConfig+0x224>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d068      	beq.n	8003d56 <DMA_SetConfig+0x10a>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a7a      	ldr	r2, [pc, #488]	@ (8003e74 <DMA_SetConfig+0x228>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d063      	beq.n	8003d56 <DMA_SetConfig+0x10a>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a79      	ldr	r2, [pc, #484]	@ (8003e78 <DMA_SetConfig+0x22c>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d05e      	beq.n	8003d56 <DMA_SetConfig+0x10a>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a77      	ldr	r2, [pc, #476]	@ (8003e7c <DMA_SetConfig+0x230>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d059      	beq.n	8003d56 <DMA_SetConfig+0x10a>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a76      	ldr	r2, [pc, #472]	@ (8003e80 <DMA_SetConfig+0x234>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d054      	beq.n	8003d56 <DMA_SetConfig+0x10a>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a74      	ldr	r2, [pc, #464]	@ (8003e84 <DMA_SetConfig+0x238>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d04f      	beq.n	8003d56 <DMA_SetConfig+0x10a>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a73      	ldr	r2, [pc, #460]	@ (8003e88 <DMA_SetConfig+0x23c>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d04a      	beq.n	8003d56 <DMA_SetConfig+0x10a>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a71      	ldr	r2, [pc, #452]	@ (8003e8c <DMA_SetConfig+0x240>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d045      	beq.n	8003d56 <DMA_SetConfig+0x10a>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a70      	ldr	r2, [pc, #448]	@ (8003e90 <DMA_SetConfig+0x244>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d040      	beq.n	8003d56 <DMA_SetConfig+0x10a>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a6e      	ldr	r2, [pc, #440]	@ (8003e94 <DMA_SetConfig+0x248>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d03b      	beq.n	8003d56 <DMA_SetConfig+0x10a>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a6d      	ldr	r2, [pc, #436]	@ (8003e98 <DMA_SetConfig+0x24c>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d036      	beq.n	8003d56 <DMA_SetConfig+0x10a>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a6b      	ldr	r2, [pc, #428]	@ (8003e9c <DMA_SetConfig+0x250>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d031      	beq.n	8003d56 <DMA_SetConfig+0x10a>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a6a      	ldr	r2, [pc, #424]	@ (8003ea0 <DMA_SetConfig+0x254>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d02c      	beq.n	8003d56 <DMA_SetConfig+0x10a>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a68      	ldr	r2, [pc, #416]	@ (8003ea4 <DMA_SetConfig+0x258>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d027      	beq.n	8003d56 <DMA_SetConfig+0x10a>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a67      	ldr	r2, [pc, #412]	@ (8003ea8 <DMA_SetConfig+0x25c>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d022      	beq.n	8003d56 <DMA_SetConfig+0x10a>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a65      	ldr	r2, [pc, #404]	@ (8003eac <DMA_SetConfig+0x260>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d01d      	beq.n	8003d56 <DMA_SetConfig+0x10a>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a64      	ldr	r2, [pc, #400]	@ (8003eb0 <DMA_SetConfig+0x264>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d018      	beq.n	8003d56 <DMA_SetConfig+0x10a>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a62      	ldr	r2, [pc, #392]	@ (8003eb4 <DMA_SetConfig+0x268>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d013      	beq.n	8003d56 <DMA_SetConfig+0x10a>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a61      	ldr	r2, [pc, #388]	@ (8003eb8 <DMA_SetConfig+0x26c>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d00e      	beq.n	8003d56 <DMA_SetConfig+0x10a>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a5f      	ldr	r2, [pc, #380]	@ (8003ebc <DMA_SetConfig+0x270>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d009      	beq.n	8003d56 <DMA_SetConfig+0x10a>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a5e      	ldr	r2, [pc, #376]	@ (8003ec0 <DMA_SetConfig+0x274>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d004      	beq.n	8003d56 <DMA_SetConfig+0x10a>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a5c      	ldr	r2, [pc, #368]	@ (8003ec4 <DMA_SetConfig+0x278>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d101      	bne.n	8003d5a <DMA_SetConfig+0x10e>
 8003d56:	2301      	movs	r3, #1
 8003d58:	e000      	b.n	8003d5c <DMA_SetConfig+0x110>
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00d      	beq.n	8003d7c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003d68:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d004      	beq.n	8003d7c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003d7a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a39      	ldr	r2, [pc, #228]	@ (8003e68 <DMA_SetConfig+0x21c>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d04a      	beq.n	8003e1c <DMA_SetConfig+0x1d0>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a38      	ldr	r2, [pc, #224]	@ (8003e6c <DMA_SetConfig+0x220>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d045      	beq.n	8003e1c <DMA_SetConfig+0x1d0>
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a36      	ldr	r2, [pc, #216]	@ (8003e70 <DMA_SetConfig+0x224>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d040      	beq.n	8003e1c <DMA_SetConfig+0x1d0>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a35      	ldr	r2, [pc, #212]	@ (8003e74 <DMA_SetConfig+0x228>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d03b      	beq.n	8003e1c <DMA_SetConfig+0x1d0>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a33      	ldr	r2, [pc, #204]	@ (8003e78 <DMA_SetConfig+0x22c>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d036      	beq.n	8003e1c <DMA_SetConfig+0x1d0>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a32      	ldr	r2, [pc, #200]	@ (8003e7c <DMA_SetConfig+0x230>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d031      	beq.n	8003e1c <DMA_SetConfig+0x1d0>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a30      	ldr	r2, [pc, #192]	@ (8003e80 <DMA_SetConfig+0x234>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d02c      	beq.n	8003e1c <DMA_SetConfig+0x1d0>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a2f      	ldr	r2, [pc, #188]	@ (8003e84 <DMA_SetConfig+0x238>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d027      	beq.n	8003e1c <DMA_SetConfig+0x1d0>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a2d      	ldr	r2, [pc, #180]	@ (8003e88 <DMA_SetConfig+0x23c>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d022      	beq.n	8003e1c <DMA_SetConfig+0x1d0>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a2c      	ldr	r2, [pc, #176]	@ (8003e8c <DMA_SetConfig+0x240>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d01d      	beq.n	8003e1c <DMA_SetConfig+0x1d0>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a2a      	ldr	r2, [pc, #168]	@ (8003e90 <DMA_SetConfig+0x244>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d018      	beq.n	8003e1c <DMA_SetConfig+0x1d0>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a29      	ldr	r2, [pc, #164]	@ (8003e94 <DMA_SetConfig+0x248>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d013      	beq.n	8003e1c <DMA_SetConfig+0x1d0>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a27      	ldr	r2, [pc, #156]	@ (8003e98 <DMA_SetConfig+0x24c>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d00e      	beq.n	8003e1c <DMA_SetConfig+0x1d0>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a26      	ldr	r2, [pc, #152]	@ (8003e9c <DMA_SetConfig+0x250>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d009      	beq.n	8003e1c <DMA_SetConfig+0x1d0>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a24      	ldr	r2, [pc, #144]	@ (8003ea0 <DMA_SetConfig+0x254>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d004      	beq.n	8003e1c <DMA_SetConfig+0x1d0>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a23      	ldr	r2, [pc, #140]	@ (8003ea4 <DMA_SetConfig+0x258>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d101      	bne.n	8003e20 <DMA_SetConfig+0x1d4>
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e000      	b.n	8003e22 <DMA_SetConfig+0x1d6>
 8003e20:	2300      	movs	r3, #0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d059      	beq.n	8003eda <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e2a:	f003 031f 	and.w	r3, r3, #31
 8003e2e:	223f      	movs	r2, #63	@ 0x3f
 8003e30:	409a      	lsls	r2, r3
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003e44:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	683a      	ldr	r2, [r7, #0]
 8003e4c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	2b40      	cmp	r3, #64	@ 0x40
 8003e54:	d138      	bne.n	8003ec8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68ba      	ldr	r2, [r7, #8]
 8003e64:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003e66:	e086      	b.n	8003f76 <DMA_SetConfig+0x32a>
 8003e68:	40020010 	.word	0x40020010
 8003e6c:	40020028 	.word	0x40020028
 8003e70:	40020040 	.word	0x40020040
 8003e74:	40020058 	.word	0x40020058
 8003e78:	40020070 	.word	0x40020070
 8003e7c:	40020088 	.word	0x40020088
 8003e80:	400200a0 	.word	0x400200a0
 8003e84:	400200b8 	.word	0x400200b8
 8003e88:	40020410 	.word	0x40020410
 8003e8c:	40020428 	.word	0x40020428
 8003e90:	40020440 	.word	0x40020440
 8003e94:	40020458 	.word	0x40020458
 8003e98:	40020470 	.word	0x40020470
 8003e9c:	40020488 	.word	0x40020488
 8003ea0:	400204a0 	.word	0x400204a0
 8003ea4:	400204b8 	.word	0x400204b8
 8003ea8:	58025408 	.word	0x58025408
 8003eac:	5802541c 	.word	0x5802541c
 8003eb0:	58025430 	.word	0x58025430
 8003eb4:	58025444 	.word	0x58025444
 8003eb8:	58025458 	.word	0x58025458
 8003ebc:	5802546c 	.word	0x5802546c
 8003ec0:	58025480 	.word	0x58025480
 8003ec4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68ba      	ldr	r2, [r7, #8]
 8003ece:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	60da      	str	r2, [r3, #12]
}
 8003ed8:	e04d      	b.n	8003f76 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a29      	ldr	r2, [pc, #164]	@ (8003f84 <DMA_SetConfig+0x338>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d022      	beq.n	8003f2a <DMA_SetConfig+0x2de>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a27      	ldr	r2, [pc, #156]	@ (8003f88 <DMA_SetConfig+0x33c>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d01d      	beq.n	8003f2a <DMA_SetConfig+0x2de>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a26      	ldr	r2, [pc, #152]	@ (8003f8c <DMA_SetConfig+0x340>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d018      	beq.n	8003f2a <DMA_SetConfig+0x2de>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a24      	ldr	r2, [pc, #144]	@ (8003f90 <DMA_SetConfig+0x344>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d013      	beq.n	8003f2a <DMA_SetConfig+0x2de>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a23      	ldr	r2, [pc, #140]	@ (8003f94 <DMA_SetConfig+0x348>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d00e      	beq.n	8003f2a <DMA_SetConfig+0x2de>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a21      	ldr	r2, [pc, #132]	@ (8003f98 <DMA_SetConfig+0x34c>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d009      	beq.n	8003f2a <DMA_SetConfig+0x2de>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a20      	ldr	r2, [pc, #128]	@ (8003f9c <DMA_SetConfig+0x350>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d004      	beq.n	8003f2a <DMA_SetConfig+0x2de>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a1e      	ldr	r2, [pc, #120]	@ (8003fa0 <DMA_SetConfig+0x354>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d101      	bne.n	8003f2e <DMA_SetConfig+0x2e2>
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e000      	b.n	8003f30 <DMA_SetConfig+0x2e4>
 8003f2e:	2300      	movs	r3, #0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d020      	beq.n	8003f76 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f38:	f003 031f 	and.w	r3, r3, #31
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	409a      	lsls	r2, r3
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	683a      	ldr	r2, [r7, #0]
 8003f4a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	2b40      	cmp	r3, #64	@ 0x40
 8003f52:	d108      	bne.n	8003f66 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68ba      	ldr	r2, [r7, #8]
 8003f62:	60da      	str	r2, [r3, #12]
}
 8003f64:	e007      	b.n	8003f76 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68ba      	ldr	r2, [r7, #8]
 8003f6c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	60da      	str	r2, [r3, #12]
}
 8003f76:	bf00      	nop
 8003f78:	371c      	adds	r7, #28
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	58025408 	.word	0x58025408
 8003f88:	5802541c 	.word	0x5802541c
 8003f8c:	58025430 	.word	0x58025430
 8003f90:	58025444 	.word	0x58025444
 8003f94:	58025458 	.word	0x58025458
 8003f98:	5802546c 	.word	0x5802546c
 8003f9c:	58025480 	.word	0x58025480
 8003fa0:	58025494 	.word	0x58025494

08003fa4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a42      	ldr	r2, [pc, #264]	@ (80040bc <DMA_CalcBaseAndBitshift+0x118>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d04a      	beq.n	800404c <DMA_CalcBaseAndBitshift+0xa8>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a41      	ldr	r2, [pc, #260]	@ (80040c0 <DMA_CalcBaseAndBitshift+0x11c>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d045      	beq.n	800404c <DMA_CalcBaseAndBitshift+0xa8>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a3f      	ldr	r2, [pc, #252]	@ (80040c4 <DMA_CalcBaseAndBitshift+0x120>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d040      	beq.n	800404c <DMA_CalcBaseAndBitshift+0xa8>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a3e      	ldr	r2, [pc, #248]	@ (80040c8 <DMA_CalcBaseAndBitshift+0x124>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d03b      	beq.n	800404c <DMA_CalcBaseAndBitshift+0xa8>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a3c      	ldr	r2, [pc, #240]	@ (80040cc <DMA_CalcBaseAndBitshift+0x128>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d036      	beq.n	800404c <DMA_CalcBaseAndBitshift+0xa8>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a3b      	ldr	r2, [pc, #236]	@ (80040d0 <DMA_CalcBaseAndBitshift+0x12c>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d031      	beq.n	800404c <DMA_CalcBaseAndBitshift+0xa8>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a39      	ldr	r2, [pc, #228]	@ (80040d4 <DMA_CalcBaseAndBitshift+0x130>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d02c      	beq.n	800404c <DMA_CalcBaseAndBitshift+0xa8>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a38      	ldr	r2, [pc, #224]	@ (80040d8 <DMA_CalcBaseAndBitshift+0x134>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d027      	beq.n	800404c <DMA_CalcBaseAndBitshift+0xa8>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a36      	ldr	r2, [pc, #216]	@ (80040dc <DMA_CalcBaseAndBitshift+0x138>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d022      	beq.n	800404c <DMA_CalcBaseAndBitshift+0xa8>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a35      	ldr	r2, [pc, #212]	@ (80040e0 <DMA_CalcBaseAndBitshift+0x13c>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d01d      	beq.n	800404c <DMA_CalcBaseAndBitshift+0xa8>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a33      	ldr	r2, [pc, #204]	@ (80040e4 <DMA_CalcBaseAndBitshift+0x140>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d018      	beq.n	800404c <DMA_CalcBaseAndBitshift+0xa8>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a32      	ldr	r2, [pc, #200]	@ (80040e8 <DMA_CalcBaseAndBitshift+0x144>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d013      	beq.n	800404c <DMA_CalcBaseAndBitshift+0xa8>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a30      	ldr	r2, [pc, #192]	@ (80040ec <DMA_CalcBaseAndBitshift+0x148>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d00e      	beq.n	800404c <DMA_CalcBaseAndBitshift+0xa8>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a2f      	ldr	r2, [pc, #188]	@ (80040f0 <DMA_CalcBaseAndBitshift+0x14c>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d009      	beq.n	800404c <DMA_CalcBaseAndBitshift+0xa8>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a2d      	ldr	r2, [pc, #180]	@ (80040f4 <DMA_CalcBaseAndBitshift+0x150>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d004      	beq.n	800404c <DMA_CalcBaseAndBitshift+0xa8>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a2c      	ldr	r2, [pc, #176]	@ (80040f8 <DMA_CalcBaseAndBitshift+0x154>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d101      	bne.n	8004050 <DMA_CalcBaseAndBitshift+0xac>
 800404c:	2301      	movs	r3, #1
 800404e:	e000      	b.n	8004052 <DMA_CalcBaseAndBitshift+0xae>
 8004050:	2300      	movs	r3, #0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d024      	beq.n	80040a0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	b2db      	uxtb	r3, r3
 800405c:	3b10      	subs	r3, #16
 800405e:	4a27      	ldr	r2, [pc, #156]	@ (80040fc <DMA_CalcBaseAndBitshift+0x158>)
 8004060:	fba2 2303 	umull	r2, r3, r2, r3
 8004064:	091b      	lsrs	r3, r3, #4
 8004066:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f003 0307 	and.w	r3, r3, #7
 800406e:	4a24      	ldr	r2, [pc, #144]	@ (8004100 <DMA_CalcBaseAndBitshift+0x15c>)
 8004070:	5cd3      	ldrb	r3, [r2, r3]
 8004072:	461a      	mov	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2b03      	cmp	r3, #3
 800407c:	d908      	bls.n	8004090 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	461a      	mov	r2, r3
 8004084:	4b1f      	ldr	r3, [pc, #124]	@ (8004104 <DMA_CalcBaseAndBitshift+0x160>)
 8004086:	4013      	ands	r3, r2
 8004088:	1d1a      	adds	r2, r3, #4
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	659a      	str	r2, [r3, #88]	@ 0x58
 800408e:	e00d      	b.n	80040ac <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	461a      	mov	r2, r3
 8004096:	4b1b      	ldr	r3, [pc, #108]	@ (8004104 <DMA_CalcBaseAndBitshift+0x160>)
 8004098:	4013      	ands	r3, r2
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	6593      	str	r3, [r2, #88]	@ 0x58
 800409e:	e005      	b.n	80040ac <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3714      	adds	r7, #20
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr
 80040bc:	40020010 	.word	0x40020010
 80040c0:	40020028 	.word	0x40020028
 80040c4:	40020040 	.word	0x40020040
 80040c8:	40020058 	.word	0x40020058
 80040cc:	40020070 	.word	0x40020070
 80040d0:	40020088 	.word	0x40020088
 80040d4:	400200a0 	.word	0x400200a0
 80040d8:	400200b8 	.word	0x400200b8
 80040dc:	40020410 	.word	0x40020410
 80040e0:	40020428 	.word	0x40020428
 80040e4:	40020440 	.word	0x40020440
 80040e8:	40020458 	.word	0x40020458
 80040ec:	40020470 	.word	0x40020470
 80040f0:	40020488 	.word	0x40020488
 80040f4:	400204a0 	.word	0x400204a0
 80040f8:	400204b8 	.word	0x400204b8
 80040fc:	aaaaaaab 	.word	0xaaaaaaab
 8004100:	08008a4c 	.word	0x08008a4c
 8004104:	fffffc00 	.word	0xfffffc00

08004108 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8004108:	b480      	push	{r7}
 800410a:	b085      	sub	sp, #20
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004110:	2300      	movs	r3, #0
 8004112:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d120      	bne.n	800415e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004120:	2b03      	cmp	r3, #3
 8004122:	d858      	bhi.n	80041d6 <DMA_CheckFifoParam+0xce>
 8004124:	a201      	add	r2, pc, #4	@ (adr r2, 800412c <DMA_CheckFifoParam+0x24>)
 8004126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800412a:	bf00      	nop
 800412c:	0800413d 	.word	0x0800413d
 8004130:	0800414f 	.word	0x0800414f
 8004134:	0800413d 	.word	0x0800413d
 8004138:	080041d7 	.word	0x080041d7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004140:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d048      	beq.n	80041da <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800414c:	e045      	b.n	80041da <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004152:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004156:	d142      	bne.n	80041de <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800415c:	e03f      	b.n	80041de <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004166:	d123      	bne.n	80041b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800416c:	2b03      	cmp	r3, #3
 800416e:	d838      	bhi.n	80041e2 <DMA_CheckFifoParam+0xda>
 8004170:	a201      	add	r2, pc, #4	@ (adr r2, 8004178 <DMA_CheckFifoParam+0x70>)
 8004172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004176:	bf00      	nop
 8004178:	08004189 	.word	0x08004189
 800417c:	0800418f 	.word	0x0800418f
 8004180:	08004189 	.word	0x08004189
 8004184:	080041a1 	.word	0x080041a1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	73fb      	strb	r3, [r7, #15]
        break;
 800418c:	e030      	b.n	80041f0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004192:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d025      	beq.n	80041e6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800419e:	e022      	b.n	80041e6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041a4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80041a8:	d11f      	bne.n	80041ea <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80041ae:	e01c      	b.n	80041ea <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d902      	bls.n	80041be <DMA_CheckFifoParam+0xb6>
 80041b8:	2b03      	cmp	r3, #3
 80041ba:	d003      	beq.n	80041c4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80041bc:	e018      	b.n	80041f0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	73fb      	strb	r3, [r7, #15]
        break;
 80041c2:	e015      	b.n	80041f0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00e      	beq.n	80041ee <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	73fb      	strb	r3, [r7, #15]
    break;
 80041d4:	e00b      	b.n	80041ee <DMA_CheckFifoParam+0xe6>
        break;
 80041d6:	bf00      	nop
 80041d8:	e00a      	b.n	80041f0 <DMA_CheckFifoParam+0xe8>
        break;
 80041da:	bf00      	nop
 80041dc:	e008      	b.n	80041f0 <DMA_CheckFifoParam+0xe8>
        break;
 80041de:	bf00      	nop
 80041e0:	e006      	b.n	80041f0 <DMA_CheckFifoParam+0xe8>
        break;
 80041e2:	bf00      	nop
 80041e4:	e004      	b.n	80041f0 <DMA_CheckFifoParam+0xe8>
        break;
 80041e6:	bf00      	nop
 80041e8:	e002      	b.n	80041f0 <DMA_CheckFifoParam+0xe8>
        break;
 80041ea:	bf00      	nop
 80041ec:	e000      	b.n	80041f0 <DMA_CheckFifoParam+0xe8>
    break;
 80041ee:	bf00      	nop
    }
  }

  return status;
 80041f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3714      	adds	r7, #20
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop

08004200 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a38      	ldr	r2, [pc, #224]	@ (80042f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d022      	beq.n	800425e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a36      	ldr	r2, [pc, #216]	@ (80042f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d01d      	beq.n	800425e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a35      	ldr	r2, [pc, #212]	@ (80042fc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d018      	beq.n	800425e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a33      	ldr	r2, [pc, #204]	@ (8004300 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d013      	beq.n	800425e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a32      	ldr	r2, [pc, #200]	@ (8004304 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d00e      	beq.n	800425e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a30      	ldr	r2, [pc, #192]	@ (8004308 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d009      	beq.n	800425e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a2f      	ldr	r2, [pc, #188]	@ (800430c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d004      	beq.n	800425e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a2d      	ldr	r2, [pc, #180]	@ (8004310 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d101      	bne.n	8004262 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800425e:	2301      	movs	r3, #1
 8004260:	e000      	b.n	8004264 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004262:	2300      	movs	r3, #0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d01a      	beq.n	800429e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	b2db      	uxtb	r3, r3
 800426e:	3b08      	subs	r3, #8
 8004270:	4a28      	ldr	r2, [pc, #160]	@ (8004314 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004272:	fba2 2303 	umull	r2, r3, r2, r3
 8004276:	091b      	lsrs	r3, r3, #4
 8004278:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	4b26      	ldr	r3, [pc, #152]	@ (8004318 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800427e:	4413      	add	r3, r2
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	461a      	mov	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a24      	ldr	r2, [pc, #144]	@ (800431c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800428c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f003 031f 	and.w	r3, r3, #31
 8004294:	2201      	movs	r2, #1
 8004296:	409a      	lsls	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800429c:	e024      	b.n	80042e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	3b10      	subs	r3, #16
 80042a6:	4a1e      	ldr	r2, [pc, #120]	@ (8004320 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80042a8:	fba2 2303 	umull	r2, r3, r2, r3
 80042ac:	091b      	lsrs	r3, r3, #4
 80042ae:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	4a1c      	ldr	r2, [pc, #112]	@ (8004324 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d806      	bhi.n	80042c6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	4a1b      	ldr	r2, [pc, #108]	@ (8004328 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d902      	bls.n	80042c6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	3308      	adds	r3, #8
 80042c4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	4b18      	ldr	r3, [pc, #96]	@ (800432c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80042ca:	4413      	add	r3, r2
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	461a      	mov	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a16      	ldr	r2, [pc, #88]	@ (8004330 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80042d8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f003 031f 	and.w	r3, r3, #31
 80042e0:	2201      	movs	r2, #1
 80042e2:	409a      	lsls	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80042e8:	bf00      	nop
 80042ea:	3714      	adds	r7, #20
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr
 80042f4:	58025408 	.word	0x58025408
 80042f8:	5802541c 	.word	0x5802541c
 80042fc:	58025430 	.word	0x58025430
 8004300:	58025444 	.word	0x58025444
 8004304:	58025458 	.word	0x58025458
 8004308:	5802546c 	.word	0x5802546c
 800430c:	58025480 	.word	0x58025480
 8004310:	58025494 	.word	0x58025494
 8004314:	cccccccd 	.word	0xcccccccd
 8004318:	16009600 	.word	0x16009600
 800431c:	58025880 	.word	0x58025880
 8004320:	aaaaaaab 	.word	0xaaaaaaab
 8004324:	400204b8 	.word	0x400204b8
 8004328:	4002040f 	.word	0x4002040f
 800432c:	10008200 	.word	0x10008200
 8004330:	40020880 	.word	0x40020880

08004334 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	b2db      	uxtb	r3, r3
 8004342:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d04a      	beq.n	80043e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2b08      	cmp	r3, #8
 800434e:	d847      	bhi.n	80043e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a25      	ldr	r2, [pc, #148]	@ (80043ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d022      	beq.n	80043a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a24      	ldr	r2, [pc, #144]	@ (80043f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d01d      	beq.n	80043a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a22      	ldr	r2, [pc, #136]	@ (80043f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d018      	beq.n	80043a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a21      	ldr	r2, [pc, #132]	@ (80043f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d013      	beq.n	80043a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a1f      	ldr	r2, [pc, #124]	@ (80043fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d00e      	beq.n	80043a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a1e      	ldr	r2, [pc, #120]	@ (8004400 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d009      	beq.n	80043a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a1c      	ldr	r2, [pc, #112]	@ (8004404 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d004      	beq.n	80043a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a1b      	ldr	r2, [pc, #108]	@ (8004408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d101      	bne.n	80043a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80043a0:	2301      	movs	r3, #1
 80043a2:	e000      	b.n	80043a6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80043a4:	2300      	movs	r3, #0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00a      	beq.n	80043c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	4b17      	ldr	r3, [pc, #92]	@ (800440c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80043ae:	4413      	add	r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	461a      	mov	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a15      	ldr	r2, [pc, #84]	@ (8004410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80043bc:	671a      	str	r2, [r3, #112]	@ 0x70
 80043be:	e009      	b.n	80043d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	4b14      	ldr	r3, [pc, #80]	@ (8004414 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80043c4:	4413      	add	r3, r2
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	461a      	mov	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a11      	ldr	r2, [pc, #68]	@ (8004418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80043d2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	3b01      	subs	r3, #1
 80043d8:	2201      	movs	r2, #1
 80043da:	409a      	lsls	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80043e0:	bf00      	nop
 80043e2:	3714      	adds	r7, #20
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	58025408 	.word	0x58025408
 80043f0:	5802541c 	.word	0x5802541c
 80043f4:	58025430 	.word	0x58025430
 80043f8:	58025444 	.word	0x58025444
 80043fc:	58025458 	.word	0x58025458
 8004400:	5802546c 	.word	0x5802546c
 8004404:	58025480 	.word	0x58025480
 8004408:	58025494 	.word	0x58025494
 800440c:	1600963f 	.word	0x1600963f
 8004410:	58025940 	.word	0x58025940
 8004414:	1000823f 	.word	0x1000823f
 8004418:	40020940 	.word	0x40020940

0800441c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800441c:	b480      	push	{r7}
 800441e:	b089      	sub	sp, #36	@ 0x24
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004426:	2300      	movs	r3, #0
 8004428:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800442a:	4b89      	ldr	r3, [pc, #548]	@ (8004650 <HAL_GPIO_Init+0x234>)
 800442c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800442e:	e194      	b.n	800475a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	2101      	movs	r1, #1
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	fa01 f303 	lsl.w	r3, r1, r3
 800443c:	4013      	ands	r3, r2
 800443e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	2b00      	cmp	r3, #0
 8004444:	f000 8186 	beq.w	8004754 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f003 0303 	and.w	r3, r3, #3
 8004450:	2b01      	cmp	r3, #1
 8004452:	d005      	beq.n	8004460 <HAL_GPIO_Init+0x44>
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f003 0303 	and.w	r3, r3, #3
 800445c:	2b02      	cmp	r3, #2
 800445e:	d130      	bne.n	80044c2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	005b      	lsls	r3, r3, #1
 800446a:	2203      	movs	r2, #3
 800446c:	fa02 f303 	lsl.w	r3, r2, r3
 8004470:	43db      	mvns	r3, r3
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	4013      	ands	r3, r2
 8004476:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	68da      	ldr	r2, [r3, #12]
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	005b      	lsls	r3, r3, #1
 8004480:	fa02 f303 	lsl.w	r3, r2, r3
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	4313      	orrs	r3, r2
 8004488:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004496:	2201      	movs	r2, #1
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	fa02 f303 	lsl.w	r3, r2, r3
 800449e:	43db      	mvns	r3, r3
 80044a0:	69ba      	ldr	r2, [r7, #24]
 80044a2:	4013      	ands	r3, r2
 80044a4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	091b      	lsrs	r3, r3, #4
 80044ac:	f003 0201 	and.w	r2, r3, #1
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	fa02 f303 	lsl.w	r3, r2, r3
 80044b6:	69ba      	ldr	r2, [r7, #24]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	69ba      	ldr	r2, [r7, #24]
 80044c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f003 0303 	and.w	r3, r3, #3
 80044ca:	2b03      	cmp	r3, #3
 80044cc:	d017      	beq.n	80044fe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	005b      	lsls	r3, r3, #1
 80044d8:	2203      	movs	r2, #3
 80044da:	fa02 f303 	lsl.w	r3, r2, r3
 80044de:	43db      	mvns	r3, r3
 80044e0:	69ba      	ldr	r2, [r7, #24]
 80044e2:	4013      	ands	r3, r2
 80044e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	689a      	ldr	r2, [r3, #8]
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	005b      	lsls	r3, r3, #1
 80044ee:	fa02 f303 	lsl.w	r3, r2, r3
 80044f2:	69ba      	ldr	r2, [r7, #24]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	69ba      	ldr	r2, [r7, #24]
 80044fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f003 0303 	and.w	r3, r3, #3
 8004506:	2b02      	cmp	r3, #2
 8004508:	d123      	bne.n	8004552 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	08da      	lsrs	r2, r3, #3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	3208      	adds	r2, #8
 8004512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004516:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	f003 0307 	and.w	r3, r3, #7
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	220f      	movs	r2, #15
 8004522:	fa02 f303 	lsl.w	r3, r2, r3
 8004526:	43db      	mvns	r3, r3
 8004528:	69ba      	ldr	r2, [r7, #24]
 800452a:	4013      	ands	r3, r2
 800452c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	691a      	ldr	r2, [r3, #16]
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	f003 0307 	and.w	r3, r3, #7
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	fa02 f303 	lsl.w	r3, r2, r3
 800453e:	69ba      	ldr	r2, [r7, #24]
 8004540:	4313      	orrs	r3, r2
 8004542:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	08da      	lsrs	r2, r3, #3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	3208      	adds	r2, #8
 800454c:	69b9      	ldr	r1, [r7, #24]
 800454e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	005b      	lsls	r3, r3, #1
 800455c:	2203      	movs	r2, #3
 800455e:	fa02 f303 	lsl.w	r3, r2, r3
 8004562:	43db      	mvns	r3, r3
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	4013      	ands	r3, r2
 8004568:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f003 0203 	and.w	r2, r3, #3
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	005b      	lsls	r3, r3, #1
 8004576:	fa02 f303 	lsl.w	r3, r2, r3
 800457a:	69ba      	ldr	r2, [r7, #24]
 800457c:	4313      	orrs	r3, r2
 800457e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800458e:	2b00      	cmp	r3, #0
 8004590:	f000 80e0 	beq.w	8004754 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004594:	4b2f      	ldr	r3, [pc, #188]	@ (8004654 <HAL_GPIO_Init+0x238>)
 8004596:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800459a:	4a2e      	ldr	r2, [pc, #184]	@ (8004654 <HAL_GPIO_Init+0x238>)
 800459c:	f043 0302 	orr.w	r3, r3, #2
 80045a0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80045a4:	4b2b      	ldr	r3, [pc, #172]	@ (8004654 <HAL_GPIO_Init+0x238>)
 80045a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	60fb      	str	r3, [r7, #12]
 80045b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80045b2:	4a29      	ldr	r2, [pc, #164]	@ (8004658 <HAL_GPIO_Init+0x23c>)
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	089b      	lsrs	r3, r3, #2
 80045b8:	3302      	adds	r3, #2
 80045ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	f003 0303 	and.w	r3, r3, #3
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	220f      	movs	r2, #15
 80045ca:	fa02 f303 	lsl.w	r3, r2, r3
 80045ce:	43db      	mvns	r3, r3
 80045d0:	69ba      	ldr	r2, [r7, #24]
 80045d2:	4013      	ands	r3, r2
 80045d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a20      	ldr	r2, [pc, #128]	@ (800465c <HAL_GPIO_Init+0x240>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d052      	beq.n	8004684 <HAL_GPIO_Init+0x268>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a1f      	ldr	r2, [pc, #124]	@ (8004660 <HAL_GPIO_Init+0x244>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d031      	beq.n	800464a <HAL_GPIO_Init+0x22e>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a1e      	ldr	r2, [pc, #120]	@ (8004664 <HAL_GPIO_Init+0x248>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d02b      	beq.n	8004646 <HAL_GPIO_Init+0x22a>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a1d      	ldr	r2, [pc, #116]	@ (8004668 <HAL_GPIO_Init+0x24c>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d025      	beq.n	8004642 <HAL_GPIO_Init+0x226>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a1c      	ldr	r2, [pc, #112]	@ (800466c <HAL_GPIO_Init+0x250>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d01f      	beq.n	800463e <HAL_GPIO_Init+0x222>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a1b      	ldr	r2, [pc, #108]	@ (8004670 <HAL_GPIO_Init+0x254>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d019      	beq.n	800463a <HAL_GPIO_Init+0x21e>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a1a      	ldr	r2, [pc, #104]	@ (8004674 <HAL_GPIO_Init+0x258>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d013      	beq.n	8004636 <HAL_GPIO_Init+0x21a>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a19      	ldr	r2, [pc, #100]	@ (8004678 <HAL_GPIO_Init+0x25c>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d00d      	beq.n	8004632 <HAL_GPIO_Init+0x216>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a18      	ldr	r2, [pc, #96]	@ (800467c <HAL_GPIO_Init+0x260>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d007      	beq.n	800462e <HAL_GPIO_Init+0x212>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a17      	ldr	r2, [pc, #92]	@ (8004680 <HAL_GPIO_Init+0x264>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d101      	bne.n	800462a <HAL_GPIO_Init+0x20e>
 8004626:	2309      	movs	r3, #9
 8004628:	e02d      	b.n	8004686 <HAL_GPIO_Init+0x26a>
 800462a:	230a      	movs	r3, #10
 800462c:	e02b      	b.n	8004686 <HAL_GPIO_Init+0x26a>
 800462e:	2308      	movs	r3, #8
 8004630:	e029      	b.n	8004686 <HAL_GPIO_Init+0x26a>
 8004632:	2307      	movs	r3, #7
 8004634:	e027      	b.n	8004686 <HAL_GPIO_Init+0x26a>
 8004636:	2306      	movs	r3, #6
 8004638:	e025      	b.n	8004686 <HAL_GPIO_Init+0x26a>
 800463a:	2305      	movs	r3, #5
 800463c:	e023      	b.n	8004686 <HAL_GPIO_Init+0x26a>
 800463e:	2304      	movs	r3, #4
 8004640:	e021      	b.n	8004686 <HAL_GPIO_Init+0x26a>
 8004642:	2303      	movs	r3, #3
 8004644:	e01f      	b.n	8004686 <HAL_GPIO_Init+0x26a>
 8004646:	2302      	movs	r3, #2
 8004648:	e01d      	b.n	8004686 <HAL_GPIO_Init+0x26a>
 800464a:	2301      	movs	r3, #1
 800464c:	e01b      	b.n	8004686 <HAL_GPIO_Init+0x26a>
 800464e:	bf00      	nop
 8004650:	58000080 	.word	0x58000080
 8004654:	58024400 	.word	0x58024400
 8004658:	58000400 	.word	0x58000400
 800465c:	58020000 	.word	0x58020000
 8004660:	58020400 	.word	0x58020400
 8004664:	58020800 	.word	0x58020800
 8004668:	58020c00 	.word	0x58020c00
 800466c:	58021000 	.word	0x58021000
 8004670:	58021400 	.word	0x58021400
 8004674:	58021800 	.word	0x58021800
 8004678:	58021c00 	.word	0x58021c00
 800467c:	58022000 	.word	0x58022000
 8004680:	58022400 	.word	0x58022400
 8004684:	2300      	movs	r3, #0
 8004686:	69fa      	ldr	r2, [r7, #28]
 8004688:	f002 0203 	and.w	r2, r2, #3
 800468c:	0092      	lsls	r2, r2, #2
 800468e:	4093      	lsls	r3, r2
 8004690:	69ba      	ldr	r2, [r7, #24]
 8004692:	4313      	orrs	r3, r2
 8004694:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004696:	4938      	ldr	r1, [pc, #224]	@ (8004778 <HAL_GPIO_Init+0x35c>)
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	089b      	lsrs	r3, r3, #2
 800469c:	3302      	adds	r3, #2
 800469e:	69ba      	ldr	r2, [r7, #24]
 80046a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80046a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	43db      	mvns	r3, r3
 80046b0:	69ba      	ldr	r2, [r7, #24]
 80046b2:	4013      	ands	r3, r2
 80046b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d003      	beq.n	80046ca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80046c2:	69ba      	ldr	r2, [r7, #24]
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80046ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80046d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	43db      	mvns	r3, r3
 80046de:	69ba      	ldr	r2, [r7, #24]
 80046e0:	4013      	ands	r3, r2
 80046e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d003      	beq.n	80046f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80046f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	43db      	mvns	r3, r3
 800470a:	69ba      	ldr	r2, [r7, #24]
 800470c:	4013      	ands	r3, r2
 800470e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d003      	beq.n	8004724 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800471c:	69ba      	ldr	r2, [r7, #24]
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	4313      	orrs	r3, r2
 8004722:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	69ba      	ldr	r2, [r7, #24]
 8004728:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	43db      	mvns	r3, r3
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	4013      	ands	r3, r2
 8004738:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d003      	beq.n	800474e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	4313      	orrs	r3, r2
 800474c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	69ba      	ldr	r2, [r7, #24]
 8004752:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	3301      	adds	r3, #1
 8004758:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	fa22 f303 	lsr.w	r3, r2, r3
 8004764:	2b00      	cmp	r3, #0
 8004766:	f47f ae63 	bne.w	8004430 <HAL_GPIO_Init+0x14>
  }
}
 800476a:	bf00      	nop
 800476c:	bf00      	nop
 800476e:	3724      	adds	r7, #36	@ 0x24
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr
 8004778:	58000400 	.word	0x58000400

0800477c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800477c:	b480      	push	{r7}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	460b      	mov	r3, r1
 8004786:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	691a      	ldr	r2, [r3, #16]
 800478c:	887b      	ldrh	r3, [r7, #2]
 800478e:	4013      	ands	r3, r2
 8004790:	2b00      	cmp	r3, #0
 8004792:	d002      	beq.n	800479a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004794:	2301      	movs	r3, #1
 8004796:	73fb      	strb	r3, [r7, #15]
 8004798:	e001      	b.n	800479e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800479a:	2300      	movs	r3, #0
 800479c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800479e:	7bfb      	ldrb	r3, [r7, #15]
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3714      	adds	r7, #20
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	460b      	mov	r3, r1
 80047b6:	807b      	strh	r3, [r7, #2]
 80047b8:	4613      	mov	r3, r2
 80047ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80047bc:	787b      	ldrb	r3, [r7, #1]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d003      	beq.n	80047ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047c2:	887a      	ldrh	r2, [r7, #2]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80047c8:	e003      	b.n	80047d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80047ca:	887b      	ldrh	r3, [r7, #2]
 80047cc:	041a      	lsls	r2, r3, #16
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	619a      	str	r2, [r3, #24]
}
 80047d2:	bf00      	nop
 80047d4:	370c      	adds	r7, #12
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
	...

080047e0 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80047e8:	4b19      	ldr	r3, [pc, #100]	@ (8004850 <HAL_PWREx_ConfigSupply+0x70>)
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	f003 0304 	and.w	r3, r3, #4
 80047f0:	2b04      	cmp	r3, #4
 80047f2:	d00a      	beq.n	800480a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80047f4:	4b16      	ldr	r3, [pc, #88]	@ (8004850 <HAL_PWREx_ConfigSupply+0x70>)
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	f003 0307 	and.w	r3, r3, #7
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d001      	beq.n	8004806 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e01f      	b.n	8004846 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004806:	2300      	movs	r3, #0
 8004808:	e01d      	b.n	8004846 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800480a:	4b11      	ldr	r3, [pc, #68]	@ (8004850 <HAL_PWREx_ConfigSupply+0x70>)
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	f023 0207 	bic.w	r2, r3, #7
 8004812:	490f      	ldr	r1, [pc, #60]	@ (8004850 <HAL_PWREx_ConfigSupply+0x70>)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4313      	orrs	r3, r2
 8004818:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800481a:	f7fc fe6b 	bl	80014f4 <HAL_GetTick>
 800481e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004820:	e009      	b.n	8004836 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004822:	f7fc fe67 	bl	80014f4 <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004830:	d901      	bls.n	8004836 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e007      	b.n	8004846 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004836:	4b06      	ldr	r3, [pc, #24]	@ (8004850 <HAL_PWREx_ConfigSupply+0x70>)
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800483e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004842:	d1ee      	bne.n	8004822 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	58024800 	.word	0x58024800

08004854 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b08c      	sub	sp, #48	@ 0x30
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d102      	bne.n	8004868 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	f000 bc48 	b.w	80050f8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0301 	and.w	r3, r3, #1
 8004870:	2b00      	cmp	r3, #0
 8004872:	f000 8088 	beq.w	8004986 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004876:	4b99      	ldr	r3, [pc, #612]	@ (8004adc <HAL_RCC_OscConfig+0x288>)
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800487e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004880:	4b96      	ldr	r3, [pc, #600]	@ (8004adc <HAL_RCC_OscConfig+0x288>)
 8004882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004884:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004888:	2b10      	cmp	r3, #16
 800488a:	d007      	beq.n	800489c <HAL_RCC_OscConfig+0x48>
 800488c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800488e:	2b18      	cmp	r3, #24
 8004890:	d111      	bne.n	80048b6 <HAL_RCC_OscConfig+0x62>
 8004892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004894:	f003 0303 	and.w	r3, r3, #3
 8004898:	2b02      	cmp	r3, #2
 800489a:	d10c      	bne.n	80048b6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800489c:	4b8f      	ldr	r3, [pc, #572]	@ (8004adc <HAL_RCC_OscConfig+0x288>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d06d      	beq.n	8004984 <HAL_RCC_OscConfig+0x130>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d169      	bne.n	8004984 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	f000 bc21 	b.w	80050f8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048be:	d106      	bne.n	80048ce <HAL_RCC_OscConfig+0x7a>
 80048c0:	4b86      	ldr	r3, [pc, #536]	@ (8004adc <HAL_RCC_OscConfig+0x288>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a85      	ldr	r2, [pc, #532]	@ (8004adc <HAL_RCC_OscConfig+0x288>)
 80048c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048ca:	6013      	str	r3, [r2, #0]
 80048cc:	e02e      	b.n	800492c <HAL_RCC_OscConfig+0xd8>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d10c      	bne.n	80048f0 <HAL_RCC_OscConfig+0x9c>
 80048d6:	4b81      	ldr	r3, [pc, #516]	@ (8004adc <HAL_RCC_OscConfig+0x288>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a80      	ldr	r2, [pc, #512]	@ (8004adc <HAL_RCC_OscConfig+0x288>)
 80048dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048e0:	6013      	str	r3, [r2, #0]
 80048e2:	4b7e      	ldr	r3, [pc, #504]	@ (8004adc <HAL_RCC_OscConfig+0x288>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a7d      	ldr	r2, [pc, #500]	@ (8004adc <HAL_RCC_OscConfig+0x288>)
 80048e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80048ec:	6013      	str	r3, [r2, #0]
 80048ee:	e01d      	b.n	800492c <HAL_RCC_OscConfig+0xd8>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80048f8:	d10c      	bne.n	8004914 <HAL_RCC_OscConfig+0xc0>
 80048fa:	4b78      	ldr	r3, [pc, #480]	@ (8004adc <HAL_RCC_OscConfig+0x288>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a77      	ldr	r2, [pc, #476]	@ (8004adc <HAL_RCC_OscConfig+0x288>)
 8004900:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004904:	6013      	str	r3, [r2, #0]
 8004906:	4b75      	ldr	r3, [pc, #468]	@ (8004adc <HAL_RCC_OscConfig+0x288>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a74      	ldr	r2, [pc, #464]	@ (8004adc <HAL_RCC_OscConfig+0x288>)
 800490c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004910:	6013      	str	r3, [r2, #0]
 8004912:	e00b      	b.n	800492c <HAL_RCC_OscConfig+0xd8>
 8004914:	4b71      	ldr	r3, [pc, #452]	@ (8004adc <HAL_RCC_OscConfig+0x288>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a70      	ldr	r2, [pc, #448]	@ (8004adc <HAL_RCC_OscConfig+0x288>)
 800491a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800491e:	6013      	str	r3, [r2, #0]
 8004920:	4b6e      	ldr	r3, [pc, #440]	@ (8004adc <HAL_RCC_OscConfig+0x288>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a6d      	ldr	r2, [pc, #436]	@ (8004adc <HAL_RCC_OscConfig+0x288>)
 8004926:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800492a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d013      	beq.n	800495c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004934:	f7fc fdde 	bl	80014f4 <HAL_GetTick>
 8004938:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800493a:	e008      	b.n	800494e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800493c:	f7fc fdda 	bl	80014f4 <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b64      	cmp	r3, #100	@ 0x64
 8004948:	d901      	bls.n	800494e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e3d4      	b.n	80050f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800494e:	4b63      	ldr	r3, [pc, #396]	@ (8004adc <HAL_RCC_OscConfig+0x288>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d0f0      	beq.n	800493c <HAL_RCC_OscConfig+0xe8>
 800495a:	e014      	b.n	8004986 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800495c:	f7fc fdca 	bl	80014f4 <HAL_GetTick>
 8004960:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004962:	e008      	b.n	8004976 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004964:	f7fc fdc6 	bl	80014f4 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b64      	cmp	r3, #100	@ 0x64
 8004970:	d901      	bls.n	8004976 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e3c0      	b.n	80050f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004976:	4b59      	ldr	r3, [pc, #356]	@ (8004adc <HAL_RCC_OscConfig+0x288>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1f0      	bne.n	8004964 <HAL_RCC_OscConfig+0x110>
 8004982:	e000      	b.n	8004986 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004984:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	2b00      	cmp	r3, #0
 8004990:	f000 80ca 	beq.w	8004b28 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004994:	4b51      	ldr	r3, [pc, #324]	@ (8004adc <HAL_RCC_OscConfig+0x288>)
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800499c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800499e:	4b4f      	ldr	r3, [pc, #316]	@ (8004adc <HAL_RCC_OscConfig+0x288>)
 80049a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049a2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80049a4:	6a3b      	ldr	r3, [r7, #32]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d007      	beq.n	80049ba <HAL_RCC_OscConfig+0x166>
 80049aa:	6a3b      	ldr	r3, [r7, #32]
 80049ac:	2b18      	cmp	r3, #24
 80049ae:	d156      	bne.n	8004a5e <HAL_RCC_OscConfig+0x20a>
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	f003 0303 	and.w	r3, r3, #3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d151      	bne.n	8004a5e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049ba:	4b48      	ldr	r3, [pc, #288]	@ (8004adc <HAL_RCC_OscConfig+0x288>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0304 	and.w	r3, r3, #4
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d005      	beq.n	80049d2 <HAL_RCC_OscConfig+0x17e>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d101      	bne.n	80049d2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e392      	b.n	80050f8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80049d2:	4b42      	ldr	r3, [pc, #264]	@ (8004adc <HAL_RCC_OscConfig+0x288>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f023 0219 	bic.w	r2, r3, #25
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	493f      	ldr	r1, [pc, #252]	@ (8004adc <HAL_RCC_OscConfig+0x288>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e4:	f7fc fd86 	bl	80014f4 <HAL_GetTick>
 80049e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80049ea:	e008      	b.n	80049fe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049ec:	f7fc fd82 	bl	80014f4 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d901      	bls.n	80049fe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e37c      	b.n	80050f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80049fe:	4b37      	ldr	r3, [pc, #220]	@ (8004adc <HAL_RCC_OscConfig+0x288>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0304 	and.w	r3, r3, #4
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d0f0      	beq.n	80049ec <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a0a:	f7fc fda3 	bl	8001554 <HAL_GetREVID>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d817      	bhi.n	8004a48 <HAL_RCC_OscConfig+0x1f4>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	691b      	ldr	r3, [r3, #16]
 8004a1c:	2b40      	cmp	r3, #64	@ 0x40
 8004a1e:	d108      	bne.n	8004a32 <HAL_RCC_OscConfig+0x1de>
 8004a20:	4b2e      	ldr	r3, [pc, #184]	@ (8004adc <HAL_RCC_OscConfig+0x288>)
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004a28:	4a2c      	ldr	r2, [pc, #176]	@ (8004adc <HAL_RCC_OscConfig+0x288>)
 8004a2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a2e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a30:	e07a      	b.n	8004b28 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a32:	4b2a      	ldr	r3, [pc, #168]	@ (8004adc <HAL_RCC_OscConfig+0x288>)
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	031b      	lsls	r3, r3, #12
 8004a40:	4926      	ldr	r1, [pc, #152]	@ (8004adc <HAL_RCC_OscConfig+0x288>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a46:	e06f      	b.n	8004b28 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a48:	4b24      	ldr	r3, [pc, #144]	@ (8004adc <HAL_RCC_OscConfig+0x288>)
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	061b      	lsls	r3, r3, #24
 8004a56:	4921      	ldr	r1, [pc, #132]	@ (8004adc <HAL_RCC_OscConfig+0x288>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a5c:	e064      	b.n	8004b28 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d047      	beq.n	8004af6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004a66:	4b1d      	ldr	r3, [pc, #116]	@ (8004adc <HAL_RCC_OscConfig+0x288>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f023 0219 	bic.w	r2, r3, #25
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	491a      	ldr	r1, [pc, #104]	@ (8004adc <HAL_RCC_OscConfig+0x288>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a78:	f7fc fd3c 	bl	80014f4 <HAL_GetTick>
 8004a7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a7e:	e008      	b.n	8004a92 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a80:	f7fc fd38 	bl	80014f4 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e332      	b.n	80050f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a92:	4b12      	ldr	r3, [pc, #72]	@ (8004adc <HAL_RCC_OscConfig+0x288>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0304 	and.w	r3, r3, #4
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d0f0      	beq.n	8004a80 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a9e:	f7fc fd59 	bl	8001554 <HAL_GetREVID>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d819      	bhi.n	8004ae0 <HAL_RCC_OscConfig+0x28c>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	2b40      	cmp	r3, #64	@ 0x40
 8004ab2:	d108      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x272>
 8004ab4:	4b09      	ldr	r3, [pc, #36]	@ (8004adc <HAL_RCC_OscConfig+0x288>)
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004abc:	4a07      	ldr	r2, [pc, #28]	@ (8004adc <HAL_RCC_OscConfig+0x288>)
 8004abe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ac2:	6053      	str	r3, [r2, #4]
 8004ac4:	e030      	b.n	8004b28 <HAL_RCC_OscConfig+0x2d4>
 8004ac6:	4b05      	ldr	r3, [pc, #20]	@ (8004adc <HAL_RCC_OscConfig+0x288>)
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	031b      	lsls	r3, r3, #12
 8004ad4:	4901      	ldr	r1, [pc, #4]	@ (8004adc <HAL_RCC_OscConfig+0x288>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	604b      	str	r3, [r1, #4]
 8004ada:	e025      	b.n	8004b28 <HAL_RCC_OscConfig+0x2d4>
 8004adc:	58024400 	.word	0x58024400
 8004ae0:	4b9a      	ldr	r3, [pc, #616]	@ (8004d4c <HAL_RCC_OscConfig+0x4f8>)
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	061b      	lsls	r3, r3, #24
 8004aee:	4997      	ldr	r1, [pc, #604]	@ (8004d4c <HAL_RCC_OscConfig+0x4f8>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	604b      	str	r3, [r1, #4]
 8004af4:	e018      	b.n	8004b28 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004af6:	4b95      	ldr	r3, [pc, #596]	@ (8004d4c <HAL_RCC_OscConfig+0x4f8>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a94      	ldr	r2, [pc, #592]	@ (8004d4c <HAL_RCC_OscConfig+0x4f8>)
 8004afc:	f023 0301 	bic.w	r3, r3, #1
 8004b00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b02:	f7fc fcf7 	bl	80014f4 <HAL_GetTick>
 8004b06:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b08:	e008      	b.n	8004b1c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b0a:	f7fc fcf3 	bl	80014f4 <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d901      	bls.n	8004b1c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e2ed      	b.n	80050f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b1c:	4b8b      	ldr	r3, [pc, #556]	@ (8004d4c <HAL_RCC_OscConfig+0x4f8>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0304 	and.w	r3, r3, #4
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1f0      	bne.n	8004b0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0310 	and.w	r3, r3, #16
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f000 80a9 	beq.w	8004c88 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b36:	4b85      	ldr	r3, [pc, #532]	@ (8004d4c <HAL_RCC_OscConfig+0x4f8>)
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b3e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b40:	4b82      	ldr	r3, [pc, #520]	@ (8004d4c <HAL_RCC_OscConfig+0x4f8>)
 8004b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b44:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	2b08      	cmp	r3, #8
 8004b4a:	d007      	beq.n	8004b5c <HAL_RCC_OscConfig+0x308>
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	2b18      	cmp	r3, #24
 8004b50:	d13a      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x374>
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	f003 0303 	and.w	r3, r3, #3
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d135      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004b5c:	4b7b      	ldr	r3, [pc, #492]	@ (8004d4c <HAL_RCC_OscConfig+0x4f8>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d005      	beq.n	8004b74 <HAL_RCC_OscConfig+0x320>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	69db      	ldr	r3, [r3, #28]
 8004b6c:	2b80      	cmp	r3, #128	@ 0x80
 8004b6e:	d001      	beq.n	8004b74 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e2c1      	b.n	80050f8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004b74:	f7fc fcee 	bl	8001554 <HAL_GetREVID>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d817      	bhi.n	8004bb2 <HAL_RCC_OscConfig+0x35e>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a1b      	ldr	r3, [r3, #32]
 8004b86:	2b20      	cmp	r3, #32
 8004b88:	d108      	bne.n	8004b9c <HAL_RCC_OscConfig+0x348>
 8004b8a:	4b70      	ldr	r3, [pc, #448]	@ (8004d4c <HAL_RCC_OscConfig+0x4f8>)
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004b92:	4a6e      	ldr	r2, [pc, #440]	@ (8004d4c <HAL_RCC_OscConfig+0x4f8>)
 8004b94:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004b98:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004b9a:	e075      	b.n	8004c88 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004b9c:	4b6b      	ldr	r3, [pc, #428]	@ (8004d4c <HAL_RCC_OscConfig+0x4f8>)
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a1b      	ldr	r3, [r3, #32]
 8004ba8:	069b      	lsls	r3, r3, #26
 8004baa:	4968      	ldr	r1, [pc, #416]	@ (8004d4c <HAL_RCC_OscConfig+0x4f8>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004bb0:	e06a      	b.n	8004c88 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004bb2:	4b66      	ldr	r3, [pc, #408]	@ (8004d4c <HAL_RCC_OscConfig+0x4f8>)
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	061b      	lsls	r3, r3, #24
 8004bc0:	4962      	ldr	r1, [pc, #392]	@ (8004d4c <HAL_RCC_OscConfig+0x4f8>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004bc6:	e05f      	b.n	8004c88 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	69db      	ldr	r3, [r3, #28]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d042      	beq.n	8004c56 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004bd0:	4b5e      	ldr	r3, [pc, #376]	@ (8004d4c <HAL_RCC_OscConfig+0x4f8>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a5d      	ldr	r2, [pc, #372]	@ (8004d4c <HAL_RCC_OscConfig+0x4f8>)
 8004bd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bdc:	f7fc fc8a 	bl	80014f4 <HAL_GetTick>
 8004be0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004be2:	e008      	b.n	8004bf6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004be4:	f7fc fc86 	bl	80014f4 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e280      	b.n	80050f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004bf6:	4b55      	ldr	r3, [pc, #340]	@ (8004d4c <HAL_RCC_OscConfig+0x4f8>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d0f0      	beq.n	8004be4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c02:	f7fc fca7 	bl	8001554 <HAL_GetREVID>
 8004c06:	4603      	mov	r3, r0
 8004c08:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d817      	bhi.n	8004c40 <HAL_RCC_OscConfig+0x3ec>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a1b      	ldr	r3, [r3, #32]
 8004c14:	2b20      	cmp	r3, #32
 8004c16:	d108      	bne.n	8004c2a <HAL_RCC_OscConfig+0x3d6>
 8004c18:	4b4c      	ldr	r3, [pc, #304]	@ (8004d4c <HAL_RCC_OscConfig+0x4f8>)
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004c20:	4a4a      	ldr	r2, [pc, #296]	@ (8004d4c <HAL_RCC_OscConfig+0x4f8>)
 8004c22:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004c26:	6053      	str	r3, [r2, #4]
 8004c28:	e02e      	b.n	8004c88 <HAL_RCC_OscConfig+0x434>
 8004c2a:	4b48      	ldr	r3, [pc, #288]	@ (8004d4c <HAL_RCC_OscConfig+0x4f8>)
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	069b      	lsls	r3, r3, #26
 8004c38:	4944      	ldr	r1, [pc, #272]	@ (8004d4c <HAL_RCC_OscConfig+0x4f8>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	604b      	str	r3, [r1, #4]
 8004c3e:	e023      	b.n	8004c88 <HAL_RCC_OscConfig+0x434>
 8004c40:	4b42      	ldr	r3, [pc, #264]	@ (8004d4c <HAL_RCC_OscConfig+0x4f8>)
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a1b      	ldr	r3, [r3, #32]
 8004c4c:	061b      	lsls	r3, r3, #24
 8004c4e:	493f      	ldr	r1, [pc, #252]	@ (8004d4c <HAL_RCC_OscConfig+0x4f8>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	60cb      	str	r3, [r1, #12]
 8004c54:	e018      	b.n	8004c88 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004c56:	4b3d      	ldr	r3, [pc, #244]	@ (8004d4c <HAL_RCC_OscConfig+0x4f8>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a3c      	ldr	r2, [pc, #240]	@ (8004d4c <HAL_RCC_OscConfig+0x4f8>)
 8004c5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c62:	f7fc fc47 	bl	80014f4 <HAL_GetTick>
 8004c66:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004c68:	e008      	b.n	8004c7c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004c6a:	f7fc fc43 	bl	80014f4 <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d901      	bls.n	8004c7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e23d      	b.n	80050f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004c7c:	4b33      	ldr	r3, [pc, #204]	@ (8004d4c <HAL_RCC_OscConfig+0x4f8>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1f0      	bne.n	8004c6a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0308 	and.w	r3, r3, #8
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d036      	beq.n	8004d02 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d019      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c9c:	4b2b      	ldr	r3, [pc, #172]	@ (8004d4c <HAL_RCC_OscConfig+0x4f8>)
 8004c9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ca0:	4a2a      	ldr	r2, [pc, #168]	@ (8004d4c <HAL_RCC_OscConfig+0x4f8>)
 8004ca2:	f043 0301 	orr.w	r3, r3, #1
 8004ca6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ca8:	f7fc fc24 	bl	80014f4 <HAL_GetTick>
 8004cac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004cae:	e008      	b.n	8004cc2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cb0:	f7fc fc20 	bl	80014f4 <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d901      	bls.n	8004cc2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e21a      	b.n	80050f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004cc2:	4b22      	ldr	r3, [pc, #136]	@ (8004d4c <HAL_RCC_OscConfig+0x4f8>)
 8004cc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d0f0      	beq.n	8004cb0 <HAL_RCC_OscConfig+0x45c>
 8004cce:	e018      	b.n	8004d02 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cd0:	4b1e      	ldr	r3, [pc, #120]	@ (8004d4c <HAL_RCC_OscConfig+0x4f8>)
 8004cd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cd4:	4a1d      	ldr	r2, [pc, #116]	@ (8004d4c <HAL_RCC_OscConfig+0x4f8>)
 8004cd6:	f023 0301 	bic.w	r3, r3, #1
 8004cda:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cdc:	f7fc fc0a 	bl	80014f4 <HAL_GetTick>
 8004ce0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004ce2:	e008      	b.n	8004cf6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ce4:	f7fc fc06 	bl	80014f4 <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e200      	b.n	80050f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004cf6:	4b15      	ldr	r3, [pc, #84]	@ (8004d4c <HAL_RCC_OscConfig+0x4f8>)
 8004cf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1f0      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0320 	and.w	r3, r3, #32
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d039      	beq.n	8004d82 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d01c      	beq.n	8004d50 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d16:	4b0d      	ldr	r3, [pc, #52]	@ (8004d4c <HAL_RCC_OscConfig+0x4f8>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a0c      	ldr	r2, [pc, #48]	@ (8004d4c <HAL_RCC_OscConfig+0x4f8>)
 8004d1c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004d20:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004d22:	f7fc fbe7 	bl	80014f4 <HAL_GetTick>
 8004d26:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004d28:	e008      	b.n	8004d3c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d2a:	f7fc fbe3 	bl	80014f4 <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d901      	bls.n	8004d3c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e1dd      	b.n	80050f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004d3c:	4b03      	ldr	r3, [pc, #12]	@ (8004d4c <HAL_RCC_OscConfig+0x4f8>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d0f0      	beq.n	8004d2a <HAL_RCC_OscConfig+0x4d6>
 8004d48:	e01b      	b.n	8004d82 <HAL_RCC_OscConfig+0x52e>
 8004d4a:	bf00      	nop
 8004d4c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d50:	4b9b      	ldr	r3, [pc, #620]	@ (8004fc0 <HAL_RCC_OscConfig+0x76c>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a9a      	ldr	r2, [pc, #616]	@ (8004fc0 <HAL_RCC_OscConfig+0x76c>)
 8004d56:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d5a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004d5c:	f7fc fbca 	bl	80014f4 <HAL_GetTick>
 8004d60:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004d62:	e008      	b.n	8004d76 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d64:	f7fc fbc6 	bl	80014f4 <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d901      	bls.n	8004d76 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e1c0      	b.n	80050f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004d76:	4b92      	ldr	r3, [pc, #584]	@ (8004fc0 <HAL_RCC_OscConfig+0x76c>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1f0      	bne.n	8004d64 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0304 	and.w	r3, r3, #4
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	f000 8081 	beq.w	8004e92 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004d90:	4b8c      	ldr	r3, [pc, #560]	@ (8004fc4 <HAL_RCC_OscConfig+0x770>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a8b      	ldr	r2, [pc, #556]	@ (8004fc4 <HAL_RCC_OscConfig+0x770>)
 8004d96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d9a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d9c:	f7fc fbaa 	bl	80014f4 <HAL_GetTick>
 8004da0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004da2:	e008      	b.n	8004db6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004da4:	f7fc fba6 	bl	80014f4 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	2b64      	cmp	r3, #100	@ 0x64
 8004db0:	d901      	bls.n	8004db6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e1a0      	b.n	80050f8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004db6:	4b83      	ldr	r3, [pc, #524]	@ (8004fc4 <HAL_RCC_OscConfig+0x770>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d0f0      	beq.n	8004da4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d106      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x584>
 8004dca:	4b7d      	ldr	r3, [pc, #500]	@ (8004fc0 <HAL_RCC_OscConfig+0x76c>)
 8004dcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dce:	4a7c      	ldr	r2, [pc, #496]	@ (8004fc0 <HAL_RCC_OscConfig+0x76c>)
 8004dd0:	f043 0301 	orr.w	r3, r3, #1
 8004dd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dd6:	e02d      	b.n	8004e34 <HAL_RCC_OscConfig+0x5e0>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d10c      	bne.n	8004dfa <HAL_RCC_OscConfig+0x5a6>
 8004de0:	4b77      	ldr	r3, [pc, #476]	@ (8004fc0 <HAL_RCC_OscConfig+0x76c>)
 8004de2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004de4:	4a76      	ldr	r2, [pc, #472]	@ (8004fc0 <HAL_RCC_OscConfig+0x76c>)
 8004de6:	f023 0301 	bic.w	r3, r3, #1
 8004dea:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dec:	4b74      	ldr	r3, [pc, #464]	@ (8004fc0 <HAL_RCC_OscConfig+0x76c>)
 8004dee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004df0:	4a73      	ldr	r2, [pc, #460]	@ (8004fc0 <HAL_RCC_OscConfig+0x76c>)
 8004df2:	f023 0304 	bic.w	r3, r3, #4
 8004df6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004df8:	e01c      	b.n	8004e34 <HAL_RCC_OscConfig+0x5e0>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	2b05      	cmp	r3, #5
 8004e00:	d10c      	bne.n	8004e1c <HAL_RCC_OscConfig+0x5c8>
 8004e02:	4b6f      	ldr	r3, [pc, #444]	@ (8004fc0 <HAL_RCC_OscConfig+0x76c>)
 8004e04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e06:	4a6e      	ldr	r2, [pc, #440]	@ (8004fc0 <HAL_RCC_OscConfig+0x76c>)
 8004e08:	f043 0304 	orr.w	r3, r3, #4
 8004e0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e0e:	4b6c      	ldr	r3, [pc, #432]	@ (8004fc0 <HAL_RCC_OscConfig+0x76c>)
 8004e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e12:	4a6b      	ldr	r2, [pc, #428]	@ (8004fc0 <HAL_RCC_OscConfig+0x76c>)
 8004e14:	f043 0301 	orr.w	r3, r3, #1
 8004e18:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e1a:	e00b      	b.n	8004e34 <HAL_RCC_OscConfig+0x5e0>
 8004e1c:	4b68      	ldr	r3, [pc, #416]	@ (8004fc0 <HAL_RCC_OscConfig+0x76c>)
 8004e1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e20:	4a67      	ldr	r2, [pc, #412]	@ (8004fc0 <HAL_RCC_OscConfig+0x76c>)
 8004e22:	f023 0301 	bic.w	r3, r3, #1
 8004e26:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e28:	4b65      	ldr	r3, [pc, #404]	@ (8004fc0 <HAL_RCC_OscConfig+0x76c>)
 8004e2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e2c:	4a64      	ldr	r2, [pc, #400]	@ (8004fc0 <HAL_RCC_OscConfig+0x76c>)
 8004e2e:	f023 0304 	bic.w	r3, r3, #4
 8004e32:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d015      	beq.n	8004e68 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e3c:	f7fc fb5a 	bl	80014f4 <HAL_GetTick>
 8004e40:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e42:	e00a      	b.n	8004e5a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e44:	f7fc fb56 	bl	80014f4 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d901      	bls.n	8004e5a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e14e      	b.n	80050f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e5a:	4b59      	ldr	r3, [pc, #356]	@ (8004fc0 <HAL_RCC_OscConfig+0x76c>)
 8004e5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d0ee      	beq.n	8004e44 <HAL_RCC_OscConfig+0x5f0>
 8004e66:	e014      	b.n	8004e92 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e68:	f7fc fb44 	bl	80014f4 <HAL_GetTick>
 8004e6c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e6e:	e00a      	b.n	8004e86 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e70:	f7fc fb40 	bl	80014f4 <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d901      	bls.n	8004e86 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e138      	b.n	80050f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e86:	4b4e      	ldr	r3, [pc, #312]	@ (8004fc0 <HAL_RCC_OscConfig+0x76c>)
 8004e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e8a:	f003 0302 	and.w	r3, r3, #2
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d1ee      	bne.n	8004e70 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	f000 812d 	beq.w	80050f6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004e9c:	4b48      	ldr	r3, [pc, #288]	@ (8004fc0 <HAL_RCC_OscConfig+0x76c>)
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ea4:	2b18      	cmp	r3, #24
 8004ea6:	f000 80bd 	beq.w	8005024 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	f040 809e 	bne.w	8004ff0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eb4:	4b42      	ldr	r3, [pc, #264]	@ (8004fc0 <HAL_RCC_OscConfig+0x76c>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a41      	ldr	r2, [pc, #260]	@ (8004fc0 <HAL_RCC_OscConfig+0x76c>)
 8004eba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ebe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec0:	f7fc fb18 	bl	80014f4 <HAL_GetTick>
 8004ec4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ec6:	e008      	b.n	8004eda <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ec8:	f7fc fb14 	bl	80014f4 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d901      	bls.n	8004eda <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e10e      	b.n	80050f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004eda:	4b39      	ldr	r3, [pc, #228]	@ (8004fc0 <HAL_RCC_OscConfig+0x76c>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d1f0      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ee6:	4b36      	ldr	r3, [pc, #216]	@ (8004fc0 <HAL_RCC_OscConfig+0x76c>)
 8004ee8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004eea:	4b37      	ldr	r3, [pc, #220]	@ (8004fc8 <HAL_RCC_OscConfig+0x774>)
 8004eec:	4013      	ands	r3, r2
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004ef6:	0112      	lsls	r2, r2, #4
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	4931      	ldr	r1, [pc, #196]	@ (8004fc0 <HAL_RCC_OscConfig+0x76c>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	628b      	str	r3, [r1, #40]	@ 0x28
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f04:	3b01      	subs	r3, #1
 8004f06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	025b      	lsls	r3, r3, #9
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	431a      	orrs	r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	041b      	lsls	r3, r3, #16
 8004f1e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004f22:	431a      	orrs	r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	061b      	lsls	r3, r3, #24
 8004f2c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004f30:	4923      	ldr	r1, [pc, #140]	@ (8004fc0 <HAL_RCC_OscConfig+0x76c>)
 8004f32:	4313      	orrs	r3, r2
 8004f34:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004f36:	4b22      	ldr	r3, [pc, #136]	@ (8004fc0 <HAL_RCC_OscConfig+0x76c>)
 8004f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f3a:	4a21      	ldr	r2, [pc, #132]	@ (8004fc0 <HAL_RCC_OscConfig+0x76c>)
 8004f3c:	f023 0301 	bic.w	r3, r3, #1
 8004f40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004f42:	4b1f      	ldr	r3, [pc, #124]	@ (8004fc0 <HAL_RCC_OscConfig+0x76c>)
 8004f44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f46:	4b21      	ldr	r3, [pc, #132]	@ (8004fcc <HAL_RCC_OscConfig+0x778>)
 8004f48:	4013      	ands	r3, r2
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004f4e:	00d2      	lsls	r2, r2, #3
 8004f50:	491b      	ldr	r1, [pc, #108]	@ (8004fc0 <HAL_RCC_OscConfig+0x76c>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004f56:	4b1a      	ldr	r3, [pc, #104]	@ (8004fc0 <HAL_RCC_OscConfig+0x76c>)
 8004f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f5a:	f023 020c 	bic.w	r2, r3, #12
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f62:	4917      	ldr	r1, [pc, #92]	@ (8004fc0 <HAL_RCC_OscConfig+0x76c>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004f68:	4b15      	ldr	r3, [pc, #84]	@ (8004fc0 <HAL_RCC_OscConfig+0x76c>)
 8004f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f6c:	f023 0202 	bic.w	r2, r3, #2
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f74:	4912      	ldr	r1, [pc, #72]	@ (8004fc0 <HAL_RCC_OscConfig+0x76c>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004f7a:	4b11      	ldr	r3, [pc, #68]	@ (8004fc0 <HAL_RCC_OscConfig+0x76c>)
 8004f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f7e:	4a10      	ldr	r2, [pc, #64]	@ (8004fc0 <HAL_RCC_OscConfig+0x76c>)
 8004f80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f86:	4b0e      	ldr	r3, [pc, #56]	@ (8004fc0 <HAL_RCC_OscConfig+0x76c>)
 8004f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f8a:	4a0d      	ldr	r2, [pc, #52]	@ (8004fc0 <HAL_RCC_OscConfig+0x76c>)
 8004f8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004f92:	4b0b      	ldr	r3, [pc, #44]	@ (8004fc0 <HAL_RCC_OscConfig+0x76c>)
 8004f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f96:	4a0a      	ldr	r2, [pc, #40]	@ (8004fc0 <HAL_RCC_OscConfig+0x76c>)
 8004f98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004f9e:	4b08      	ldr	r3, [pc, #32]	@ (8004fc0 <HAL_RCC_OscConfig+0x76c>)
 8004fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa2:	4a07      	ldr	r2, [pc, #28]	@ (8004fc0 <HAL_RCC_OscConfig+0x76c>)
 8004fa4:	f043 0301 	orr.w	r3, r3, #1
 8004fa8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004faa:	4b05      	ldr	r3, [pc, #20]	@ (8004fc0 <HAL_RCC_OscConfig+0x76c>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a04      	ldr	r2, [pc, #16]	@ (8004fc0 <HAL_RCC_OscConfig+0x76c>)
 8004fb0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004fb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb6:	f7fc fa9d 	bl	80014f4 <HAL_GetTick>
 8004fba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004fbc:	e011      	b.n	8004fe2 <HAL_RCC_OscConfig+0x78e>
 8004fbe:	bf00      	nop
 8004fc0:	58024400 	.word	0x58024400
 8004fc4:	58024800 	.word	0x58024800
 8004fc8:	fffffc0c 	.word	0xfffffc0c
 8004fcc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fd0:	f7fc fa90 	bl	80014f4 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d901      	bls.n	8004fe2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e08a      	b.n	80050f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004fe2:	4b47      	ldr	r3, [pc, #284]	@ (8005100 <HAL_RCC_OscConfig+0x8ac>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d0f0      	beq.n	8004fd0 <HAL_RCC_OscConfig+0x77c>
 8004fee:	e082      	b.n	80050f6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ff0:	4b43      	ldr	r3, [pc, #268]	@ (8005100 <HAL_RCC_OscConfig+0x8ac>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a42      	ldr	r2, [pc, #264]	@ (8005100 <HAL_RCC_OscConfig+0x8ac>)
 8004ff6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ffa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ffc:	f7fc fa7a 	bl	80014f4 <HAL_GetTick>
 8005000:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005002:	e008      	b.n	8005016 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005004:	f7fc fa76 	bl	80014f4 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	2b02      	cmp	r3, #2
 8005010:	d901      	bls.n	8005016 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e070      	b.n	80050f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005016:	4b3a      	ldr	r3, [pc, #232]	@ (8005100 <HAL_RCC_OscConfig+0x8ac>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d1f0      	bne.n	8005004 <HAL_RCC_OscConfig+0x7b0>
 8005022:	e068      	b.n	80050f6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005024:	4b36      	ldr	r3, [pc, #216]	@ (8005100 <HAL_RCC_OscConfig+0x8ac>)
 8005026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005028:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800502a:	4b35      	ldr	r3, [pc, #212]	@ (8005100 <HAL_RCC_OscConfig+0x8ac>)
 800502c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800502e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005034:	2b01      	cmp	r3, #1
 8005036:	d031      	beq.n	800509c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	f003 0203 	and.w	r2, r3, #3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005042:	429a      	cmp	r2, r3
 8005044:	d12a      	bne.n	800509c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	091b      	lsrs	r3, r3, #4
 800504a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005052:	429a      	cmp	r2, r3
 8005054:	d122      	bne.n	800509c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005060:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005062:	429a      	cmp	r2, r3
 8005064:	d11a      	bne.n	800509c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	0a5b      	lsrs	r3, r3, #9
 800506a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005072:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005074:	429a      	cmp	r2, r3
 8005076:	d111      	bne.n	800509c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	0c1b      	lsrs	r3, r3, #16
 800507c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005084:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005086:	429a      	cmp	r2, r3
 8005088:	d108      	bne.n	800509c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	0e1b      	lsrs	r3, r3, #24
 800508e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005096:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005098:	429a      	cmp	r2, r3
 800509a:	d001      	beq.n	80050a0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e02b      	b.n	80050f8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80050a0:	4b17      	ldr	r3, [pc, #92]	@ (8005100 <HAL_RCC_OscConfig+0x8ac>)
 80050a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050a4:	08db      	lsrs	r3, r3, #3
 80050a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80050aa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050b0:	693a      	ldr	r2, [r7, #16]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d01f      	beq.n	80050f6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80050b6:	4b12      	ldr	r3, [pc, #72]	@ (8005100 <HAL_RCC_OscConfig+0x8ac>)
 80050b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ba:	4a11      	ldr	r2, [pc, #68]	@ (8005100 <HAL_RCC_OscConfig+0x8ac>)
 80050bc:	f023 0301 	bic.w	r3, r3, #1
 80050c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80050c2:	f7fc fa17 	bl	80014f4 <HAL_GetTick>
 80050c6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80050c8:	bf00      	nop
 80050ca:	f7fc fa13 	bl	80014f4 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d0f9      	beq.n	80050ca <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80050d6:	4b0a      	ldr	r3, [pc, #40]	@ (8005100 <HAL_RCC_OscConfig+0x8ac>)
 80050d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050da:	4b0a      	ldr	r3, [pc, #40]	@ (8005104 <HAL_RCC_OscConfig+0x8b0>)
 80050dc:	4013      	ands	r3, r2
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80050e2:	00d2      	lsls	r2, r2, #3
 80050e4:	4906      	ldr	r1, [pc, #24]	@ (8005100 <HAL_RCC_OscConfig+0x8ac>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80050ea:	4b05      	ldr	r3, [pc, #20]	@ (8005100 <HAL_RCC_OscConfig+0x8ac>)
 80050ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ee:	4a04      	ldr	r2, [pc, #16]	@ (8005100 <HAL_RCC_OscConfig+0x8ac>)
 80050f0:	f043 0301 	orr.w	r3, r3, #1
 80050f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3730      	adds	r7, #48	@ 0x30
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	58024400 	.word	0x58024400
 8005104:	ffff0007 	.word	0xffff0007

08005108 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b086      	sub	sp, #24
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d101      	bne.n	800511c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e19c      	b.n	8005456 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800511c:	4b8a      	ldr	r3, [pc, #552]	@ (8005348 <HAL_RCC_ClockConfig+0x240>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 030f 	and.w	r3, r3, #15
 8005124:	683a      	ldr	r2, [r7, #0]
 8005126:	429a      	cmp	r2, r3
 8005128:	d910      	bls.n	800514c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800512a:	4b87      	ldr	r3, [pc, #540]	@ (8005348 <HAL_RCC_ClockConfig+0x240>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f023 020f 	bic.w	r2, r3, #15
 8005132:	4985      	ldr	r1, [pc, #532]	@ (8005348 <HAL_RCC_ClockConfig+0x240>)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	4313      	orrs	r3, r2
 8005138:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800513a:	4b83      	ldr	r3, [pc, #524]	@ (8005348 <HAL_RCC_ClockConfig+0x240>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 030f 	and.w	r3, r3, #15
 8005142:	683a      	ldr	r2, [r7, #0]
 8005144:	429a      	cmp	r2, r3
 8005146:	d001      	beq.n	800514c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e184      	b.n	8005456 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0304 	and.w	r3, r3, #4
 8005154:	2b00      	cmp	r3, #0
 8005156:	d010      	beq.n	800517a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	691a      	ldr	r2, [r3, #16]
 800515c:	4b7b      	ldr	r3, [pc, #492]	@ (800534c <HAL_RCC_ClockConfig+0x244>)
 800515e:	699b      	ldr	r3, [r3, #24]
 8005160:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005164:	429a      	cmp	r2, r3
 8005166:	d908      	bls.n	800517a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005168:	4b78      	ldr	r3, [pc, #480]	@ (800534c <HAL_RCC_ClockConfig+0x244>)
 800516a:	699b      	ldr	r3, [r3, #24]
 800516c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	4975      	ldr	r1, [pc, #468]	@ (800534c <HAL_RCC_ClockConfig+0x244>)
 8005176:	4313      	orrs	r3, r2
 8005178:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0308 	and.w	r3, r3, #8
 8005182:	2b00      	cmp	r3, #0
 8005184:	d010      	beq.n	80051a8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	695a      	ldr	r2, [r3, #20]
 800518a:	4b70      	ldr	r3, [pc, #448]	@ (800534c <HAL_RCC_ClockConfig+0x244>)
 800518c:	69db      	ldr	r3, [r3, #28]
 800518e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005192:	429a      	cmp	r2, r3
 8005194:	d908      	bls.n	80051a8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005196:	4b6d      	ldr	r3, [pc, #436]	@ (800534c <HAL_RCC_ClockConfig+0x244>)
 8005198:	69db      	ldr	r3, [r3, #28]
 800519a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	496a      	ldr	r1, [pc, #424]	@ (800534c <HAL_RCC_ClockConfig+0x244>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0310 	and.w	r3, r3, #16
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d010      	beq.n	80051d6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	699a      	ldr	r2, [r3, #24]
 80051b8:	4b64      	ldr	r3, [pc, #400]	@ (800534c <HAL_RCC_ClockConfig+0x244>)
 80051ba:	69db      	ldr	r3, [r3, #28]
 80051bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d908      	bls.n	80051d6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80051c4:	4b61      	ldr	r3, [pc, #388]	@ (800534c <HAL_RCC_ClockConfig+0x244>)
 80051c6:	69db      	ldr	r3, [r3, #28]
 80051c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	495e      	ldr	r1, [pc, #376]	@ (800534c <HAL_RCC_ClockConfig+0x244>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0320 	and.w	r3, r3, #32
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d010      	beq.n	8005204 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	69da      	ldr	r2, [r3, #28]
 80051e6:	4b59      	ldr	r3, [pc, #356]	@ (800534c <HAL_RCC_ClockConfig+0x244>)
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d908      	bls.n	8005204 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80051f2:	4b56      	ldr	r3, [pc, #344]	@ (800534c <HAL_RCC_ClockConfig+0x244>)
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	69db      	ldr	r3, [r3, #28]
 80051fe:	4953      	ldr	r1, [pc, #332]	@ (800534c <HAL_RCC_ClockConfig+0x244>)
 8005200:	4313      	orrs	r3, r2
 8005202:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0302 	and.w	r3, r3, #2
 800520c:	2b00      	cmp	r3, #0
 800520e:	d010      	beq.n	8005232 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	68da      	ldr	r2, [r3, #12]
 8005214:	4b4d      	ldr	r3, [pc, #308]	@ (800534c <HAL_RCC_ClockConfig+0x244>)
 8005216:	699b      	ldr	r3, [r3, #24]
 8005218:	f003 030f 	and.w	r3, r3, #15
 800521c:	429a      	cmp	r2, r3
 800521e:	d908      	bls.n	8005232 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005220:	4b4a      	ldr	r3, [pc, #296]	@ (800534c <HAL_RCC_ClockConfig+0x244>)
 8005222:	699b      	ldr	r3, [r3, #24]
 8005224:	f023 020f 	bic.w	r2, r3, #15
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	4947      	ldr	r1, [pc, #284]	@ (800534c <HAL_RCC_ClockConfig+0x244>)
 800522e:	4313      	orrs	r3, r2
 8005230:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	2b00      	cmp	r3, #0
 800523c:	d055      	beq.n	80052ea <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800523e:	4b43      	ldr	r3, [pc, #268]	@ (800534c <HAL_RCC_ClockConfig+0x244>)
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	4940      	ldr	r1, [pc, #256]	@ (800534c <HAL_RCC_ClockConfig+0x244>)
 800524c:	4313      	orrs	r3, r2
 800524e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	2b02      	cmp	r3, #2
 8005256:	d107      	bne.n	8005268 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005258:	4b3c      	ldr	r3, [pc, #240]	@ (800534c <HAL_RCC_ClockConfig+0x244>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005260:	2b00      	cmp	r3, #0
 8005262:	d121      	bne.n	80052a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e0f6      	b.n	8005456 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	2b03      	cmp	r3, #3
 800526e:	d107      	bne.n	8005280 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005270:	4b36      	ldr	r3, [pc, #216]	@ (800534c <HAL_RCC_ClockConfig+0x244>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d115      	bne.n	80052a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e0ea      	b.n	8005456 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	2b01      	cmp	r3, #1
 8005286:	d107      	bne.n	8005298 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005288:	4b30      	ldr	r3, [pc, #192]	@ (800534c <HAL_RCC_ClockConfig+0x244>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005290:	2b00      	cmp	r3, #0
 8005292:	d109      	bne.n	80052a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e0de      	b.n	8005456 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005298:	4b2c      	ldr	r3, [pc, #176]	@ (800534c <HAL_RCC_ClockConfig+0x244>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0304 	and.w	r3, r3, #4
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d101      	bne.n	80052a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e0d6      	b.n	8005456 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80052a8:	4b28      	ldr	r3, [pc, #160]	@ (800534c <HAL_RCC_ClockConfig+0x244>)
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	f023 0207 	bic.w	r2, r3, #7
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	4925      	ldr	r1, [pc, #148]	@ (800534c <HAL_RCC_ClockConfig+0x244>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052ba:	f7fc f91b 	bl	80014f4 <HAL_GetTick>
 80052be:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052c0:	e00a      	b.n	80052d8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052c2:	f7fc f917 	bl	80014f4 <HAL_GetTick>
 80052c6:	4602      	mov	r2, r0
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d901      	bls.n	80052d8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e0be      	b.n	8005456 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052d8:	4b1c      	ldr	r3, [pc, #112]	@ (800534c <HAL_RCC_ClockConfig+0x244>)
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	00db      	lsls	r3, r3, #3
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d1eb      	bne.n	80052c2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0302 	and.w	r3, r3, #2
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d010      	beq.n	8005318 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	68da      	ldr	r2, [r3, #12]
 80052fa:	4b14      	ldr	r3, [pc, #80]	@ (800534c <HAL_RCC_ClockConfig+0x244>)
 80052fc:	699b      	ldr	r3, [r3, #24]
 80052fe:	f003 030f 	and.w	r3, r3, #15
 8005302:	429a      	cmp	r2, r3
 8005304:	d208      	bcs.n	8005318 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005306:	4b11      	ldr	r3, [pc, #68]	@ (800534c <HAL_RCC_ClockConfig+0x244>)
 8005308:	699b      	ldr	r3, [r3, #24]
 800530a:	f023 020f 	bic.w	r2, r3, #15
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	490e      	ldr	r1, [pc, #56]	@ (800534c <HAL_RCC_ClockConfig+0x244>)
 8005314:	4313      	orrs	r3, r2
 8005316:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005318:	4b0b      	ldr	r3, [pc, #44]	@ (8005348 <HAL_RCC_ClockConfig+0x240>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 030f 	and.w	r3, r3, #15
 8005320:	683a      	ldr	r2, [r7, #0]
 8005322:	429a      	cmp	r2, r3
 8005324:	d214      	bcs.n	8005350 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005326:	4b08      	ldr	r3, [pc, #32]	@ (8005348 <HAL_RCC_ClockConfig+0x240>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f023 020f 	bic.w	r2, r3, #15
 800532e:	4906      	ldr	r1, [pc, #24]	@ (8005348 <HAL_RCC_ClockConfig+0x240>)
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	4313      	orrs	r3, r2
 8005334:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005336:	4b04      	ldr	r3, [pc, #16]	@ (8005348 <HAL_RCC_ClockConfig+0x240>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 030f 	and.w	r3, r3, #15
 800533e:	683a      	ldr	r2, [r7, #0]
 8005340:	429a      	cmp	r2, r3
 8005342:	d005      	beq.n	8005350 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e086      	b.n	8005456 <HAL_RCC_ClockConfig+0x34e>
 8005348:	52002000 	.word	0x52002000
 800534c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0304 	and.w	r3, r3, #4
 8005358:	2b00      	cmp	r3, #0
 800535a:	d010      	beq.n	800537e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	691a      	ldr	r2, [r3, #16]
 8005360:	4b3f      	ldr	r3, [pc, #252]	@ (8005460 <HAL_RCC_ClockConfig+0x358>)
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005368:	429a      	cmp	r2, r3
 800536a:	d208      	bcs.n	800537e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800536c:	4b3c      	ldr	r3, [pc, #240]	@ (8005460 <HAL_RCC_ClockConfig+0x358>)
 800536e:	699b      	ldr	r3, [r3, #24]
 8005370:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	4939      	ldr	r1, [pc, #228]	@ (8005460 <HAL_RCC_ClockConfig+0x358>)
 800537a:	4313      	orrs	r3, r2
 800537c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0308 	and.w	r3, r3, #8
 8005386:	2b00      	cmp	r3, #0
 8005388:	d010      	beq.n	80053ac <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	695a      	ldr	r2, [r3, #20]
 800538e:	4b34      	ldr	r3, [pc, #208]	@ (8005460 <HAL_RCC_ClockConfig+0x358>)
 8005390:	69db      	ldr	r3, [r3, #28]
 8005392:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005396:	429a      	cmp	r2, r3
 8005398:	d208      	bcs.n	80053ac <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800539a:	4b31      	ldr	r3, [pc, #196]	@ (8005460 <HAL_RCC_ClockConfig+0x358>)
 800539c:	69db      	ldr	r3, [r3, #28]
 800539e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	492e      	ldr	r1, [pc, #184]	@ (8005460 <HAL_RCC_ClockConfig+0x358>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0310 	and.w	r3, r3, #16
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d010      	beq.n	80053da <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	699a      	ldr	r2, [r3, #24]
 80053bc:	4b28      	ldr	r3, [pc, #160]	@ (8005460 <HAL_RCC_ClockConfig+0x358>)
 80053be:	69db      	ldr	r3, [r3, #28]
 80053c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d208      	bcs.n	80053da <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80053c8:	4b25      	ldr	r3, [pc, #148]	@ (8005460 <HAL_RCC_ClockConfig+0x358>)
 80053ca:	69db      	ldr	r3, [r3, #28]
 80053cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	4922      	ldr	r1, [pc, #136]	@ (8005460 <HAL_RCC_ClockConfig+0x358>)
 80053d6:	4313      	orrs	r3, r2
 80053d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0320 	and.w	r3, r3, #32
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d010      	beq.n	8005408 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	69da      	ldr	r2, [r3, #28]
 80053ea:	4b1d      	ldr	r3, [pc, #116]	@ (8005460 <HAL_RCC_ClockConfig+0x358>)
 80053ec:	6a1b      	ldr	r3, [r3, #32]
 80053ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d208      	bcs.n	8005408 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80053f6:	4b1a      	ldr	r3, [pc, #104]	@ (8005460 <HAL_RCC_ClockConfig+0x358>)
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	69db      	ldr	r3, [r3, #28]
 8005402:	4917      	ldr	r1, [pc, #92]	@ (8005460 <HAL_RCC_ClockConfig+0x358>)
 8005404:	4313      	orrs	r3, r2
 8005406:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005408:	f000 f834 	bl	8005474 <HAL_RCC_GetSysClockFreq>
 800540c:	4602      	mov	r2, r0
 800540e:	4b14      	ldr	r3, [pc, #80]	@ (8005460 <HAL_RCC_ClockConfig+0x358>)
 8005410:	699b      	ldr	r3, [r3, #24]
 8005412:	0a1b      	lsrs	r3, r3, #8
 8005414:	f003 030f 	and.w	r3, r3, #15
 8005418:	4912      	ldr	r1, [pc, #72]	@ (8005464 <HAL_RCC_ClockConfig+0x35c>)
 800541a:	5ccb      	ldrb	r3, [r1, r3]
 800541c:	f003 031f 	and.w	r3, r3, #31
 8005420:	fa22 f303 	lsr.w	r3, r2, r3
 8005424:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005426:	4b0e      	ldr	r3, [pc, #56]	@ (8005460 <HAL_RCC_ClockConfig+0x358>)
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	f003 030f 	and.w	r3, r3, #15
 800542e:	4a0d      	ldr	r2, [pc, #52]	@ (8005464 <HAL_RCC_ClockConfig+0x35c>)
 8005430:	5cd3      	ldrb	r3, [r2, r3]
 8005432:	f003 031f 	and.w	r3, r3, #31
 8005436:	693a      	ldr	r2, [r7, #16]
 8005438:	fa22 f303 	lsr.w	r3, r2, r3
 800543c:	4a0a      	ldr	r2, [pc, #40]	@ (8005468 <HAL_RCC_ClockConfig+0x360>)
 800543e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005440:	4a0a      	ldr	r2, [pc, #40]	@ (800546c <HAL_RCC_ClockConfig+0x364>)
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005446:	4b0a      	ldr	r3, [pc, #40]	@ (8005470 <HAL_RCC_ClockConfig+0x368>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4618      	mov	r0, r3
 800544c:	f7fc f808 	bl	8001460 <HAL_InitTick>
 8005450:	4603      	mov	r3, r0
 8005452:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005454:	7bfb      	ldrb	r3, [r7, #15]
}
 8005456:	4618      	mov	r0, r3
 8005458:	3718      	adds	r7, #24
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	58024400 	.word	0x58024400
 8005464:	08008a3c 	.word	0x08008a3c
 8005468:	24000004 	.word	0x24000004
 800546c:	24000000 	.word	0x24000000
 8005470:	24000008 	.word	0x24000008

08005474 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005474:	b480      	push	{r7}
 8005476:	b089      	sub	sp, #36	@ 0x24
 8005478:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800547a:	4bb3      	ldr	r3, [pc, #716]	@ (8005748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005482:	2b18      	cmp	r3, #24
 8005484:	f200 8155 	bhi.w	8005732 <HAL_RCC_GetSysClockFreq+0x2be>
 8005488:	a201      	add	r2, pc, #4	@ (adr r2, 8005490 <HAL_RCC_GetSysClockFreq+0x1c>)
 800548a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800548e:	bf00      	nop
 8005490:	080054f5 	.word	0x080054f5
 8005494:	08005733 	.word	0x08005733
 8005498:	08005733 	.word	0x08005733
 800549c:	08005733 	.word	0x08005733
 80054a0:	08005733 	.word	0x08005733
 80054a4:	08005733 	.word	0x08005733
 80054a8:	08005733 	.word	0x08005733
 80054ac:	08005733 	.word	0x08005733
 80054b0:	0800551b 	.word	0x0800551b
 80054b4:	08005733 	.word	0x08005733
 80054b8:	08005733 	.word	0x08005733
 80054bc:	08005733 	.word	0x08005733
 80054c0:	08005733 	.word	0x08005733
 80054c4:	08005733 	.word	0x08005733
 80054c8:	08005733 	.word	0x08005733
 80054cc:	08005733 	.word	0x08005733
 80054d0:	08005521 	.word	0x08005521
 80054d4:	08005733 	.word	0x08005733
 80054d8:	08005733 	.word	0x08005733
 80054dc:	08005733 	.word	0x08005733
 80054e0:	08005733 	.word	0x08005733
 80054e4:	08005733 	.word	0x08005733
 80054e8:	08005733 	.word	0x08005733
 80054ec:	08005733 	.word	0x08005733
 80054f0:	08005527 	.word	0x08005527
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054f4:	4b94      	ldr	r3, [pc, #592]	@ (8005748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0320 	and.w	r3, r3, #32
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d009      	beq.n	8005514 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005500:	4b91      	ldr	r3, [pc, #580]	@ (8005748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	08db      	lsrs	r3, r3, #3
 8005506:	f003 0303 	and.w	r3, r3, #3
 800550a:	4a90      	ldr	r2, [pc, #576]	@ (800574c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800550c:	fa22 f303 	lsr.w	r3, r2, r3
 8005510:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005512:	e111      	b.n	8005738 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005514:	4b8d      	ldr	r3, [pc, #564]	@ (800574c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005516:	61bb      	str	r3, [r7, #24]
      break;
 8005518:	e10e      	b.n	8005738 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800551a:	4b8d      	ldr	r3, [pc, #564]	@ (8005750 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800551c:	61bb      	str	r3, [r7, #24]
      break;
 800551e:	e10b      	b.n	8005738 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005520:	4b8c      	ldr	r3, [pc, #560]	@ (8005754 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005522:	61bb      	str	r3, [r7, #24]
      break;
 8005524:	e108      	b.n	8005738 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005526:	4b88      	ldr	r3, [pc, #544]	@ (8005748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800552a:	f003 0303 	and.w	r3, r3, #3
 800552e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005530:	4b85      	ldr	r3, [pc, #532]	@ (8005748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005534:	091b      	lsrs	r3, r3, #4
 8005536:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800553a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800553c:	4b82      	ldr	r3, [pc, #520]	@ (8005748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800553e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005540:	f003 0301 	and.w	r3, r3, #1
 8005544:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005546:	4b80      	ldr	r3, [pc, #512]	@ (8005748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005548:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800554a:	08db      	lsrs	r3, r3, #3
 800554c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	fb02 f303 	mul.w	r3, r2, r3
 8005556:	ee07 3a90 	vmov	s15, r3
 800555a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800555e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	2b00      	cmp	r3, #0
 8005566:	f000 80e1 	beq.w	800572c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	2b02      	cmp	r3, #2
 800556e:	f000 8083 	beq.w	8005678 <HAL_RCC_GetSysClockFreq+0x204>
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	2b02      	cmp	r3, #2
 8005576:	f200 80a1 	bhi.w	80056bc <HAL_RCC_GetSysClockFreq+0x248>
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d003      	beq.n	8005588 <HAL_RCC_GetSysClockFreq+0x114>
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	2b01      	cmp	r3, #1
 8005584:	d056      	beq.n	8005634 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005586:	e099      	b.n	80056bc <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005588:	4b6f      	ldr	r3, [pc, #444]	@ (8005748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0320 	and.w	r3, r3, #32
 8005590:	2b00      	cmp	r3, #0
 8005592:	d02d      	beq.n	80055f0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005594:	4b6c      	ldr	r3, [pc, #432]	@ (8005748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	08db      	lsrs	r3, r3, #3
 800559a:	f003 0303 	and.w	r3, r3, #3
 800559e:	4a6b      	ldr	r2, [pc, #428]	@ (800574c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80055a0:	fa22 f303 	lsr.w	r3, r2, r3
 80055a4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	ee07 3a90 	vmov	s15, r3
 80055ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	ee07 3a90 	vmov	s15, r3
 80055b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055be:	4b62      	ldr	r3, [pc, #392]	@ (8005748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055c6:	ee07 3a90 	vmov	s15, r3
 80055ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80055d2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005758 <HAL_RCC_GetSysClockFreq+0x2e4>
 80055d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055ea:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80055ee:	e087      	b.n	8005700 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	ee07 3a90 	vmov	s15, r3
 80055f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055fa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800575c <HAL_RCC_GetSysClockFreq+0x2e8>
 80055fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005602:	4b51      	ldr	r3, [pc, #324]	@ (8005748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800560a:	ee07 3a90 	vmov	s15, r3
 800560e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005612:	ed97 6a02 	vldr	s12, [r7, #8]
 8005616:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005758 <HAL_RCC_GetSysClockFreq+0x2e4>
 800561a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800561e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005622:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800562a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800562e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005632:	e065      	b.n	8005700 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	ee07 3a90 	vmov	s15, r3
 800563a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800563e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005760 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005646:	4b40      	ldr	r3, [pc, #256]	@ (8005748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800564a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800564e:	ee07 3a90 	vmov	s15, r3
 8005652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005656:	ed97 6a02 	vldr	s12, [r7, #8]
 800565a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005758 <HAL_RCC_GetSysClockFreq+0x2e4>
 800565e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005666:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800566a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800566e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005672:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005676:	e043      	b.n	8005700 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	ee07 3a90 	vmov	s15, r3
 800567e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005682:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005764 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800568a:	4b2f      	ldr	r3, [pc, #188]	@ (8005748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800568c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800568e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005692:	ee07 3a90 	vmov	s15, r3
 8005696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800569a:	ed97 6a02 	vldr	s12, [r7, #8]
 800569e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005758 <HAL_RCC_GetSysClockFreq+0x2e4>
 80056a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80056ba:	e021      	b.n	8005700 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	ee07 3a90 	vmov	s15, r3
 80056c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056c6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005760 <HAL_RCC_GetSysClockFreq+0x2ec>
 80056ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056ce:	4b1e      	ldr	r3, [pc, #120]	@ (8005748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056d6:	ee07 3a90 	vmov	s15, r3
 80056da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056de:	ed97 6a02 	vldr	s12, [r7, #8]
 80056e2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005758 <HAL_RCC_GetSysClockFreq+0x2e4>
 80056e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80056fe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005700:	4b11      	ldr	r3, [pc, #68]	@ (8005748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005704:	0a5b      	lsrs	r3, r3, #9
 8005706:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800570a:	3301      	adds	r3, #1
 800570c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	ee07 3a90 	vmov	s15, r3
 8005714:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005718:	edd7 6a07 	vldr	s13, [r7, #28]
 800571c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005720:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005724:	ee17 3a90 	vmov	r3, s15
 8005728:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800572a:	e005      	b.n	8005738 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800572c:	2300      	movs	r3, #0
 800572e:	61bb      	str	r3, [r7, #24]
      break;
 8005730:	e002      	b.n	8005738 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005732:	4b07      	ldr	r3, [pc, #28]	@ (8005750 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005734:	61bb      	str	r3, [r7, #24]
      break;
 8005736:	bf00      	nop
  }

  return sysclockfreq;
 8005738:	69bb      	ldr	r3, [r7, #24]
}
 800573a:	4618      	mov	r0, r3
 800573c:	3724      	adds	r7, #36	@ 0x24
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	58024400 	.word	0x58024400
 800574c:	03d09000 	.word	0x03d09000
 8005750:	003d0900 	.word	0x003d0900
 8005754:	017d7840 	.word	0x017d7840
 8005758:	46000000 	.word	0x46000000
 800575c:	4c742400 	.word	0x4c742400
 8005760:	4a742400 	.word	0x4a742400
 8005764:	4bbebc20 	.word	0x4bbebc20

08005768 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005768:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800576c:	b0ca      	sub	sp, #296	@ 0x128
 800576e:	af00      	add	r7, sp, #0
 8005770:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005774:	2300      	movs	r3, #0
 8005776:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800577a:	2300      	movs	r3, #0
 800577c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005788:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800578c:	2500      	movs	r5, #0
 800578e:	ea54 0305 	orrs.w	r3, r4, r5
 8005792:	d049      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005798:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800579a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800579e:	d02f      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80057a0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80057a4:	d828      	bhi.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80057a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80057aa:	d01a      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80057ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80057b0:	d822      	bhi.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d003      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x56>
 80057b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057ba:	d007      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80057bc:	e01c      	b.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057be:	4bb8      	ldr	r3, [pc, #736]	@ (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057c2:	4ab7      	ldr	r2, [pc, #732]	@ (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80057ca:	e01a      	b.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80057cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057d0:	3308      	adds	r3, #8
 80057d2:	2102      	movs	r1, #2
 80057d4:	4618      	mov	r0, r3
 80057d6:	f001 f9d1 	bl	8006b7c <RCCEx_PLL2_Config>
 80057da:	4603      	mov	r3, r0
 80057dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80057e0:	e00f      	b.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80057e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057e6:	3328      	adds	r3, #40	@ 0x28
 80057e8:	2102      	movs	r1, #2
 80057ea:	4618      	mov	r0, r3
 80057ec:	f001 fa78 	bl	8006ce0 <RCCEx_PLL3_Config>
 80057f0:	4603      	mov	r3, r0
 80057f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80057f6:	e004      	b.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80057fe:	e000      	b.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005800:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005802:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005806:	2b00      	cmp	r3, #0
 8005808:	d10a      	bne.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800580a:	4ba5      	ldr	r3, [pc, #660]	@ (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800580c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800580e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005816:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005818:	4aa1      	ldr	r2, [pc, #644]	@ (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800581a:	430b      	orrs	r3, r1
 800581c:	6513      	str	r3, [r2, #80]	@ 0x50
 800581e:	e003      	b.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005820:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005824:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005828:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800582c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005830:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005834:	f04f 0900 	mov.w	r9, #0
 8005838:	ea58 0309 	orrs.w	r3, r8, r9
 800583c:	d047      	beq.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800583e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005844:	2b04      	cmp	r3, #4
 8005846:	d82a      	bhi.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005848:	a201      	add	r2, pc, #4	@ (adr r2, 8005850 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800584a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800584e:	bf00      	nop
 8005850:	08005865 	.word	0x08005865
 8005854:	08005873 	.word	0x08005873
 8005858:	08005889 	.word	0x08005889
 800585c:	080058a7 	.word	0x080058a7
 8005860:	080058a7 	.word	0x080058a7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005864:	4b8e      	ldr	r3, [pc, #568]	@ (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005868:	4a8d      	ldr	r2, [pc, #564]	@ (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800586a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800586e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005870:	e01a      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005876:	3308      	adds	r3, #8
 8005878:	2100      	movs	r1, #0
 800587a:	4618      	mov	r0, r3
 800587c:	f001 f97e 	bl	8006b7c <RCCEx_PLL2_Config>
 8005880:	4603      	mov	r3, r0
 8005882:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005886:	e00f      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005888:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800588c:	3328      	adds	r3, #40	@ 0x28
 800588e:	2100      	movs	r1, #0
 8005890:	4618      	mov	r0, r3
 8005892:	f001 fa25 	bl	8006ce0 <RCCEx_PLL3_Config>
 8005896:	4603      	mov	r3, r0
 8005898:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800589c:	e004      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058a4:	e000      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80058a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d10a      	bne.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80058b0:	4b7b      	ldr	r3, [pc, #492]	@ (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058b4:	f023 0107 	bic.w	r1, r3, #7
 80058b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058be:	4a78      	ldr	r2, [pc, #480]	@ (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058c0:	430b      	orrs	r3, r1
 80058c2:	6513      	str	r3, [r2, #80]	@ 0x50
 80058c4:	e003      	b.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80058ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80058da:	f04f 0b00 	mov.w	fp, #0
 80058de:	ea5a 030b 	orrs.w	r3, sl, fp
 80058e2:	d04c      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80058e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058ee:	d030      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80058f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058f4:	d829      	bhi.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80058f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80058f8:	d02d      	beq.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80058fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80058fc:	d825      	bhi.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80058fe:	2b80      	cmp	r3, #128	@ 0x80
 8005900:	d018      	beq.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005902:	2b80      	cmp	r3, #128	@ 0x80
 8005904:	d821      	bhi.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005906:	2b00      	cmp	r3, #0
 8005908:	d002      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800590a:	2b40      	cmp	r3, #64	@ 0x40
 800590c:	d007      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800590e:	e01c      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005910:	4b63      	ldr	r3, [pc, #396]	@ (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005914:	4a62      	ldr	r2, [pc, #392]	@ (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005916:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800591a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800591c:	e01c      	b.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800591e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005922:	3308      	adds	r3, #8
 8005924:	2100      	movs	r1, #0
 8005926:	4618      	mov	r0, r3
 8005928:	f001 f928 	bl	8006b7c <RCCEx_PLL2_Config>
 800592c:	4603      	mov	r3, r0
 800592e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005932:	e011      	b.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005938:	3328      	adds	r3, #40	@ 0x28
 800593a:	2100      	movs	r1, #0
 800593c:	4618      	mov	r0, r3
 800593e:	f001 f9cf 	bl	8006ce0 <RCCEx_PLL3_Config>
 8005942:	4603      	mov	r3, r0
 8005944:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005948:	e006      	b.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005950:	e002      	b.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005952:	bf00      	nop
 8005954:	e000      	b.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005956:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005958:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800595c:	2b00      	cmp	r3, #0
 800595e:	d10a      	bne.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005960:	4b4f      	ldr	r3, [pc, #316]	@ (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005962:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005964:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800596c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800596e:	4a4c      	ldr	r2, [pc, #304]	@ (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005970:	430b      	orrs	r3, r1
 8005972:	6513      	str	r3, [r2, #80]	@ 0x50
 8005974:	e003      	b.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005976:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800597a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800597e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005986:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800598a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800598e:	2300      	movs	r3, #0
 8005990:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005994:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005998:	460b      	mov	r3, r1
 800599a:	4313      	orrs	r3, r2
 800599c:	d053      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800599e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80059a6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80059aa:	d035      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80059ac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80059b0:	d82e      	bhi.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80059b2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80059b6:	d031      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80059b8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80059bc:	d828      	bhi.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80059be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80059c2:	d01a      	beq.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x292>
 80059c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80059c8:	d822      	bhi.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d003      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80059ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80059d2:	d007      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80059d4:	e01c      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059d6:	4b32      	ldr	r3, [pc, #200]	@ (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059da:	4a31      	ldr	r2, [pc, #196]	@ (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80059e2:	e01c      	b.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059e8:	3308      	adds	r3, #8
 80059ea:	2100      	movs	r1, #0
 80059ec:	4618      	mov	r0, r3
 80059ee:	f001 f8c5 	bl	8006b7c <RCCEx_PLL2_Config>
 80059f2:	4603      	mov	r3, r0
 80059f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80059f8:	e011      	b.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80059fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059fe:	3328      	adds	r3, #40	@ 0x28
 8005a00:	2100      	movs	r1, #0
 8005a02:	4618      	mov	r0, r3
 8005a04:	f001 f96c 	bl	8006ce0 <RCCEx_PLL3_Config>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a0e:	e006      	b.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a16:	e002      	b.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005a18:	bf00      	nop
 8005a1a:	e000      	b.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005a1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d10b      	bne.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005a26:	4b1e      	ldr	r3, [pc, #120]	@ (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a2a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a32:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005a36:	4a1a      	ldr	r2, [pc, #104]	@ (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a38:	430b      	orrs	r3, r1
 8005a3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a3c:	e003      	b.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a4e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005a52:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005a56:	2300      	movs	r3, #0
 8005a58:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005a5c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005a60:	460b      	mov	r3, r1
 8005a62:	4313      	orrs	r3, r2
 8005a64:	d056      	beq.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a6a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005a6e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a72:	d038      	beq.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005a74:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a78:	d831      	bhi.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005a7a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005a7e:	d034      	beq.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005a80:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005a84:	d82b      	bhi.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005a86:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a8a:	d01d      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005a8c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a90:	d825      	bhi.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d006      	beq.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005a96:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005a9a:	d00a      	beq.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005a9c:	e01f      	b.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005a9e:	bf00      	nop
 8005aa0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005aa4:	4ba2      	ldr	r3, [pc, #648]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aa8:	4aa1      	ldr	r2, [pc, #644]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005aaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005aae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ab0:	e01c      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ab6:	3308      	adds	r3, #8
 8005ab8:	2100      	movs	r1, #0
 8005aba:	4618      	mov	r0, r3
 8005abc:	f001 f85e 	bl	8006b7c <RCCEx_PLL2_Config>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005ac6:	e011      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005acc:	3328      	adds	r3, #40	@ 0x28
 8005ace:	2100      	movs	r1, #0
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f001 f905 	bl	8006ce0 <RCCEx_PLL3_Config>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005adc:	e006      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ae4:	e002      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005ae6:	bf00      	nop
 8005ae8:	e000      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005aea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005aec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d10b      	bne.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005af4:	4b8e      	ldr	r3, [pc, #568]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005af6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005af8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b00:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005b04:	4a8a      	ldr	r2, [pc, #552]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b06:	430b      	orrs	r3, r1
 8005b08:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b0a:	e003      	b.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b1c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005b20:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005b24:	2300      	movs	r3, #0
 8005b26:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005b2a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005b2e:	460b      	mov	r3, r1
 8005b30:	4313      	orrs	r3, r2
 8005b32:	d03a      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b3a:	2b30      	cmp	r3, #48	@ 0x30
 8005b3c:	d01f      	beq.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005b3e:	2b30      	cmp	r3, #48	@ 0x30
 8005b40:	d819      	bhi.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005b42:	2b20      	cmp	r3, #32
 8005b44:	d00c      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005b46:	2b20      	cmp	r3, #32
 8005b48:	d815      	bhi.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d019      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005b4e:	2b10      	cmp	r3, #16
 8005b50:	d111      	bne.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b52:	4b77      	ldr	r3, [pc, #476]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b56:	4a76      	ldr	r2, [pc, #472]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005b5e:	e011      	b.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b64:	3308      	adds	r3, #8
 8005b66:	2102      	movs	r1, #2
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f001 f807 	bl	8006b7c <RCCEx_PLL2_Config>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005b74:	e006      	b.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b7c:	e002      	b.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005b7e:	bf00      	nop
 8005b80:	e000      	b.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005b82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d10a      	bne.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005b8c:	4b68      	ldr	r3, [pc, #416]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b90:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b9a:	4a65      	ldr	r2, [pc, #404]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b9c:	430b      	orrs	r3, r1
 8005b9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005ba0:	e003      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ba2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ba6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005bb6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005bba:	2300      	movs	r3, #0
 8005bbc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005bc0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	d051      	beq.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bd0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005bd4:	d035      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005bd6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005bda:	d82e      	bhi.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005bdc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005be0:	d031      	beq.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005be2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005be6:	d828      	bhi.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005be8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bec:	d01a      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005bee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bf2:	d822      	bhi.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d003      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005bf8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bfc:	d007      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005bfe:	e01c      	b.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c00:	4b4b      	ldr	r3, [pc, #300]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c04:	4a4a      	ldr	r2, [pc, #296]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005c0c:	e01c      	b.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c12:	3308      	adds	r3, #8
 8005c14:	2100      	movs	r1, #0
 8005c16:	4618      	mov	r0, r3
 8005c18:	f000 ffb0 	bl	8006b7c <RCCEx_PLL2_Config>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005c22:	e011      	b.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c28:	3328      	adds	r3, #40	@ 0x28
 8005c2a:	2100      	movs	r1, #0
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f001 f857 	bl	8006ce0 <RCCEx_PLL3_Config>
 8005c32:	4603      	mov	r3, r0
 8005c34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005c38:	e006      	b.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c40:	e002      	b.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005c42:	bf00      	nop
 8005c44:	e000      	b.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005c46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d10a      	bne.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005c50:	4b37      	ldr	r3, [pc, #220]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c54:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c5e:	4a34      	ldr	r2, [pc, #208]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c60:	430b      	orrs	r3, r1
 8005c62:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c64:	e003      	b.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c76:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005c7a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005c7e:	2300      	movs	r3, #0
 8005c80:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005c84:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005c88:	460b      	mov	r3, r1
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	d056      	beq.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c98:	d033      	beq.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005c9a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c9e:	d82c      	bhi.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005ca0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005ca4:	d02f      	beq.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005ca6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005caa:	d826      	bhi.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005cac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005cb0:	d02b      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005cb2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005cb6:	d820      	bhi.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005cb8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005cbc:	d012      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005cbe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005cc2:	d81a      	bhi.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d022      	beq.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005cc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ccc:	d115      	bne.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cd2:	3308      	adds	r3, #8
 8005cd4:	2101      	movs	r1, #1
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f000 ff50 	bl	8006b7c <RCCEx_PLL2_Config>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005ce2:	e015      	b.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ce8:	3328      	adds	r3, #40	@ 0x28
 8005cea:	2101      	movs	r1, #1
 8005cec:	4618      	mov	r0, r3
 8005cee:	f000 fff7 	bl	8006ce0 <RCCEx_PLL3_Config>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005cf8:	e00a      	b.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d00:	e006      	b.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005d02:	bf00      	nop
 8005d04:	e004      	b.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005d06:	bf00      	nop
 8005d08:	e002      	b.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005d0a:	bf00      	nop
 8005d0c:	e000      	b.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005d0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d10d      	bne.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005d18:	4b05      	ldr	r3, [pc, #20]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d1c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d26:	4a02      	ldr	r2, [pc, #8]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d28:	430b      	orrs	r3, r1
 8005d2a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d2c:	e006      	b.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005d2e:	bf00      	nop
 8005d30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d44:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005d48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005d52:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005d56:	460b      	mov	r3, r1
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	d055      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d60:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005d64:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d68:	d033      	beq.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005d6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d6e:	d82c      	bhi.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005d70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d74:	d02f      	beq.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005d76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d7a:	d826      	bhi.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005d7c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005d80:	d02b      	beq.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005d82:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005d86:	d820      	bhi.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005d88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d8c:	d012      	beq.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005d8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d92:	d81a      	bhi.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d022      	beq.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005d98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d9c:	d115      	bne.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005da2:	3308      	adds	r3, #8
 8005da4:	2101      	movs	r1, #1
 8005da6:	4618      	mov	r0, r3
 8005da8:	f000 fee8 	bl	8006b7c <RCCEx_PLL2_Config>
 8005dac:	4603      	mov	r3, r0
 8005dae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005db2:	e015      	b.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005db8:	3328      	adds	r3, #40	@ 0x28
 8005dba:	2101      	movs	r1, #1
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f000 ff8f 	bl	8006ce0 <RCCEx_PLL3_Config>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005dc8:	e00a      	b.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005dd0:	e006      	b.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005dd2:	bf00      	nop
 8005dd4:	e004      	b.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005dd6:	bf00      	nop
 8005dd8:	e002      	b.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005dda:	bf00      	nop
 8005ddc:	e000      	b.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005dde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005de0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d10b      	bne.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005de8:	4ba3      	ldr	r3, [pc, #652]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dec:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005df4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005df8:	4a9f      	ldr	r2, [pc, #636]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dfa:	430b      	orrs	r3, r1
 8005dfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8005dfe:	e003      	b.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e10:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005e14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005e18:	2300      	movs	r3, #0
 8005e1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005e1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005e22:	460b      	mov	r3, r1
 8005e24:	4313      	orrs	r3, r2
 8005e26:	d037      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e32:	d00e      	beq.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005e34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e38:	d816      	bhi.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d018      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005e3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e42:	d111      	bne.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e44:	4b8c      	ldr	r3, [pc, #560]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e48:	4a8b      	ldr	r2, [pc, #556]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005e50:	e00f      	b.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e56:	3308      	adds	r3, #8
 8005e58:	2101      	movs	r1, #1
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f000 fe8e 	bl	8006b7c <RCCEx_PLL2_Config>
 8005e60:	4603      	mov	r3, r0
 8005e62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005e66:	e004      	b.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e6e:	e000      	b.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005e70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d10a      	bne.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005e7a:	4b7f      	ldr	r3, [pc, #508]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e7e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e88:	4a7b      	ldr	r2, [pc, #492]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e8a:	430b      	orrs	r3, r1
 8005e8c:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e8e:	e003      	b.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005ea4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005eae:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	d039      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ebc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ebe:	2b03      	cmp	r3, #3
 8005ec0:	d81c      	bhi.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005ec2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec8:	08005f05 	.word	0x08005f05
 8005ecc:	08005ed9 	.word	0x08005ed9
 8005ed0:	08005ee7 	.word	0x08005ee7
 8005ed4:	08005f05 	.word	0x08005f05
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ed8:	4b67      	ldr	r3, [pc, #412]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005edc:	4a66      	ldr	r2, [pc, #408]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ede:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ee2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005ee4:	e00f      	b.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eea:	3308      	adds	r3, #8
 8005eec:	2102      	movs	r1, #2
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f000 fe44 	bl	8006b7c <RCCEx_PLL2_Config>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005efa:	e004      	b.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f02:	e000      	b.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005f04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d10a      	bne.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005f0e:	4b5a      	ldr	r3, [pc, #360]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f12:	f023 0103 	bic.w	r1, r3, #3
 8005f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f1c:	4a56      	ldr	r2, [pc, #344]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f1e:	430b      	orrs	r3, r1
 8005f20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005f22:	e003      	b.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f34:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005f38:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005f42:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005f46:	460b      	mov	r3, r1
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	f000 809f 	beq.w	800608c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f4e:	4b4b      	ldr	r3, [pc, #300]	@ (800607c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a4a      	ldr	r2, [pc, #296]	@ (800607c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005f54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f58:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f5a:	f7fb facb 	bl	80014f4 <HAL_GetTick>
 8005f5e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f62:	e00b      	b.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f64:	f7fb fac6 	bl	80014f4 <HAL_GetTick>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	2b64      	cmp	r3, #100	@ 0x64
 8005f72:	d903      	bls.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005f74:	2303      	movs	r3, #3
 8005f76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f7a:	e005      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f7c:	4b3f      	ldr	r3, [pc, #252]	@ (800607c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d0ed      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005f88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d179      	bne.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005f90:	4b39      	ldr	r3, [pc, #228]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f92:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f98:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005f9c:	4053      	eors	r3, r2
 8005f9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d015      	beq.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005fa6:	4b34      	ldr	r3, [pc, #208]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005faa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fae:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005fb2:	4b31      	ldr	r3, [pc, #196]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fb6:	4a30      	ldr	r2, [pc, #192]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fbc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005fbe:	4b2e      	ldr	r3, [pc, #184]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fc2:	4a2d      	ldr	r2, [pc, #180]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fc8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005fca:	4a2b      	ldr	r2, [pc, #172]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fcc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fd0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fd6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005fda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fde:	d118      	bne.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fe0:	f7fb fa88 	bl	80014f4 <HAL_GetTick>
 8005fe4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005fe8:	e00d      	b.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fea:	f7fb fa83 	bl	80014f4 <HAL_GetTick>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005ff4:	1ad2      	subs	r2, r2, r3
 8005ff6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d903      	bls.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8006004:	e005      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006006:	4b1c      	ldr	r3, [pc, #112]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800600a:	f003 0302 	and.w	r3, r3, #2
 800600e:	2b00      	cmp	r3, #0
 8006010:	d0eb      	beq.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006012:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006016:	2b00      	cmp	r3, #0
 8006018:	d129      	bne.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800601a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800601e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006022:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006026:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800602a:	d10e      	bne.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800602c:	4b12      	ldr	r3, [pc, #72]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006038:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800603c:	091a      	lsrs	r2, r3, #4
 800603e:	4b10      	ldr	r3, [pc, #64]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006040:	4013      	ands	r3, r2
 8006042:	4a0d      	ldr	r2, [pc, #52]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006044:	430b      	orrs	r3, r1
 8006046:	6113      	str	r3, [r2, #16]
 8006048:	e005      	b.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800604a:	4b0b      	ldr	r3, [pc, #44]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	4a0a      	ldr	r2, [pc, #40]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006050:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006054:	6113      	str	r3, [r2, #16]
 8006056:	4b08      	ldr	r3, [pc, #32]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006058:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800605a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800605e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006062:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006066:	4a04      	ldr	r2, [pc, #16]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006068:	430b      	orrs	r3, r1
 800606a:	6713      	str	r3, [r2, #112]	@ 0x70
 800606c:	e00e      	b.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800606e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006072:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8006076:	e009      	b.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006078:	58024400 	.word	0x58024400
 800607c:	58024800 	.word	0x58024800
 8006080:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006084:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006088:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800608c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006094:	f002 0301 	and.w	r3, r2, #1
 8006098:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800609c:	2300      	movs	r3, #0
 800609e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80060a2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80060a6:	460b      	mov	r3, r1
 80060a8:	4313      	orrs	r3, r2
 80060aa:	f000 8089 	beq.w	80061c0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80060ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060b4:	2b28      	cmp	r3, #40	@ 0x28
 80060b6:	d86b      	bhi.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80060b8:	a201      	add	r2, pc, #4	@ (adr r2, 80060c0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80060ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060be:	bf00      	nop
 80060c0:	08006199 	.word	0x08006199
 80060c4:	08006191 	.word	0x08006191
 80060c8:	08006191 	.word	0x08006191
 80060cc:	08006191 	.word	0x08006191
 80060d0:	08006191 	.word	0x08006191
 80060d4:	08006191 	.word	0x08006191
 80060d8:	08006191 	.word	0x08006191
 80060dc:	08006191 	.word	0x08006191
 80060e0:	08006165 	.word	0x08006165
 80060e4:	08006191 	.word	0x08006191
 80060e8:	08006191 	.word	0x08006191
 80060ec:	08006191 	.word	0x08006191
 80060f0:	08006191 	.word	0x08006191
 80060f4:	08006191 	.word	0x08006191
 80060f8:	08006191 	.word	0x08006191
 80060fc:	08006191 	.word	0x08006191
 8006100:	0800617b 	.word	0x0800617b
 8006104:	08006191 	.word	0x08006191
 8006108:	08006191 	.word	0x08006191
 800610c:	08006191 	.word	0x08006191
 8006110:	08006191 	.word	0x08006191
 8006114:	08006191 	.word	0x08006191
 8006118:	08006191 	.word	0x08006191
 800611c:	08006191 	.word	0x08006191
 8006120:	08006199 	.word	0x08006199
 8006124:	08006191 	.word	0x08006191
 8006128:	08006191 	.word	0x08006191
 800612c:	08006191 	.word	0x08006191
 8006130:	08006191 	.word	0x08006191
 8006134:	08006191 	.word	0x08006191
 8006138:	08006191 	.word	0x08006191
 800613c:	08006191 	.word	0x08006191
 8006140:	08006199 	.word	0x08006199
 8006144:	08006191 	.word	0x08006191
 8006148:	08006191 	.word	0x08006191
 800614c:	08006191 	.word	0x08006191
 8006150:	08006191 	.word	0x08006191
 8006154:	08006191 	.word	0x08006191
 8006158:	08006191 	.word	0x08006191
 800615c:	08006191 	.word	0x08006191
 8006160:	08006199 	.word	0x08006199
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006164:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006168:	3308      	adds	r3, #8
 800616a:	2101      	movs	r1, #1
 800616c:	4618      	mov	r0, r3
 800616e:	f000 fd05 	bl	8006b7c <RCCEx_PLL2_Config>
 8006172:	4603      	mov	r3, r0
 8006174:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006178:	e00f      	b.n	800619a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800617a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800617e:	3328      	adds	r3, #40	@ 0x28
 8006180:	2101      	movs	r1, #1
 8006182:	4618      	mov	r0, r3
 8006184:	f000 fdac 	bl	8006ce0 <RCCEx_PLL3_Config>
 8006188:	4603      	mov	r3, r0
 800618a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800618e:	e004      	b.n	800619a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006196:	e000      	b.n	800619a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006198:	bf00      	nop
    }

    if (ret == HAL_OK)
 800619a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d10a      	bne.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80061a2:	4bbf      	ldr	r3, [pc, #764]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80061a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061a6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80061aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80061b0:	4abb      	ldr	r2, [pc, #748]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80061b2:	430b      	orrs	r3, r1
 80061b4:	6553      	str	r3, [r2, #84]	@ 0x54
 80061b6:	e003      	b.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80061c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c8:	f002 0302 	and.w	r3, r2, #2
 80061cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80061d0:	2300      	movs	r3, #0
 80061d2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80061d6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80061da:	460b      	mov	r3, r1
 80061dc:	4313      	orrs	r3, r2
 80061de:	d041      	beq.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80061e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80061e6:	2b05      	cmp	r3, #5
 80061e8:	d824      	bhi.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80061ea:	a201      	add	r2, pc, #4	@ (adr r2, 80061f0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80061ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f0:	0800623d 	.word	0x0800623d
 80061f4:	08006209 	.word	0x08006209
 80061f8:	0800621f 	.word	0x0800621f
 80061fc:	0800623d 	.word	0x0800623d
 8006200:	0800623d 	.word	0x0800623d
 8006204:	0800623d 	.word	0x0800623d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006208:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800620c:	3308      	adds	r3, #8
 800620e:	2101      	movs	r1, #1
 8006210:	4618      	mov	r0, r3
 8006212:	f000 fcb3 	bl	8006b7c <RCCEx_PLL2_Config>
 8006216:	4603      	mov	r3, r0
 8006218:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800621c:	e00f      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800621e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006222:	3328      	adds	r3, #40	@ 0x28
 8006224:	2101      	movs	r1, #1
 8006226:	4618      	mov	r0, r3
 8006228:	f000 fd5a 	bl	8006ce0 <RCCEx_PLL3_Config>
 800622c:	4603      	mov	r3, r0
 800622e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006232:	e004      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800623a:	e000      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800623c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800623e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006242:	2b00      	cmp	r3, #0
 8006244:	d10a      	bne.n	800625c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006246:	4b96      	ldr	r3, [pc, #600]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800624a:	f023 0107 	bic.w	r1, r3, #7
 800624e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006252:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006254:	4a92      	ldr	r2, [pc, #584]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006256:	430b      	orrs	r3, r1
 8006258:	6553      	str	r3, [r2, #84]	@ 0x54
 800625a:	e003      	b.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800625c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006260:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006264:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800626c:	f002 0304 	and.w	r3, r2, #4
 8006270:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006274:	2300      	movs	r3, #0
 8006276:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800627a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800627e:	460b      	mov	r3, r1
 8006280:	4313      	orrs	r3, r2
 8006282:	d044      	beq.n	800630e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006284:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006288:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800628c:	2b05      	cmp	r3, #5
 800628e:	d825      	bhi.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006290:	a201      	add	r2, pc, #4	@ (adr r2, 8006298 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006296:	bf00      	nop
 8006298:	080062e5 	.word	0x080062e5
 800629c:	080062b1 	.word	0x080062b1
 80062a0:	080062c7 	.word	0x080062c7
 80062a4:	080062e5 	.word	0x080062e5
 80062a8:	080062e5 	.word	0x080062e5
 80062ac:	080062e5 	.word	0x080062e5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80062b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062b4:	3308      	adds	r3, #8
 80062b6:	2101      	movs	r1, #1
 80062b8:	4618      	mov	r0, r3
 80062ba:	f000 fc5f 	bl	8006b7c <RCCEx_PLL2_Config>
 80062be:	4603      	mov	r3, r0
 80062c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80062c4:	e00f      	b.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80062c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ca:	3328      	adds	r3, #40	@ 0x28
 80062cc:	2101      	movs	r1, #1
 80062ce:	4618      	mov	r0, r3
 80062d0:	f000 fd06 	bl	8006ce0 <RCCEx_PLL3_Config>
 80062d4:	4603      	mov	r3, r0
 80062d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80062da:	e004      	b.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80062e2:	e000      	b.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80062e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d10b      	bne.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80062ee:	4b6c      	ldr	r3, [pc, #432]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80062f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062f2:	f023 0107 	bic.w	r1, r3, #7
 80062f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062fe:	4a68      	ldr	r2, [pc, #416]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006300:	430b      	orrs	r3, r1
 8006302:	6593      	str	r3, [r2, #88]	@ 0x58
 8006304:	e003      	b.n	800630e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006306:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800630a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800630e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006316:	f002 0320 	and.w	r3, r2, #32
 800631a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800631e:	2300      	movs	r3, #0
 8006320:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006324:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006328:	460b      	mov	r3, r1
 800632a:	4313      	orrs	r3, r2
 800632c:	d055      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800632e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006332:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006336:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800633a:	d033      	beq.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800633c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006340:	d82c      	bhi.n	800639c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006342:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006346:	d02f      	beq.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006348:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800634c:	d826      	bhi.n	800639c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800634e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006352:	d02b      	beq.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006354:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006358:	d820      	bhi.n	800639c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800635a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800635e:	d012      	beq.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006360:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006364:	d81a      	bhi.n	800639c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006366:	2b00      	cmp	r3, #0
 8006368:	d022      	beq.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800636a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800636e:	d115      	bne.n	800639c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006374:	3308      	adds	r3, #8
 8006376:	2100      	movs	r1, #0
 8006378:	4618      	mov	r0, r3
 800637a:	f000 fbff 	bl	8006b7c <RCCEx_PLL2_Config>
 800637e:	4603      	mov	r3, r0
 8006380:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006384:	e015      	b.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800638a:	3328      	adds	r3, #40	@ 0x28
 800638c:	2102      	movs	r1, #2
 800638e:	4618      	mov	r0, r3
 8006390:	f000 fca6 	bl	8006ce0 <RCCEx_PLL3_Config>
 8006394:	4603      	mov	r3, r0
 8006396:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800639a:	e00a      	b.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063a2:	e006      	b.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80063a4:	bf00      	nop
 80063a6:	e004      	b.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80063a8:	bf00      	nop
 80063aa:	e002      	b.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80063ac:	bf00      	nop
 80063ae:	e000      	b.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80063b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d10b      	bne.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80063ba:	4b39      	ldr	r3, [pc, #228]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80063bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063be:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80063c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063ca:	4a35      	ldr	r2, [pc, #212]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80063cc:	430b      	orrs	r3, r1
 80063ce:	6553      	str	r3, [r2, #84]	@ 0x54
 80063d0:	e003      	b.n	80063da <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80063da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80063e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80063ea:	2300      	movs	r3, #0
 80063ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80063f0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80063f4:	460b      	mov	r3, r1
 80063f6:	4313      	orrs	r3, r2
 80063f8:	d058      	beq.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80063fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006402:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006406:	d033      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006408:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800640c:	d82c      	bhi.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800640e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006412:	d02f      	beq.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006414:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006418:	d826      	bhi.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800641a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800641e:	d02b      	beq.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006420:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006424:	d820      	bhi.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006426:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800642a:	d012      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800642c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006430:	d81a      	bhi.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006432:	2b00      	cmp	r3, #0
 8006434:	d022      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006436:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800643a:	d115      	bne.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800643c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006440:	3308      	adds	r3, #8
 8006442:	2100      	movs	r1, #0
 8006444:	4618      	mov	r0, r3
 8006446:	f000 fb99 	bl	8006b7c <RCCEx_PLL2_Config>
 800644a:	4603      	mov	r3, r0
 800644c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006450:	e015      	b.n	800647e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006456:	3328      	adds	r3, #40	@ 0x28
 8006458:	2102      	movs	r1, #2
 800645a:	4618      	mov	r0, r3
 800645c:	f000 fc40 	bl	8006ce0 <RCCEx_PLL3_Config>
 8006460:	4603      	mov	r3, r0
 8006462:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006466:	e00a      	b.n	800647e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800646e:	e006      	b.n	800647e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006470:	bf00      	nop
 8006472:	e004      	b.n	800647e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006474:	bf00      	nop
 8006476:	e002      	b.n	800647e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006478:	bf00      	nop
 800647a:	e000      	b.n	800647e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800647c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800647e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006482:	2b00      	cmp	r3, #0
 8006484:	d10e      	bne.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006486:	4b06      	ldr	r3, [pc, #24]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800648a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800648e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006492:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006496:	4a02      	ldr	r2, [pc, #8]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006498:	430b      	orrs	r3, r1
 800649a:	6593      	str	r3, [r2, #88]	@ 0x58
 800649c:	e006      	b.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800649e:	bf00      	nop
 80064a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80064ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80064b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80064bc:	2300      	movs	r3, #0
 80064be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80064c2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80064c6:	460b      	mov	r3, r1
 80064c8:	4313      	orrs	r3, r2
 80064ca:	d055      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80064cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80064d4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80064d8:	d033      	beq.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80064da:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80064de:	d82c      	bhi.n	800653a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80064e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064e4:	d02f      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80064e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064ea:	d826      	bhi.n	800653a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80064ec:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80064f0:	d02b      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80064f2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80064f6:	d820      	bhi.n	800653a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80064f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80064fc:	d012      	beq.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80064fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006502:	d81a      	bhi.n	800653a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006504:	2b00      	cmp	r3, #0
 8006506:	d022      	beq.n	800654e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006508:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800650c:	d115      	bne.n	800653a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800650e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006512:	3308      	adds	r3, #8
 8006514:	2100      	movs	r1, #0
 8006516:	4618      	mov	r0, r3
 8006518:	f000 fb30 	bl	8006b7c <RCCEx_PLL2_Config>
 800651c:	4603      	mov	r3, r0
 800651e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006522:	e015      	b.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006524:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006528:	3328      	adds	r3, #40	@ 0x28
 800652a:	2102      	movs	r1, #2
 800652c:	4618      	mov	r0, r3
 800652e:	f000 fbd7 	bl	8006ce0 <RCCEx_PLL3_Config>
 8006532:	4603      	mov	r3, r0
 8006534:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006538:	e00a      	b.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006540:	e006      	b.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006542:	bf00      	nop
 8006544:	e004      	b.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006546:	bf00      	nop
 8006548:	e002      	b.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800654a:	bf00      	nop
 800654c:	e000      	b.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800654e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006550:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006554:	2b00      	cmp	r3, #0
 8006556:	d10b      	bne.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006558:	4ba1      	ldr	r3, [pc, #644]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800655a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800655c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006560:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006564:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006568:	4a9d      	ldr	r2, [pc, #628]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800656a:	430b      	orrs	r3, r1
 800656c:	6593      	str	r3, [r2, #88]	@ 0x58
 800656e:	e003      	b.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006570:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006574:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800657c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006580:	f002 0308 	and.w	r3, r2, #8
 8006584:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006588:	2300      	movs	r3, #0
 800658a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800658e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006592:	460b      	mov	r3, r1
 8006594:	4313      	orrs	r3, r2
 8006596:	d01e      	beq.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006598:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800659c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065a4:	d10c      	bne.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80065a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065aa:	3328      	adds	r3, #40	@ 0x28
 80065ac:	2102      	movs	r1, #2
 80065ae:	4618      	mov	r0, r3
 80065b0:	f000 fb96 	bl	8006ce0 <RCCEx_PLL3_Config>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d002      	beq.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80065c0:	4b87      	ldr	r3, [pc, #540]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065c4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80065c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065d0:	4a83      	ldr	r2, [pc, #524]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065d2:	430b      	orrs	r3, r1
 80065d4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80065d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065de:	f002 0310 	and.w	r3, r2, #16
 80065e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80065e6:	2300      	movs	r3, #0
 80065e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80065ec:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80065f0:	460b      	mov	r3, r1
 80065f2:	4313      	orrs	r3, r2
 80065f4:	d01e      	beq.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80065f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80065fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006602:	d10c      	bne.n	800661e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006604:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006608:	3328      	adds	r3, #40	@ 0x28
 800660a:	2102      	movs	r1, #2
 800660c:	4618      	mov	r0, r3
 800660e:	f000 fb67 	bl	8006ce0 <RCCEx_PLL3_Config>
 8006612:	4603      	mov	r3, r0
 8006614:	2b00      	cmp	r3, #0
 8006616:	d002      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800661e:	4b70      	ldr	r3, [pc, #448]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006622:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800662a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800662e:	4a6c      	ldr	r2, [pc, #432]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006630:	430b      	orrs	r3, r1
 8006632:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006640:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006644:	2300      	movs	r3, #0
 8006646:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800664a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800664e:	460b      	mov	r3, r1
 8006650:	4313      	orrs	r3, r2
 8006652:	d03e      	beq.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006654:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006658:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800665c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006660:	d022      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006662:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006666:	d81b      	bhi.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006668:	2b00      	cmp	r3, #0
 800666a:	d003      	beq.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800666c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006670:	d00b      	beq.n	800668a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006672:	e015      	b.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006674:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006678:	3308      	adds	r3, #8
 800667a:	2100      	movs	r1, #0
 800667c:	4618      	mov	r0, r3
 800667e:	f000 fa7d 	bl	8006b7c <RCCEx_PLL2_Config>
 8006682:	4603      	mov	r3, r0
 8006684:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006688:	e00f      	b.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800668a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800668e:	3328      	adds	r3, #40	@ 0x28
 8006690:	2102      	movs	r1, #2
 8006692:	4618      	mov	r0, r3
 8006694:	f000 fb24 	bl	8006ce0 <RCCEx_PLL3_Config>
 8006698:	4603      	mov	r3, r0
 800669a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800669e:	e004      	b.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80066a6:	e000      	b.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80066a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d10b      	bne.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80066b2:	4b4b      	ldr	r3, [pc, #300]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066b6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80066ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80066c2:	4a47      	ldr	r2, [pc, #284]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066c4:	430b      	orrs	r3, r1
 80066c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80066c8:	e003      	b.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80066d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066da:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80066de:	67bb      	str	r3, [r7, #120]	@ 0x78
 80066e0:	2300      	movs	r3, #0
 80066e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80066e4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80066e8:	460b      	mov	r3, r1
 80066ea:	4313      	orrs	r3, r2
 80066ec:	d03b      	beq.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80066ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066f6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80066fa:	d01f      	beq.n	800673c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80066fc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006700:	d818      	bhi.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006702:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006706:	d003      	beq.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006708:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800670c:	d007      	beq.n	800671e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800670e:	e011      	b.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006710:	4b33      	ldr	r3, [pc, #204]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006714:	4a32      	ldr	r2, [pc, #200]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006716:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800671a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800671c:	e00f      	b.n	800673e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800671e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006722:	3328      	adds	r3, #40	@ 0x28
 8006724:	2101      	movs	r1, #1
 8006726:	4618      	mov	r0, r3
 8006728:	f000 fada 	bl	8006ce0 <RCCEx_PLL3_Config>
 800672c:	4603      	mov	r3, r0
 800672e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006732:	e004      	b.n	800673e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800673a:	e000      	b.n	800673e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800673c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800673e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006742:	2b00      	cmp	r3, #0
 8006744:	d10b      	bne.n	800675e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006746:	4b26      	ldr	r3, [pc, #152]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800674a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800674e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006756:	4a22      	ldr	r2, [pc, #136]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006758:	430b      	orrs	r3, r1
 800675a:	6553      	str	r3, [r2, #84]	@ 0x54
 800675c:	e003      	b.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800675e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006762:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800676a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800676e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006772:	673b      	str	r3, [r7, #112]	@ 0x70
 8006774:	2300      	movs	r3, #0
 8006776:	677b      	str	r3, [r7, #116]	@ 0x74
 8006778:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800677c:	460b      	mov	r3, r1
 800677e:	4313      	orrs	r3, r2
 8006780:	d034      	beq.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006786:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006788:	2b00      	cmp	r3, #0
 800678a:	d003      	beq.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800678c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006790:	d007      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006792:	e011      	b.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006794:	4b12      	ldr	r3, [pc, #72]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006798:	4a11      	ldr	r2, [pc, #68]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800679a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800679e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80067a0:	e00e      	b.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80067a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067a6:	3308      	adds	r3, #8
 80067a8:	2102      	movs	r1, #2
 80067aa:	4618      	mov	r0, r3
 80067ac:	f000 f9e6 	bl	8006b7c <RCCEx_PLL2_Config>
 80067b0:	4603      	mov	r3, r0
 80067b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80067b6:	e003      	b.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80067be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d10d      	bne.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80067c8:	4b05      	ldr	r3, [pc, #20]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067cc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80067d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067d6:	4a02      	ldr	r2, [pc, #8]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067d8:	430b      	orrs	r3, r1
 80067da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80067dc:	e006      	b.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80067de:	bf00      	nop
 80067e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80067ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80067f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80067fa:	2300      	movs	r3, #0
 80067fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80067fe:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006802:	460b      	mov	r3, r1
 8006804:	4313      	orrs	r3, r2
 8006806:	d00c      	beq.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800680c:	3328      	adds	r3, #40	@ 0x28
 800680e:	2102      	movs	r1, #2
 8006810:	4618      	mov	r0, r3
 8006812:	f000 fa65 	bl	8006ce0 <RCCEx_PLL3_Config>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d002      	beq.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800682a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800682e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006830:	2300      	movs	r3, #0
 8006832:	667b      	str	r3, [r7, #100]	@ 0x64
 8006834:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006838:	460b      	mov	r3, r1
 800683a:	4313      	orrs	r3, r2
 800683c:	d038      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800683e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006842:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006846:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800684a:	d018      	beq.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800684c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006850:	d811      	bhi.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006852:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006856:	d014      	beq.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006858:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800685c:	d80b      	bhi.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800685e:	2b00      	cmp	r3, #0
 8006860:	d011      	beq.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006862:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006866:	d106      	bne.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006868:	4bc3      	ldr	r3, [pc, #780]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800686a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800686c:	4ac2      	ldr	r2, [pc, #776]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800686e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006872:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006874:	e008      	b.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800687c:	e004      	b.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800687e:	bf00      	nop
 8006880:	e002      	b.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006882:	bf00      	nop
 8006884:	e000      	b.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006886:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006888:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800688c:	2b00      	cmp	r3, #0
 800688e:	d10b      	bne.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006890:	4bb9      	ldr	r3, [pc, #740]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006892:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006894:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800689c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068a0:	4ab5      	ldr	r2, [pc, #724]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068a2:	430b      	orrs	r3, r1
 80068a4:	6553      	str	r3, [r2, #84]	@ 0x54
 80068a6:	e003      	b.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80068b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80068bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80068be:	2300      	movs	r3, #0
 80068c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80068c2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80068c6:	460b      	mov	r3, r1
 80068c8:	4313      	orrs	r3, r2
 80068ca:	d009      	beq.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80068cc:	4baa      	ldr	r3, [pc, #680]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068d0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80068d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068da:	4aa7      	ldr	r2, [pc, #668]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068dc:	430b      	orrs	r3, r1
 80068de:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80068e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80068ec:	653b      	str	r3, [r7, #80]	@ 0x50
 80068ee:	2300      	movs	r3, #0
 80068f0:	657b      	str	r3, [r7, #84]	@ 0x54
 80068f2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80068f6:	460b      	mov	r3, r1
 80068f8:	4313      	orrs	r3, r2
 80068fa:	d00a      	beq.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80068fc:	4b9e      	ldr	r3, [pc, #632]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006904:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006908:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800690c:	4a9a      	ldr	r2, [pc, #616]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800690e:	430b      	orrs	r3, r1
 8006910:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800691a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800691e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006920:	2300      	movs	r3, #0
 8006922:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006924:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006928:	460b      	mov	r3, r1
 800692a:	4313      	orrs	r3, r2
 800692c:	d009      	beq.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800692e:	4b92      	ldr	r3, [pc, #584]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006930:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006932:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800693a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800693c:	4a8e      	ldr	r2, [pc, #568]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800693e:	430b      	orrs	r3, r1
 8006940:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800694a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800694e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006950:	2300      	movs	r3, #0
 8006952:	647b      	str	r3, [r7, #68]	@ 0x44
 8006954:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006958:	460b      	mov	r3, r1
 800695a:	4313      	orrs	r3, r2
 800695c:	d00e      	beq.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800695e:	4b86      	ldr	r3, [pc, #536]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	4a85      	ldr	r2, [pc, #532]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006964:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006968:	6113      	str	r3, [r2, #16]
 800696a:	4b83      	ldr	r3, [pc, #524]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800696c:	6919      	ldr	r1, [r3, #16]
 800696e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006972:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006976:	4a80      	ldr	r2, [pc, #512]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006978:	430b      	orrs	r3, r1
 800697a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800697c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006984:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006988:	63bb      	str	r3, [r7, #56]	@ 0x38
 800698a:	2300      	movs	r3, #0
 800698c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800698e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006992:	460b      	mov	r3, r1
 8006994:	4313      	orrs	r3, r2
 8006996:	d009      	beq.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006998:	4b77      	ldr	r3, [pc, #476]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800699a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800699c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80069a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069a6:	4a74      	ldr	r2, [pc, #464]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069a8:	430b      	orrs	r3, r1
 80069aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80069ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80069b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80069ba:	2300      	movs	r3, #0
 80069bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80069be:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80069c2:	460b      	mov	r3, r1
 80069c4:	4313      	orrs	r3, r2
 80069c6:	d00a      	beq.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80069c8:	4b6b      	ldr	r3, [pc, #428]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069cc:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80069d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80069d8:	4a67      	ldr	r2, [pc, #412]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069da:	430b      	orrs	r3, r1
 80069dc:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80069de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e6:	2100      	movs	r1, #0
 80069e8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80069ea:	f003 0301 	and.w	r3, r3, #1
 80069ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069f0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80069f4:	460b      	mov	r3, r1
 80069f6:	4313      	orrs	r3, r2
 80069f8:	d011      	beq.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069fe:	3308      	adds	r3, #8
 8006a00:	2100      	movs	r1, #0
 8006a02:	4618      	mov	r0, r3
 8006a04:	f000 f8ba 	bl	8006b7c <RCCEx_PLL2_Config>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006a0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d003      	beq.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a26:	2100      	movs	r1, #0
 8006a28:	6239      	str	r1, [r7, #32]
 8006a2a:	f003 0302 	and.w	r3, r3, #2
 8006a2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a30:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006a34:	460b      	mov	r3, r1
 8006a36:	4313      	orrs	r3, r2
 8006a38:	d011      	beq.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a3e:	3308      	adds	r3, #8
 8006a40:	2101      	movs	r1, #1
 8006a42:	4618      	mov	r0, r3
 8006a44:	f000 f89a 	bl	8006b7c <RCCEx_PLL2_Config>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006a4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d003      	beq.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a66:	2100      	movs	r1, #0
 8006a68:	61b9      	str	r1, [r7, #24]
 8006a6a:	f003 0304 	and.w	r3, r3, #4
 8006a6e:	61fb      	str	r3, [r7, #28]
 8006a70:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006a74:	460b      	mov	r3, r1
 8006a76:	4313      	orrs	r3, r2
 8006a78:	d011      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a7e:	3308      	adds	r3, #8
 8006a80:	2102      	movs	r1, #2
 8006a82:	4618      	mov	r0, r3
 8006a84:	f000 f87a 	bl	8006b7c <RCCEx_PLL2_Config>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006a8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d003      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa6:	2100      	movs	r1, #0
 8006aa8:	6139      	str	r1, [r7, #16]
 8006aaa:	f003 0308 	and.w	r3, r3, #8
 8006aae:	617b      	str	r3, [r7, #20]
 8006ab0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	d011      	beq.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006abe:	3328      	adds	r3, #40	@ 0x28
 8006ac0:	2100      	movs	r1, #0
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f000 f90c 	bl	8006ce0 <RCCEx_PLL3_Config>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006ace:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d003      	beq.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ad6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ada:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae6:	2100      	movs	r1, #0
 8006ae8:	60b9      	str	r1, [r7, #8]
 8006aea:	f003 0310 	and.w	r3, r3, #16
 8006aee:	60fb      	str	r3, [r7, #12]
 8006af0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006af4:	460b      	mov	r3, r1
 8006af6:	4313      	orrs	r3, r2
 8006af8:	d011      	beq.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006afe:	3328      	adds	r3, #40	@ 0x28
 8006b00:	2101      	movs	r1, #1
 8006b02:	4618      	mov	r0, r3
 8006b04:	f000 f8ec 	bl	8006ce0 <RCCEx_PLL3_Config>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006b0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d003      	beq.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b26:	2100      	movs	r1, #0
 8006b28:	6039      	str	r1, [r7, #0]
 8006b2a:	f003 0320 	and.w	r3, r3, #32
 8006b2e:	607b      	str	r3, [r7, #4]
 8006b30:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006b34:	460b      	mov	r3, r1
 8006b36:	4313      	orrs	r3, r2
 8006b38:	d011      	beq.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b3e:	3328      	adds	r3, #40	@ 0x28
 8006b40:	2102      	movs	r1, #2
 8006b42:	4618      	mov	r0, r3
 8006b44:	f000 f8cc 	bl	8006ce0 <RCCEx_PLL3_Config>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006b4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d003      	beq.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006b5e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d101      	bne.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006b66:	2300      	movs	r3, #0
 8006b68:	e000      	b.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006b72:	46bd      	mov	sp, r7
 8006b74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b78:	58024400 	.word	0x58024400

08006b7c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b86:	2300      	movs	r3, #0
 8006b88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006b8a:	4b53      	ldr	r3, [pc, #332]	@ (8006cd8 <RCCEx_PLL2_Config+0x15c>)
 8006b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b8e:	f003 0303 	and.w	r3, r3, #3
 8006b92:	2b03      	cmp	r3, #3
 8006b94:	d101      	bne.n	8006b9a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e099      	b.n	8006cce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006b9a:	4b4f      	ldr	r3, [pc, #316]	@ (8006cd8 <RCCEx_PLL2_Config+0x15c>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a4e      	ldr	r2, [pc, #312]	@ (8006cd8 <RCCEx_PLL2_Config+0x15c>)
 8006ba0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006ba4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ba6:	f7fa fca5 	bl	80014f4 <HAL_GetTick>
 8006baa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006bac:	e008      	b.n	8006bc0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006bae:	f7fa fca1 	bl	80014f4 <HAL_GetTick>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	1ad3      	subs	r3, r2, r3
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	d901      	bls.n	8006bc0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	e086      	b.n	8006cce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006bc0:	4b45      	ldr	r3, [pc, #276]	@ (8006cd8 <RCCEx_PLL2_Config+0x15c>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d1f0      	bne.n	8006bae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006bcc:	4b42      	ldr	r3, [pc, #264]	@ (8006cd8 <RCCEx_PLL2_Config+0x15c>)
 8006bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bd0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	031b      	lsls	r3, r3, #12
 8006bda:	493f      	ldr	r1, [pc, #252]	@ (8006cd8 <RCCEx_PLL2_Config+0x15c>)
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	628b      	str	r3, [r1, #40]	@ 0x28
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	3b01      	subs	r3, #1
 8006be6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	025b      	lsls	r3, r3, #9
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	431a      	orrs	r2, r3
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	3b01      	subs	r3, #1
 8006bfc:	041b      	lsls	r3, r3, #16
 8006bfe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006c02:	431a      	orrs	r2, r3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	691b      	ldr	r3, [r3, #16]
 8006c08:	3b01      	subs	r3, #1
 8006c0a:	061b      	lsls	r3, r3, #24
 8006c0c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006c10:	4931      	ldr	r1, [pc, #196]	@ (8006cd8 <RCCEx_PLL2_Config+0x15c>)
 8006c12:	4313      	orrs	r3, r2
 8006c14:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006c16:	4b30      	ldr	r3, [pc, #192]	@ (8006cd8 <RCCEx_PLL2_Config+0x15c>)
 8006c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c1a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	695b      	ldr	r3, [r3, #20]
 8006c22:	492d      	ldr	r1, [pc, #180]	@ (8006cd8 <RCCEx_PLL2_Config+0x15c>)
 8006c24:	4313      	orrs	r3, r2
 8006c26:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006c28:	4b2b      	ldr	r3, [pc, #172]	@ (8006cd8 <RCCEx_PLL2_Config+0x15c>)
 8006c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c2c:	f023 0220 	bic.w	r2, r3, #32
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	699b      	ldr	r3, [r3, #24]
 8006c34:	4928      	ldr	r1, [pc, #160]	@ (8006cd8 <RCCEx_PLL2_Config+0x15c>)
 8006c36:	4313      	orrs	r3, r2
 8006c38:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006c3a:	4b27      	ldr	r3, [pc, #156]	@ (8006cd8 <RCCEx_PLL2_Config+0x15c>)
 8006c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c3e:	4a26      	ldr	r2, [pc, #152]	@ (8006cd8 <RCCEx_PLL2_Config+0x15c>)
 8006c40:	f023 0310 	bic.w	r3, r3, #16
 8006c44:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006c46:	4b24      	ldr	r3, [pc, #144]	@ (8006cd8 <RCCEx_PLL2_Config+0x15c>)
 8006c48:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c4a:	4b24      	ldr	r3, [pc, #144]	@ (8006cdc <RCCEx_PLL2_Config+0x160>)
 8006c4c:	4013      	ands	r3, r2
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	69d2      	ldr	r2, [r2, #28]
 8006c52:	00d2      	lsls	r2, r2, #3
 8006c54:	4920      	ldr	r1, [pc, #128]	@ (8006cd8 <RCCEx_PLL2_Config+0x15c>)
 8006c56:	4313      	orrs	r3, r2
 8006c58:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006c5a:	4b1f      	ldr	r3, [pc, #124]	@ (8006cd8 <RCCEx_PLL2_Config+0x15c>)
 8006c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c5e:	4a1e      	ldr	r2, [pc, #120]	@ (8006cd8 <RCCEx_PLL2_Config+0x15c>)
 8006c60:	f043 0310 	orr.w	r3, r3, #16
 8006c64:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d106      	bne.n	8006c7a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006c6c:	4b1a      	ldr	r3, [pc, #104]	@ (8006cd8 <RCCEx_PLL2_Config+0x15c>)
 8006c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c70:	4a19      	ldr	r2, [pc, #100]	@ (8006cd8 <RCCEx_PLL2_Config+0x15c>)
 8006c72:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006c76:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006c78:	e00f      	b.n	8006c9a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d106      	bne.n	8006c8e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006c80:	4b15      	ldr	r3, [pc, #84]	@ (8006cd8 <RCCEx_PLL2_Config+0x15c>)
 8006c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c84:	4a14      	ldr	r2, [pc, #80]	@ (8006cd8 <RCCEx_PLL2_Config+0x15c>)
 8006c86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c8a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006c8c:	e005      	b.n	8006c9a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006c8e:	4b12      	ldr	r3, [pc, #72]	@ (8006cd8 <RCCEx_PLL2_Config+0x15c>)
 8006c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c92:	4a11      	ldr	r2, [pc, #68]	@ (8006cd8 <RCCEx_PLL2_Config+0x15c>)
 8006c94:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006c98:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006c9a:	4b0f      	ldr	r3, [pc, #60]	@ (8006cd8 <RCCEx_PLL2_Config+0x15c>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a0e      	ldr	r2, [pc, #56]	@ (8006cd8 <RCCEx_PLL2_Config+0x15c>)
 8006ca0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006ca4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ca6:	f7fa fc25 	bl	80014f4 <HAL_GetTick>
 8006caa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006cac:	e008      	b.n	8006cc0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006cae:	f7fa fc21 	bl	80014f4 <HAL_GetTick>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	1ad3      	subs	r3, r2, r3
 8006cb8:	2b02      	cmp	r3, #2
 8006cba:	d901      	bls.n	8006cc0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	e006      	b.n	8006cce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006cc0:	4b05      	ldr	r3, [pc, #20]	@ (8006cd8 <RCCEx_PLL2_Config+0x15c>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d0f0      	beq.n	8006cae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3710      	adds	r7, #16
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	58024400 	.word	0x58024400
 8006cdc:	ffff0007 	.word	0xffff0007

08006ce0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006cea:	2300      	movs	r3, #0
 8006cec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006cee:	4b53      	ldr	r3, [pc, #332]	@ (8006e3c <RCCEx_PLL3_Config+0x15c>)
 8006cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cf2:	f003 0303 	and.w	r3, r3, #3
 8006cf6:	2b03      	cmp	r3, #3
 8006cf8:	d101      	bne.n	8006cfe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e099      	b.n	8006e32 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006cfe:	4b4f      	ldr	r3, [pc, #316]	@ (8006e3c <RCCEx_PLL3_Config+0x15c>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a4e      	ldr	r2, [pc, #312]	@ (8006e3c <RCCEx_PLL3_Config+0x15c>)
 8006d04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d0a:	f7fa fbf3 	bl	80014f4 <HAL_GetTick>
 8006d0e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006d10:	e008      	b.n	8006d24 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006d12:	f7fa fbef 	bl	80014f4 <HAL_GetTick>
 8006d16:	4602      	mov	r2, r0
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	1ad3      	subs	r3, r2, r3
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d901      	bls.n	8006d24 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006d20:	2303      	movs	r3, #3
 8006d22:	e086      	b.n	8006e32 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006d24:	4b45      	ldr	r3, [pc, #276]	@ (8006e3c <RCCEx_PLL3_Config+0x15c>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d1f0      	bne.n	8006d12 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006d30:	4b42      	ldr	r3, [pc, #264]	@ (8006e3c <RCCEx_PLL3_Config+0x15c>)
 8006d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d34:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	051b      	lsls	r3, r3, #20
 8006d3e:	493f      	ldr	r1, [pc, #252]	@ (8006e3c <RCCEx_PLL3_Config+0x15c>)
 8006d40:	4313      	orrs	r3, r2
 8006d42:	628b      	str	r3, [r1, #40]	@ 0x28
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	3b01      	subs	r3, #1
 8006d4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	3b01      	subs	r3, #1
 8006d54:	025b      	lsls	r3, r3, #9
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	431a      	orrs	r2, r3
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	3b01      	subs	r3, #1
 8006d60:	041b      	lsls	r3, r3, #16
 8006d62:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006d66:	431a      	orrs	r2, r3
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	061b      	lsls	r3, r3, #24
 8006d70:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006d74:	4931      	ldr	r1, [pc, #196]	@ (8006e3c <RCCEx_PLL3_Config+0x15c>)
 8006d76:	4313      	orrs	r3, r2
 8006d78:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006d7a:	4b30      	ldr	r3, [pc, #192]	@ (8006e3c <RCCEx_PLL3_Config+0x15c>)
 8006d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d7e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	492d      	ldr	r1, [pc, #180]	@ (8006e3c <RCCEx_PLL3_Config+0x15c>)
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006d8c:	4b2b      	ldr	r3, [pc, #172]	@ (8006e3c <RCCEx_PLL3_Config+0x15c>)
 8006d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d90:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	699b      	ldr	r3, [r3, #24]
 8006d98:	4928      	ldr	r1, [pc, #160]	@ (8006e3c <RCCEx_PLL3_Config+0x15c>)
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006d9e:	4b27      	ldr	r3, [pc, #156]	@ (8006e3c <RCCEx_PLL3_Config+0x15c>)
 8006da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006da2:	4a26      	ldr	r2, [pc, #152]	@ (8006e3c <RCCEx_PLL3_Config+0x15c>)
 8006da4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006da8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006daa:	4b24      	ldr	r3, [pc, #144]	@ (8006e3c <RCCEx_PLL3_Config+0x15c>)
 8006dac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006dae:	4b24      	ldr	r3, [pc, #144]	@ (8006e40 <RCCEx_PLL3_Config+0x160>)
 8006db0:	4013      	ands	r3, r2
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	69d2      	ldr	r2, [r2, #28]
 8006db6:	00d2      	lsls	r2, r2, #3
 8006db8:	4920      	ldr	r1, [pc, #128]	@ (8006e3c <RCCEx_PLL3_Config+0x15c>)
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006dbe:	4b1f      	ldr	r3, [pc, #124]	@ (8006e3c <RCCEx_PLL3_Config+0x15c>)
 8006dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dc2:	4a1e      	ldr	r2, [pc, #120]	@ (8006e3c <RCCEx_PLL3_Config+0x15c>)
 8006dc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006dc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d106      	bne.n	8006dde <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006dd0:	4b1a      	ldr	r3, [pc, #104]	@ (8006e3c <RCCEx_PLL3_Config+0x15c>)
 8006dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dd4:	4a19      	ldr	r2, [pc, #100]	@ (8006e3c <RCCEx_PLL3_Config+0x15c>)
 8006dd6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006dda:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006ddc:	e00f      	b.n	8006dfe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d106      	bne.n	8006df2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006de4:	4b15      	ldr	r3, [pc, #84]	@ (8006e3c <RCCEx_PLL3_Config+0x15c>)
 8006de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006de8:	4a14      	ldr	r2, [pc, #80]	@ (8006e3c <RCCEx_PLL3_Config+0x15c>)
 8006dea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006dee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006df0:	e005      	b.n	8006dfe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006df2:	4b12      	ldr	r3, [pc, #72]	@ (8006e3c <RCCEx_PLL3_Config+0x15c>)
 8006df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006df6:	4a11      	ldr	r2, [pc, #68]	@ (8006e3c <RCCEx_PLL3_Config+0x15c>)
 8006df8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006dfc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006dfe:	4b0f      	ldr	r3, [pc, #60]	@ (8006e3c <RCCEx_PLL3_Config+0x15c>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a0e      	ldr	r2, [pc, #56]	@ (8006e3c <RCCEx_PLL3_Config+0x15c>)
 8006e04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e0a:	f7fa fb73 	bl	80014f4 <HAL_GetTick>
 8006e0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006e10:	e008      	b.n	8006e24 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006e12:	f7fa fb6f 	bl	80014f4 <HAL_GetTick>
 8006e16:	4602      	mov	r2, r0
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	1ad3      	subs	r3, r2, r3
 8006e1c:	2b02      	cmp	r3, #2
 8006e1e:	d901      	bls.n	8006e24 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006e20:	2303      	movs	r3, #3
 8006e22:	e006      	b.n	8006e32 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006e24:	4b05      	ldr	r3, [pc, #20]	@ (8006e3c <RCCEx_PLL3_Config+0x15c>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d0f0      	beq.n	8006e12 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3710      	adds	r7, #16
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	58024400 	.word	0x58024400
 8006e40:	ffff0007 	.word	0xffff0007

08006e44 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d101      	bne.n	8006e56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	e10f      	b.n	8007076 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a87      	ldr	r2, [pc, #540]	@ (8007080 <HAL_SPI_Init+0x23c>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d00f      	beq.n	8006e86 <HAL_SPI_Init+0x42>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a86      	ldr	r2, [pc, #536]	@ (8007084 <HAL_SPI_Init+0x240>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d00a      	beq.n	8006e86 <HAL_SPI_Init+0x42>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a84      	ldr	r2, [pc, #528]	@ (8007088 <HAL_SPI_Init+0x244>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d005      	beq.n	8006e86 <HAL_SPI_Init+0x42>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	2b0f      	cmp	r3, #15
 8006e80:	d901      	bls.n	8006e86 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	e0f7      	b.n	8007076 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f001 fd84 	bl	8008994 <SPI_GetPacketSize>
 8006e8c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a7b      	ldr	r2, [pc, #492]	@ (8007080 <HAL_SPI_Init+0x23c>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d00c      	beq.n	8006eb2 <HAL_SPI_Init+0x6e>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a79      	ldr	r2, [pc, #484]	@ (8007084 <HAL_SPI_Init+0x240>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d007      	beq.n	8006eb2 <HAL_SPI_Init+0x6e>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a78      	ldr	r2, [pc, #480]	@ (8007088 <HAL_SPI_Init+0x244>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d002      	beq.n	8006eb2 <HAL_SPI_Init+0x6e>
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2b08      	cmp	r3, #8
 8006eb0:	d811      	bhi.n	8006ed6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006eb6:	4a72      	ldr	r2, [pc, #456]	@ (8007080 <HAL_SPI_Init+0x23c>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d009      	beq.n	8006ed0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a70      	ldr	r2, [pc, #448]	@ (8007084 <HAL_SPI_Init+0x240>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d004      	beq.n	8006ed0 <HAL_SPI_Init+0x8c>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a6f      	ldr	r2, [pc, #444]	@ (8007088 <HAL_SPI_Init+0x244>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d104      	bne.n	8006eda <HAL_SPI_Init+0x96>
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2b10      	cmp	r3, #16
 8006ed4:	d901      	bls.n	8006eda <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e0cd      	b.n	8007076 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d106      	bne.n	8006ef4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f7fa f874 	bl	8000fdc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2202      	movs	r2, #2
 8006ef8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f022 0201 	bic.w	r2, r2, #1
 8006f0a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8006f16:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	699b      	ldr	r3, [r3, #24]
 8006f1c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006f20:	d119      	bne.n	8006f56 <HAL_SPI_Init+0x112>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f2a:	d103      	bne.n	8006f34 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d008      	beq.n	8006f46 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d10c      	bne.n	8006f56 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006f40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f44:	d107      	bne.n	8006f56 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006f54:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d00f      	beq.n	8006f82 <HAL_SPI_Init+0x13e>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	68db      	ldr	r3, [r3, #12]
 8006f66:	2b06      	cmp	r3, #6
 8006f68:	d90b      	bls.n	8006f82 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	430a      	orrs	r2, r1
 8006f7e:	601a      	str	r2, [r3, #0]
 8006f80:	e007      	b.n	8006f92 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006f90:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	69da      	ldr	r2, [r3, #28]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f9a:	431a      	orrs	r2, r3
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	431a      	orrs	r2, r3
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fa4:	ea42 0103 	orr.w	r1, r2, r3
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	68da      	ldr	r2, [r3, #12]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	430a      	orrs	r2, r1
 8006fb2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fbc:	431a      	orrs	r2, r3
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fc2:	431a      	orrs	r2, r3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	699b      	ldr	r3, [r3, #24]
 8006fc8:	431a      	orrs	r2, r3
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	691b      	ldr	r3, [r3, #16]
 8006fce:	431a      	orrs	r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	695b      	ldr	r3, [r3, #20]
 8006fd4:	431a      	orrs	r2, r3
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a1b      	ldr	r3, [r3, #32]
 8006fda:	431a      	orrs	r2, r3
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	431a      	orrs	r2, r3
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fe6:	431a      	orrs	r2, r3
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	431a      	orrs	r2, r3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ff2:	ea42 0103 	orr.w	r1, r2, r3
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	430a      	orrs	r2, r1
 8007000:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d113      	bne.n	8007032 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800701c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007030:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f022 0201 	bic.w	r2, r2, #1
 8007040:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00a      	beq.n	8007064 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	430a      	orrs	r2, r1
 8007062:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2201      	movs	r2, #1
 8007070:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	3710      	adds	r7, #16
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop
 8007080:	40013000 	.word	0x40013000
 8007084:	40003800 	.word	0x40003800
 8007088:	40003c00 	.word	0x40003c00

0800708c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b088      	sub	sp, #32
 8007090:	af02      	add	r7, sp, #8
 8007092:	60f8      	str	r0, [r7, #12]
 8007094:	60b9      	str	r1, [r7, #8]
 8007096:	603b      	str	r3, [r7, #0]
 8007098:	4613      	mov	r3, r2
 800709a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	3320      	adds	r3, #32
 80070a2:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80070a4:	f7fa fa26 	bl	80014f4 <HAL_GetTick>
 80070a8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d001      	beq.n	80070ba <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80070b6:	2302      	movs	r3, #2
 80070b8:	e1d1      	b.n	800745e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d002      	beq.n	80070c6 <HAL_SPI_Transmit+0x3a>
 80070c0:	88fb      	ldrh	r3, [r7, #6]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d101      	bne.n	80070ca <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	e1c9      	b.n	800745e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d101      	bne.n	80070d8 <HAL_SPI_Transmit+0x4c>
 80070d4:	2302      	movs	r3, #2
 80070d6:	e1c2      	b.n	800745e <HAL_SPI_Transmit+0x3d2>
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2201      	movs	r2, #1
 80070dc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2203      	movs	r2, #3
 80070e4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	68ba      	ldr	r2, [r7, #8]
 80070f4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	88fa      	ldrh	r2, [r7, #6]
 80070fa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	88fa      	ldrh	r2, [r7, #6]
 8007102:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2200      	movs	r2, #0
 8007110:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2200      	movs	r2, #0
 8007118:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2200      	movs	r2, #0
 8007120:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2200      	movs	r2, #0
 8007126:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007130:	d108      	bne.n	8007144 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007140:	601a      	str	r2, [r3, #0]
 8007142:	e009      	b.n	8007158 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	68db      	ldr	r3, [r3, #12]
 800714a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007156:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	685a      	ldr	r2, [r3, #4]
 800715e:	4b96      	ldr	r3, [pc, #600]	@ (80073b8 <HAL_SPI_Transmit+0x32c>)
 8007160:	4013      	ands	r3, r2
 8007162:	88f9      	ldrh	r1, [r7, #6]
 8007164:	68fa      	ldr	r2, [r7, #12]
 8007166:	6812      	ldr	r2, [r2, #0]
 8007168:	430b      	orrs	r3, r1
 800716a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f042 0201 	orr.w	r2, r2, #1
 800717a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007184:	d107      	bne.n	8007196 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007194:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	2b0f      	cmp	r3, #15
 800719c:	d947      	bls.n	800722e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800719e:	e03f      	b.n	8007220 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	695b      	ldr	r3, [r3, #20]
 80071a6:	f003 0302 	and.w	r3, r3, #2
 80071aa:	2b02      	cmp	r3, #2
 80071ac:	d114      	bne.n	80071d8 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	6812      	ldr	r2, [r2, #0]
 80071b8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071be:	1d1a      	adds	r2, r3, #4
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	3b01      	subs	r3, #1
 80071ce:	b29a      	uxth	r2, r3
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80071d6:	e023      	b.n	8007220 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071d8:	f7fa f98c 	bl	80014f4 <HAL_GetTick>
 80071dc:	4602      	mov	r2, r0
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	1ad3      	subs	r3, r2, r3
 80071e2:	683a      	ldr	r2, [r7, #0]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d803      	bhi.n	80071f0 <HAL_SPI_Transmit+0x164>
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ee:	d102      	bne.n	80071f6 <HAL_SPI_Transmit+0x16a>
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d114      	bne.n	8007220 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80071f6:	68f8      	ldr	r0, [r7, #12]
 80071f8:	f001 fafe 	bl	80087f8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007202:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2201      	movs	r2, #1
 8007210:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2200      	movs	r2, #0
 8007218:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800721c:	2303      	movs	r3, #3
 800721e:	e11e      	b.n	800745e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007226:	b29b      	uxth	r3, r3
 8007228:	2b00      	cmp	r3, #0
 800722a:	d1b9      	bne.n	80071a0 <HAL_SPI_Transmit+0x114>
 800722c:	e0f1      	b.n	8007412 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	2b07      	cmp	r3, #7
 8007234:	f240 80e6 	bls.w	8007404 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007238:	e05d      	b.n	80072f6 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	695b      	ldr	r3, [r3, #20]
 8007240:	f003 0302 	and.w	r3, r3, #2
 8007244:	2b02      	cmp	r3, #2
 8007246:	d132      	bne.n	80072ae <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800724e:	b29b      	uxth	r3, r3
 8007250:	2b01      	cmp	r3, #1
 8007252:	d918      	bls.n	8007286 <HAL_SPI_Transmit+0x1fa>
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007258:	2b00      	cmp	r3, #0
 800725a:	d014      	beq.n	8007286 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	6812      	ldr	r2, [r2, #0]
 8007266:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800726c:	1d1a      	adds	r2, r3, #4
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007278:	b29b      	uxth	r3, r3
 800727a:	3b02      	subs	r3, #2
 800727c:	b29a      	uxth	r2, r3
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007284:	e037      	b.n	80072f6 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800728a:	881a      	ldrh	r2, [r3, #0]
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007294:	1c9a      	adds	r2, r3, #2
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	3b01      	subs	r3, #1
 80072a4:	b29a      	uxth	r2, r3
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80072ac:	e023      	b.n	80072f6 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072ae:	f7fa f921 	bl	80014f4 <HAL_GetTick>
 80072b2:	4602      	mov	r2, r0
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	1ad3      	subs	r3, r2, r3
 80072b8:	683a      	ldr	r2, [r7, #0]
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d803      	bhi.n	80072c6 <HAL_SPI_Transmit+0x23a>
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072c4:	d102      	bne.n	80072cc <HAL_SPI_Transmit+0x240>
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d114      	bne.n	80072f6 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80072cc:	68f8      	ldr	r0, [r7, #12]
 80072ce:	f001 fa93 	bl	80087f8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80072d8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2201      	movs	r2, #1
 80072e6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2200      	movs	r2, #0
 80072ee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80072f2:	2303      	movs	r3, #3
 80072f4:	e0b3      	b.n	800745e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d19b      	bne.n	800723a <HAL_SPI_Transmit+0x1ae>
 8007302:	e086      	b.n	8007412 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	695b      	ldr	r3, [r3, #20]
 800730a:	f003 0302 	and.w	r3, r3, #2
 800730e:	2b02      	cmp	r3, #2
 8007310:	d154      	bne.n	80073bc <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007318:	b29b      	uxth	r3, r3
 800731a:	2b03      	cmp	r3, #3
 800731c:	d918      	bls.n	8007350 <HAL_SPI_Transmit+0x2c4>
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007322:	2b40      	cmp	r3, #64	@ 0x40
 8007324:	d914      	bls.n	8007350 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	6812      	ldr	r2, [r2, #0]
 8007330:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007336:	1d1a      	adds	r2, r3, #4
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007342:	b29b      	uxth	r3, r3
 8007344:	3b04      	subs	r3, #4
 8007346:	b29a      	uxth	r2, r3
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800734e:	e059      	b.n	8007404 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007356:	b29b      	uxth	r3, r3
 8007358:	2b01      	cmp	r3, #1
 800735a:	d917      	bls.n	800738c <HAL_SPI_Transmit+0x300>
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007360:	2b00      	cmp	r3, #0
 8007362:	d013      	beq.n	800738c <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007368:	881a      	ldrh	r2, [r3, #0]
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007372:	1c9a      	adds	r2, r3, #2
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800737e:	b29b      	uxth	r3, r3
 8007380:	3b02      	subs	r3, #2
 8007382:	b29a      	uxth	r2, r3
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800738a:	e03b      	b.n	8007404 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	3320      	adds	r3, #32
 8007396:	7812      	ldrb	r2, [r2, #0]
 8007398:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800739e:	1c5a      	adds	r2, r3, #1
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	3b01      	subs	r3, #1
 80073ae:	b29a      	uxth	r2, r3
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80073b6:	e025      	b.n	8007404 <HAL_SPI_Transmit+0x378>
 80073b8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073bc:	f7fa f89a 	bl	80014f4 <HAL_GetTick>
 80073c0:	4602      	mov	r2, r0
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	1ad3      	subs	r3, r2, r3
 80073c6:	683a      	ldr	r2, [r7, #0]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d803      	bhi.n	80073d4 <HAL_SPI_Transmit+0x348>
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073d2:	d102      	bne.n	80073da <HAL_SPI_Transmit+0x34e>
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d114      	bne.n	8007404 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80073da:	68f8      	ldr	r0, [r7, #12]
 80073dc:	f001 fa0c 	bl	80087f8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073e6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2201      	movs	r2, #1
 80073f4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007400:	2303      	movs	r3, #3
 8007402:	e02c      	b.n	800745e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800740a:	b29b      	uxth	r3, r3
 800740c:	2b00      	cmp	r3, #0
 800740e:	f47f af79 	bne.w	8007304 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	9300      	str	r3, [sp, #0]
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	2200      	movs	r2, #0
 800741a:	2108      	movs	r1, #8
 800741c:	68f8      	ldr	r0, [r7, #12]
 800741e:	f001 fa8b 	bl	8008938 <SPI_WaitOnFlagUntilTimeout>
 8007422:	4603      	mov	r3, r0
 8007424:	2b00      	cmp	r3, #0
 8007426:	d007      	beq.n	8007438 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800742e:	f043 0220 	orr.w	r2, r3, #32
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007438:	68f8      	ldr	r0, [r7, #12]
 800743a:	f001 f9dd 	bl	80087f8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2201      	movs	r2, #1
 8007442:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2200      	movs	r2, #0
 800744a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007454:	2b00      	cmp	r3, #0
 8007456:	d001      	beq.n	800745c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	e000      	b.n	800745e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800745c:	2300      	movs	r3, #0
  }
}
 800745e:	4618      	mov	r0, r3
 8007460:	3718      	adds	r7, #24
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop

08007468 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b088      	sub	sp, #32
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	603b      	str	r3, [r7, #0]
 8007474:	4613      	mov	r3, r2
 8007476:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800747c:	095b      	lsrs	r3, r3, #5
 800747e:	b29b      	uxth	r3, r3
 8007480:	3301      	adds	r3, #1
 8007482:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	3330      	adds	r3, #48	@ 0x30
 800748a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800748c:	f7fa f832 	bl	80014f4 <HAL_GetTick>
 8007490:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007498:	b2db      	uxtb	r3, r3
 800749a:	2b01      	cmp	r3, #1
 800749c:	d001      	beq.n	80074a2 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800749e:	2302      	movs	r3, #2
 80074a0:	e250      	b.n	8007944 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d002      	beq.n	80074ae <HAL_SPI_Receive+0x46>
 80074a8:	88fb      	ldrh	r3, [r7, #6]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d101      	bne.n	80074b2 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
 80074b0:	e248      	b.n	8007944 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d101      	bne.n	80074c0 <HAL_SPI_Receive+0x58>
 80074bc:	2302      	movs	r3, #2
 80074be:	e241      	b.n	8007944 <HAL_SPI_Receive+0x4dc>
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2204      	movs	r2, #4
 80074cc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2200      	movs	r2, #0
 80074d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	68ba      	ldr	r2, [r7, #8]
 80074dc:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	88fa      	ldrh	r2, [r7, #6]
 80074e2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	88fa      	ldrh	r2, [r7, #6]
 80074ea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2200      	movs	r2, #0
 80074f2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2200      	movs	r2, #0
 80074f8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2200      	movs	r2, #0
 8007500:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2200      	movs	r2, #0
 8007508:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2200      	movs	r2, #0
 800750e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007518:	d108      	bne.n	800752c <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007528:	601a      	str	r2, [r3, #0]
 800752a:	e009      	b.n	8007540 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	68db      	ldr	r3, [r3, #12]
 8007532:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800753e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	685a      	ldr	r2, [r3, #4]
 8007546:	4b95      	ldr	r3, [pc, #596]	@ (800779c <HAL_SPI_Receive+0x334>)
 8007548:	4013      	ands	r3, r2
 800754a:	88f9      	ldrh	r1, [r7, #6]
 800754c:	68fa      	ldr	r2, [r7, #12]
 800754e:	6812      	ldr	r2, [r2, #0]
 8007550:	430b      	orrs	r3, r1
 8007552:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f042 0201 	orr.w	r2, r2, #1
 8007562:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800756c:	d107      	bne.n	800757e <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800757c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	68db      	ldr	r3, [r3, #12]
 8007582:	2b0f      	cmp	r3, #15
 8007584:	d96c      	bls.n	8007660 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8007586:	e064      	b.n	8007652 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	695b      	ldr	r3, [r3, #20]
 800758e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	695b      	ldr	r3, [r3, #20]
 8007596:	f003 0301 	and.w	r3, r3, #1
 800759a:	2b01      	cmp	r3, #1
 800759c:	d114      	bne.n	80075c8 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075a6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80075a8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075ae:	1d1a      	adds	r2, r3, #4
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	3b01      	subs	r3, #1
 80075be:	b29a      	uxth	r2, r3
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80075c6:	e044      	b.n	8007652 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	8bfa      	ldrh	r2, [r7, #30]
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d919      	bls.n	800760a <HAL_SPI_Receive+0x1a2>
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d014      	beq.n	800760a <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075e8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80075ea:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075f0:	1d1a      	adds	r2, r3, #4
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	3b01      	subs	r3, #1
 8007600:	b29a      	uxth	r2, r3
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007608:	e023      	b.n	8007652 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800760a:	f7f9 ff73 	bl	80014f4 <HAL_GetTick>
 800760e:	4602      	mov	r2, r0
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	1ad3      	subs	r3, r2, r3
 8007614:	683a      	ldr	r2, [r7, #0]
 8007616:	429a      	cmp	r2, r3
 8007618:	d803      	bhi.n	8007622 <HAL_SPI_Receive+0x1ba>
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007620:	d102      	bne.n	8007628 <HAL_SPI_Receive+0x1c0>
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d114      	bne.n	8007652 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007628:	68f8      	ldr	r0, [r7, #12]
 800762a:	f001 f8e5 	bl	80087f8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007634:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2201      	movs	r2, #1
 8007642:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2200      	movs	r2, #0
 800764a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800764e:	2303      	movs	r3, #3
 8007650:	e178      	b.n	8007944 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007658:	b29b      	uxth	r3, r3
 800765a:	2b00      	cmp	r3, #0
 800765c:	d194      	bne.n	8007588 <HAL_SPI_Receive+0x120>
 800765e:	e15e      	b.n	800791e <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	2b07      	cmp	r3, #7
 8007666:	f240 8153 	bls.w	8007910 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800766a:	e08f      	b.n	800778c <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	695b      	ldr	r3, [r3, #20]
 8007672:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	695b      	ldr	r3, [r3, #20]
 800767a:	f003 0301 	and.w	r3, r3, #1
 800767e:	2b01      	cmp	r3, #1
 8007680:	d114      	bne.n	80076ac <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007686:	69ba      	ldr	r2, [r7, #24]
 8007688:	8812      	ldrh	r2, [r2, #0]
 800768a:	b292      	uxth	r2, r2
 800768c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007692:	1c9a      	adds	r2, r3, #2
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800769e:	b29b      	uxth	r3, r3
 80076a0:	3b01      	subs	r3, #1
 80076a2:	b29a      	uxth	r2, r3
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80076aa:	e06f      	b.n	800778c <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	8bfa      	ldrh	r2, [r7, #30]
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d924      	bls.n	8007704 <HAL_SPI_Receive+0x29c>
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d01f      	beq.n	8007704 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076c8:	69ba      	ldr	r2, [r7, #24]
 80076ca:	8812      	ldrh	r2, [r2, #0]
 80076cc:	b292      	uxth	r2, r2
 80076ce:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076d4:	1c9a      	adds	r2, r3, #2
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076de:	69ba      	ldr	r2, [r7, #24]
 80076e0:	8812      	ldrh	r2, [r2, #0]
 80076e2:	b292      	uxth	r2, r2
 80076e4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076ea:	1c9a      	adds	r2, r3, #2
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	3b02      	subs	r3, #2
 80076fa:	b29a      	uxth	r2, r3
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007702:	e043      	b.n	800778c <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800770a:	b29b      	uxth	r3, r3
 800770c:	2b01      	cmp	r3, #1
 800770e:	d119      	bne.n	8007744 <HAL_SPI_Receive+0x2dc>
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007716:	2b00      	cmp	r3, #0
 8007718:	d014      	beq.n	8007744 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800771e:	69ba      	ldr	r2, [r7, #24]
 8007720:	8812      	ldrh	r2, [r2, #0]
 8007722:	b292      	uxth	r2, r2
 8007724:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800772a:	1c9a      	adds	r2, r3, #2
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007736:	b29b      	uxth	r3, r3
 8007738:	3b01      	subs	r3, #1
 800773a:	b29a      	uxth	r2, r3
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007742:	e023      	b.n	800778c <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007744:	f7f9 fed6 	bl	80014f4 <HAL_GetTick>
 8007748:	4602      	mov	r2, r0
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	1ad3      	subs	r3, r2, r3
 800774e:	683a      	ldr	r2, [r7, #0]
 8007750:	429a      	cmp	r2, r3
 8007752:	d803      	bhi.n	800775c <HAL_SPI_Receive+0x2f4>
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800775a:	d102      	bne.n	8007762 <HAL_SPI_Receive+0x2fa>
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d114      	bne.n	800778c <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007762:	68f8      	ldr	r0, [r7, #12]
 8007764:	f001 f848 	bl	80087f8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800776e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2200      	movs	r2, #0
 8007784:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007788:	2303      	movs	r3, #3
 800778a:	e0db      	b.n	8007944 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007792:	b29b      	uxth	r3, r3
 8007794:	2b00      	cmp	r3, #0
 8007796:	f47f af69 	bne.w	800766c <HAL_SPI_Receive+0x204>
 800779a:	e0c0      	b.n	800791e <HAL_SPI_Receive+0x4b6>
 800779c:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	695b      	ldr	r3, [r3, #20]
 80077a6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	695b      	ldr	r3, [r3, #20]
 80077ae:	f003 0301 	and.w	r3, r3, #1
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d117      	bne.n	80077e6 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077c2:	7812      	ldrb	r2, [r2, #0]
 80077c4:	b2d2      	uxtb	r2, r2
 80077c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077cc:	1c5a      	adds	r2, r3, #1
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80077d8:	b29b      	uxth	r3, r3
 80077da:	3b01      	subs	r3, #1
 80077dc:	b29a      	uxth	r2, r3
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80077e4:	e094      	b.n	8007910 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	8bfa      	ldrh	r2, [r7, #30]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d946      	bls.n	8007882 <HAL_SPI_Receive+0x41a>
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d041      	beq.n	8007882 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800780a:	7812      	ldrb	r2, [r2, #0]
 800780c:	b2d2      	uxtb	r2, r2
 800780e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007814:	1c5a      	adds	r2, r3, #1
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007826:	7812      	ldrb	r2, [r2, #0]
 8007828:	b2d2      	uxtb	r2, r2
 800782a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007830:	1c5a      	adds	r2, r3, #1
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007842:	7812      	ldrb	r2, [r2, #0]
 8007844:	b2d2      	uxtb	r2, r2
 8007846:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800784c:	1c5a      	adds	r2, r3, #1
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800785e:	7812      	ldrb	r2, [r2, #0]
 8007860:	b2d2      	uxtb	r2, r2
 8007862:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007868:	1c5a      	adds	r2, r3, #1
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007874:	b29b      	uxth	r3, r3
 8007876:	3b04      	subs	r3, #4
 8007878:	b29a      	uxth	r2, r3
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007880:	e046      	b.n	8007910 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007888:	b29b      	uxth	r3, r3
 800788a:	2b03      	cmp	r3, #3
 800788c:	d81c      	bhi.n	80078c8 <HAL_SPI_Receive+0x460>
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8007894:	2b00      	cmp	r3, #0
 8007896:	d017      	beq.n	80078c8 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078a4:	7812      	ldrb	r2, [r2, #0]
 80078a6:	b2d2      	uxtb	r2, r2
 80078a8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078ae:	1c5a      	adds	r2, r3, #1
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	3b01      	subs	r3, #1
 80078be:	b29a      	uxth	r2, r3
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80078c6:	e023      	b.n	8007910 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078c8:	f7f9 fe14 	bl	80014f4 <HAL_GetTick>
 80078cc:	4602      	mov	r2, r0
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	1ad3      	subs	r3, r2, r3
 80078d2:	683a      	ldr	r2, [r7, #0]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d803      	bhi.n	80078e0 <HAL_SPI_Receive+0x478>
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078de:	d102      	bne.n	80078e6 <HAL_SPI_Receive+0x47e>
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d114      	bne.n	8007910 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80078e6:	68f8      	ldr	r0, [r7, #12]
 80078e8:	f000 ff86 	bl	80087f8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80078f2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2201      	movs	r2, #1
 8007900:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2200      	movs	r2, #0
 8007908:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800790c:	2303      	movs	r3, #3
 800790e:	e019      	b.n	8007944 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007916:	b29b      	uxth	r3, r3
 8007918:	2b00      	cmp	r3, #0
 800791a:	f47f af41 	bne.w	80077a0 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800791e:	68f8      	ldr	r0, [r7, #12]
 8007920:	f000 ff6a 	bl	80087f8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2201      	movs	r2, #1
 8007928:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2200      	movs	r2, #0
 8007930:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800793a:	2b00      	cmp	r3, #0
 800793c:	d001      	beq.n	8007942 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	e000      	b.n	8007944 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8007942:	2300      	movs	r3, #0
  }
}
 8007944:	4618      	mov	r0, r3
 8007946:	3720      	adds	r7, #32
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b08e      	sub	sp, #56	@ 0x38
 8007950:	af02      	add	r7, sp, #8
 8007952:	60f8      	str	r0, [r7, #12]
 8007954:	60b9      	str	r1, [r7, #8]
 8007956:	607a      	str	r2, [r7, #4]
 8007958:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	3320      	adds	r3, #32
 8007960:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	3330      	adds	r3, #48	@ 0x30
 8007968:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800796e:	095b      	lsrs	r3, r3, #5
 8007970:	b29b      	uxth	r3, r3
 8007972:	3301      	adds	r3, #1
 8007974:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007976:	f7f9 fdbd 	bl	80014f4 <HAL_GetTick>
 800797a:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800797c:	887b      	ldrh	r3, [r7, #2]
 800797e:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8007980:	887b      	ldrh	r3, [r7, #2]
 8007982:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800798a:	b2db      	uxtb	r3, r3
 800798c:	2b01      	cmp	r3, #1
 800798e:	d001      	beq.n	8007994 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8007990:	2302      	movs	r3, #2
 8007992:	e310      	b.n	8007fb6 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d005      	beq.n	80079a6 <HAL_SPI_TransmitReceive+0x5a>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d002      	beq.n	80079a6 <HAL_SPI_TransmitReceive+0x5a>
 80079a0:	887b      	ldrh	r3, [r7, #2]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d101      	bne.n	80079aa <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 80079a6:	2301      	movs	r3, #1
 80079a8:	e305      	b.n	8007fb6 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d101      	bne.n	80079b8 <HAL_SPI_TransmitReceive+0x6c>
 80079b4:	2302      	movs	r3, #2
 80079b6:	e2fe      	b.n	8007fb6 <HAL_SPI_TransmitReceive+0x66a>
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2205      	movs	r2, #5
 80079c4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2200      	movs	r2, #0
 80079cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	687a      	ldr	r2, [r7, #4]
 80079d4:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	887a      	ldrh	r2, [r7, #2]
 80079da:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	887a      	ldrh	r2, [r7, #2]
 80079e2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	68ba      	ldr	r2, [r7, #8]
 80079ea:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	887a      	ldrh	r2, [r7, #2]
 80079f0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	887a      	ldrh	r2, [r7, #2]
 80079f8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2200      	movs	r2, #0
 8007a00:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2200      	movs	r2, #0
 8007a06:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	68da      	ldr	r2, [r3, #12]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8007a16:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a70      	ldr	r2, [pc, #448]	@ (8007be0 <HAL_SPI_TransmitReceive+0x294>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d009      	beq.n	8007a36 <HAL_SPI_TransmitReceive+0xea>
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a6f      	ldr	r2, [pc, #444]	@ (8007be4 <HAL_SPI_TransmitReceive+0x298>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d004      	beq.n	8007a36 <HAL_SPI_TransmitReceive+0xea>
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a6d      	ldr	r2, [pc, #436]	@ (8007be8 <HAL_SPI_TransmitReceive+0x29c>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d102      	bne.n	8007a3c <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8007a36:	2310      	movs	r3, #16
 8007a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a3a:	e001      	b.n	8007a40 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8007a3c:	2308      	movs	r3, #8
 8007a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	685a      	ldr	r2, [r3, #4]
 8007a46:	4b69      	ldr	r3, [pc, #420]	@ (8007bec <HAL_SPI_TransmitReceive+0x2a0>)
 8007a48:	4013      	ands	r3, r2
 8007a4a:	8879      	ldrh	r1, [r7, #2]
 8007a4c:	68fa      	ldr	r2, [r7, #12]
 8007a4e:	6812      	ldr	r2, [r2, #0]
 8007a50:	430b      	orrs	r3, r1
 8007a52:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f042 0201 	orr.w	r2, r2, #1
 8007a62:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a6c:	d107      	bne.n	8007a7e <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a7c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	68db      	ldr	r3, [r3, #12]
 8007a82:	2b0f      	cmp	r3, #15
 8007a84:	f240 80a2 	bls.w	8007bcc <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8007a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a8a:	089b      	lsrs	r3, r3, #2
 8007a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007a8e:	e094      	b.n	8007bba <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	695b      	ldr	r3, [r3, #20]
 8007a96:	f003 0302 	and.w	r3, r3, #2
 8007a9a:	2b02      	cmp	r3, #2
 8007a9c:	d120      	bne.n	8007ae0 <HAL_SPI_TransmitReceive+0x194>
 8007a9e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d01d      	beq.n	8007ae0 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8007aa4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8007aa6:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8007aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aaa:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d217      	bcs.n	8007ae0 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	6812      	ldr	r2, [r2, #0]
 8007aba:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ac0:	1d1a      	adds	r2, r3, #4
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	3b01      	subs	r3, #1
 8007ad0:	b29a      	uxth	r2, r3
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007ade:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	695b      	ldr	r3, [r3, #20]
 8007ae6:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8007ae8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d065      	beq.n	8007bba <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	695b      	ldr	r3, [r3, #20]
 8007af4:	f003 0301 	and.w	r3, r3, #1
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d118      	bne.n	8007b2e <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b04:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007b06:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b0c:	1d1a      	adds	r2, r3, #4
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	3b01      	subs	r3, #1
 8007b1c:	b29a      	uxth	r2, r3
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b2a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007b2c:	e045      	b.n	8007bba <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007b2e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8007b30:	8bfb      	ldrh	r3, [r7, #30]
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d21d      	bcs.n	8007b72 <HAL_SPI_TransmitReceive+0x226>
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d018      	beq.n	8007b72 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b48:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007b4a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b50:	1d1a      	adds	r2, r3, #4
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	3b01      	subs	r3, #1
 8007b60:	b29a      	uxth	r2, r3
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b6e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007b70:	e023      	b.n	8007bba <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b72:	f7f9 fcbf 	bl	80014f4 <HAL_GetTick>
 8007b76:	4602      	mov	r2, r0
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	1ad3      	subs	r3, r2, r3
 8007b7c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d803      	bhi.n	8007b8a <HAL_SPI_TransmitReceive+0x23e>
 8007b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b88:	d102      	bne.n	8007b90 <HAL_SPI_TransmitReceive+0x244>
 8007b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d114      	bne.n	8007bba <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8007b90:	68f8      	ldr	r0, [r7, #12]
 8007b92:	f000 fe31 	bl	80087f8 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b9c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2201      	movs	r2, #1
 8007baa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8007bb6:	2303      	movs	r3, #3
 8007bb8:	e1fd      	b.n	8007fb6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007bba:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	f47f af67 	bne.w	8007a90 <HAL_SPI_TransmitReceive+0x144>
 8007bc2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	f47f af63 	bne.w	8007a90 <HAL_SPI_TransmitReceive+0x144>
 8007bca:	e1ce      	b.n	8007f6a <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	68db      	ldr	r3, [r3, #12]
 8007bd0:	2b07      	cmp	r3, #7
 8007bd2:	f240 81c2 	bls.w	8007f5a <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8007bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bd8:	085b      	lsrs	r3, r3, #1
 8007bda:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007bdc:	e0c9      	b.n	8007d72 <HAL_SPI_TransmitReceive+0x426>
 8007bde:	bf00      	nop
 8007be0:	40013000 	.word	0x40013000
 8007be4:	40003800 	.word	0x40003800
 8007be8:	40003c00 	.word	0x40003c00
 8007bec:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	695b      	ldr	r3, [r3, #20]
 8007bf6:	f003 0302 	and.w	r3, r3, #2
 8007bfa:	2b02      	cmp	r3, #2
 8007bfc:	d11f      	bne.n	8007c3e <HAL_SPI_TransmitReceive+0x2f2>
 8007bfe:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d01c      	beq.n	8007c3e <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8007c04:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8007c06:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8007c08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c0a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d216      	bcs.n	8007c3e <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c14:	881a      	ldrh	r2, [r3, #0]
 8007c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c18:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c1e:	1c9a      	adds	r2, r3, #2
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	3b01      	subs	r3, #1
 8007c2e:	b29a      	uxth	r2, r3
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007c3c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	695b      	ldr	r3, [r3, #20]
 8007c44:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8007c46:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	f000 8092 	beq.w	8007d72 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	695b      	ldr	r3, [r3, #20]
 8007c54:	f003 0301 	and.w	r3, r3, #1
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d118      	bne.n	8007c8e <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c60:	6a3a      	ldr	r2, [r7, #32]
 8007c62:	8812      	ldrh	r2, [r2, #0]
 8007c64:	b292      	uxth	r2, r2
 8007c66:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c6c:	1c9a      	adds	r2, r3, #2
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	3b01      	subs	r3, #1
 8007c7c:	b29a      	uxth	r2, r3
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007c8a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007c8c:	e071      	b.n	8007d72 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007c8e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8007c90:	8bfb      	ldrh	r3, [r7, #30]
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d228      	bcs.n	8007ce8 <HAL_SPI_TransmitReceive+0x39c>
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d023      	beq.n	8007ce8 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ca4:	6a3a      	ldr	r2, [r7, #32]
 8007ca6:	8812      	ldrh	r2, [r2, #0]
 8007ca8:	b292      	uxth	r2, r2
 8007caa:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007cb0:	1c9a      	adds	r2, r3, #2
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007cba:	6a3a      	ldr	r2, [r7, #32]
 8007cbc:	8812      	ldrh	r2, [r2, #0]
 8007cbe:	b292      	uxth	r2, r2
 8007cc0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007cc6:	1c9a      	adds	r2, r3, #2
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	3b02      	subs	r3, #2
 8007cd6:	b29a      	uxth	r2, r3
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007ce4:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007ce6:	e044      	b.n	8007d72 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8007ce8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d11d      	bne.n	8007d2a <HAL_SPI_TransmitReceive+0x3de>
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d018      	beq.n	8007d2a <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007cfc:	6a3a      	ldr	r2, [r7, #32]
 8007cfe:	8812      	ldrh	r2, [r2, #0]
 8007d00:	b292      	uxth	r2, r2
 8007d02:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d08:	1c9a      	adds	r2, r3, #2
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	3b01      	subs	r3, #1
 8007d18:	b29a      	uxth	r2, r3
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007d26:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007d28:	e023      	b.n	8007d72 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d2a:	f7f9 fbe3 	bl	80014f4 <HAL_GetTick>
 8007d2e:	4602      	mov	r2, r0
 8007d30:	69bb      	ldr	r3, [r7, #24]
 8007d32:	1ad3      	subs	r3, r2, r3
 8007d34:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d803      	bhi.n	8007d42 <HAL_SPI_TransmitReceive+0x3f6>
 8007d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d40:	d102      	bne.n	8007d48 <HAL_SPI_TransmitReceive+0x3fc>
 8007d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d114      	bne.n	8007d72 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8007d48:	68f8      	ldr	r0, [r7, #12]
 8007d4a:	f000 fd55 	bl	80087f8 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d54:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2201      	movs	r2, #1
 8007d62:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8007d6e:	2303      	movs	r3, #3
 8007d70:	e121      	b.n	8007fb6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007d72:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	f47f af3b 	bne.w	8007bf0 <HAL_SPI_TransmitReceive+0x2a4>
 8007d7a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	f47f af37 	bne.w	8007bf0 <HAL_SPI_TransmitReceive+0x2a4>
 8007d82:	e0f2      	b.n	8007f6a <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	695b      	ldr	r3, [r3, #20]
 8007d8a:	f003 0302 	and.w	r3, r3, #2
 8007d8e:	2b02      	cmp	r3, #2
 8007d90:	d121      	bne.n	8007dd6 <HAL_SPI_TransmitReceive+0x48a>
 8007d92:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d01e      	beq.n	8007dd6 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8007d98:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8007d9a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8007d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d9e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d218      	bcs.n	8007dd6 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	3320      	adds	r3, #32
 8007dae:	7812      	ldrb	r2, [r2, #0]
 8007db0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007db6:	1c5a      	adds	r2, r3, #1
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	3b01      	subs	r3, #1
 8007dc6:	b29a      	uxth	r2, r3
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007dd4:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	695b      	ldr	r3, [r3, #20]
 8007ddc:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8007dde:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	f000 80ba 	beq.w	8007f5a <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	695b      	ldr	r3, [r3, #20]
 8007dec:	f003 0301 	and.w	r3, r3, #1
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d11b      	bne.n	8007e2c <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e00:	7812      	ldrb	r2, [r2, #0]
 8007e02:	b2d2      	uxtb	r2, r2
 8007e04:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e0a:	1c5a      	adds	r2, r3, #1
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	3b01      	subs	r3, #1
 8007e1a:	b29a      	uxth	r2, r3
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007e28:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007e2a:	e096      	b.n	8007f5a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007e2c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8007e2e:	8bfb      	ldrh	r3, [r7, #30]
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d24a      	bcs.n	8007eca <HAL_SPI_TransmitReceive+0x57e>
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d045      	beq.n	8007eca <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e4a:	7812      	ldrb	r2, [r2, #0]
 8007e4c:	b2d2      	uxtb	r2, r2
 8007e4e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e54:	1c5a      	adds	r2, r3, #1
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e66:	7812      	ldrb	r2, [r2, #0]
 8007e68:	b2d2      	uxtb	r2, r2
 8007e6a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e70:	1c5a      	adds	r2, r3, #1
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e82:	7812      	ldrb	r2, [r2, #0]
 8007e84:	b2d2      	uxtb	r2, r2
 8007e86:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e8c:	1c5a      	adds	r2, r3, #1
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e9e:	7812      	ldrb	r2, [r2, #0]
 8007ea0:	b2d2      	uxtb	r2, r2
 8007ea2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ea8:	1c5a      	adds	r2, r3, #1
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	3b04      	subs	r3, #4
 8007eb8:	b29a      	uxth	r2, r3
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007ec6:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007ec8:	e047      	b.n	8007f5a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8007eca:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007ecc:	2b03      	cmp	r3, #3
 8007ece:	d820      	bhi.n	8007f12 <HAL_SPI_TransmitReceive+0x5c6>
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d01b      	beq.n	8007f12 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ee6:	7812      	ldrb	r2, [r2, #0]
 8007ee8:	b2d2      	uxtb	r2, r2
 8007eea:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ef0:	1c5a      	adds	r2, r3, #1
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	3b01      	subs	r3, #1
 8007f00:	b29a      	uxth	r2, r3
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007f0e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007f10:	e023      	b.n	8007f5a <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f12:	f7f9 faef 	bl	80014f4 <HAL_GetTick>
 8007f16:	4602      	mov	r2, r0
 8007f18:	69bb      	ldr	r3, [r7, #24]
 8007f1a:	1ad3      	subs	r3, r2, r3
 8007f1c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d803      	bhi.n	8007f2a <HAL_SPI_TransmitReceive+0x5de>
 8007f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f28:	d102      	bne.n	8007f30 <HAL_SPI_TransmitReceive+0x5e4>
 8007f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d114      	bne.n	8007f5a <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8007f30:	68f8      	ldr	r0, [r7, #12]
 8007f32:	f000 fc61 	bl	80087f8 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f3c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2201      	movs	r2, #1
 8007f4a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2200      	movs	r2, #0
 8007f52:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8007f56:	2303      	movs	r3, #3
 8007f58:	e02d      	b.n	8007fb6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007f5a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	f47f af11 	bne.w	8007d84 <HAL_SPI_TransmitReceive+0x438>
 8007f62:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	f47f af0d 	bne.w	8007d84 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8007f6a:	69bb      	ldr	r3, [r7, #24]
 8007f6c:	9300      	str	r3, [sp, #0]
 8007f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f70:	2200      	movs	r2, #0
 8007f72:	2108      	movs	r1, #8
 8007f74:	68f8      	ldr	r0, [r7, #12]
 8007f76:	f000 fcdf 	bl	8008938 <SPI_WaitOnFlagUntilTimeout>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d007      	beq.n	8007f90 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f86:	f043 0220 	orr.w	r2, r3, #32
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007f90:	68f8      	ldr	r0, [r7, #12]
 8007f92:	f000 fc31 	bl	80087f8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2201      	movs	r2, #1
 8007f9a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d001      	beq.n	8007fb4 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	e000      	b.n	8007fb6 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8007fb4:	2300      	movs	r3, #0
  }
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3730      	adds	r7, #48	@ 0x30
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	bf00      	nop

08007fc0 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	60f8      	str	r0, [r7, #12]
 8007fc8:	60b9      	str	r1, [r7, #8]
 8007fca:	607a      	str	r2, [r7, #4]
 8007fcc:	807b      	strh	r3, [r7, #2]
  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d001      	beq.n	8007fde <HAL_SPI_TransmitReceive_DMA+0x1e>
  {
    return HAL_BUSY;
 8007fda:	2302      	movs	r3, #2
 8007fdc:	e19c      	b.n	8008318 <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d005      	beq.n	8007ff0 <HAL_SPI_TransmitReceive_DMA+0x30>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d002      	beq.n	8007ff0 <HAL_SPI_TransmitReceive_DMA+0x30>
 8007fea:	887b      	ldrh	r3, [r7, #2]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d101      	bne.n	8007ff4 <HAL_SPI_TransmitReceive_DMA+0x34>
  {
    return HAL_ERROR;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	e191      	b.n	8008318 <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d101      	bne.n	8008002 <HAL_SPI_TransmitReceive_DMA+0x42>
 8007ffe:	2302      	movs	r3, #2
 8008000:	e18a      	b.n	8008318 <HAL_SPI_TransmitReceive_DMA+0x358>
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2201      	movs	r2, #1
 8008006:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2205      	movs	r2, #5
 800800e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2200      	movs	r2, #0
 8008016:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	68ba      	ldr	r2, [r7, #8]
 800801e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	887a      	ldrh	r2, [r7, #2]
 8008024:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	887a      	ldrh	r2, [r7, #2]
 800802c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	687a      	ldr	r2, [r7, #4]
 8008034:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	887a      	ldrh	r2, [r7, #2]
 800803a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	887a      	ldrh	r2, [r7, #2]
 8008042:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2200      	movs	r2, #0
 800804a:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2200      	movs	r2, #0
 8008050:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	68da      	ldr	r2, [r3, #12]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8008060:	60da      	str	r2, [r3, #12]

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	689a      	ldr	r2, [r3, #8]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008070:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && \
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	68db      	ldr	r3, [r3, #12]
 8008076:	2b0f      	cmp	r3, #15
 8008078:	d90b      	bls.n	8008092 <HAL_SPI_TransmitReceive_DMA+0xd2>
       ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD) || \
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800807e:	699b      	ldr	r3, [r3, #24]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && \
 8008080:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008084:	d121      	bne.n	80080ca <HAL_SPI_TransmitReceive_DMA+0x10a>
        (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))) || \
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800808a:	699b      	ldr	r3, [r3, #24]
       ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD) || \
 800808c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008090:	d11b      	bne.n	80080ca <HAL_SPI_TransmitReceive_DMA+0x10a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && \
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	68db      	ldr	r3, [r3, #12]
        (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))) || \
 8008096:	2b07      	cmp	r3, #7
 8008098:	d91d      	bls.n	80080d6 <HAL_SPI_TransmitReceive_DMA+0x116>
       (((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800809e:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && \
 80080a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080a4:	d005      	beq.n	80080b2 <HAL_SPI_TransmitReceive_DMA+0xf2>
         (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD)) || \
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80080aa:	699b      	ldr	r3, [r3, #24]
       (((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80080ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80080b0:	d10b      	bne.n	80080ca <HAL_SPI_TransmitReceive_DMA+0x10a>
        ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80080b6:	699b      	ldr	r3, [r3, #24]
         (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD)) || \
 80080b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080bc:	d00b      	beq.n	80080d6 <HAL_SPI_TransmitReceive_DMA+0x116>
         (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD)))))
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80080c2:	699b      	ldr	r3, [r3, #24]
        ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80080c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80080c8:	d005      	beq.n	80080d6 <HAL_SPI_TransmitReceive_DMA+0x116>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2200      	movs	r2, #0
 80080ce:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 80080d2:	2301      	movs	r3, #1
 80080d4:	e120      	b.n	8008318 <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	68db      	ldr	r3, [r3, #12]
 80080da:	2b07      	cmp	r3, #7
 80080dc:	d840      	bhi.n	8008160 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80080e2:	699b      	ldr	r3, [r3, #24]
 80080e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080e8:	d109      	bne.n	80080fe <HAL_SPI_TransmitReceive_DMA+0x13e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	3301      	adds	r3, #1
 80080f4:	105b      	asrs	r3, r3, #1
 80080f6:	b29a      	uxth	r2, r3
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008102:	699b      	ldr	r3, [r3, #24]
 8008104:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008108:	d109      	bne.n	800811e <HAL_SPI_TransmitReceive_DMA+0x15e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008110:	b29b      	uxth	r3, r3
 8008112:	3303      	adds	r3, #3
 8008114:	109b      	asrs	r3, r3, #2
 8008116:	b29a      	uxth	r2, r3
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008122:	699b      	ldr	r3, [r3, #24]
 8008124:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008128:	d109      	bne.n	800813e <HAL_SPI_TransmitReceive_DMA+0x17e>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008130:	b29b      	uxth	r3, r3
 8008132:	3301      	adds	r3, #1
 8008134:	105b      	asrs	r3, r3, #1
 8008136:	b29a      	uxth	r2, r3
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008142:	699b      	ldr	r3, [r3, #24]
 8008144:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008148:	d12e      	bne.n	80081a8 <HAL_SPI_TransmitReceive_DMA+0x1e8>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008150:	b29b      	uxth	r3, r3
 8008152:	3303      	adds	r3, #3
 8008154:	109b      	asrs	r3, r3, #2
 8008156:	b29a      	uxth	r2, r3
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800815e:	e023      	b.n	80081a8 <HAL_SPI_TransmitReceive_DMA+0x1e8>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	68db      	ldr	r3, [r3, #12]
 8008164:	2b0f      	cmp	r3, #15
 8008166:	d81f      	bhi.n	80081a8 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800816c:	699b      	ldr	r3, [r3, #24]
 800816e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008172:	d109      	bne.n	8008188 <HAL_SPI_TransmitReceive_DMA+0x1c8>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800817a:	b29b      	uxth	r3, r3
 800817c:	3301      	adds	r3, #1
 800817e:	105b      	asrs	r3, r3, #1
 8008180:	b29a      	uxth	r2, r3
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800818c:	699b      	ldr	r3, [r3, #24]
 800818e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008192:	d109      	bne.n	80081a8 <HAL_SPI_TransmitReceive_DMA+0x1e8>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800819a:	b29b      	uxth	r3, r3
 800819c:	3301      	adds	r3, #1
 800819e:	105b      	asrs	r3, r3, #1
 80081a0:	b29a      	uxth	r2, r3
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI Tx/Rx DMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80081ac:	4a5c      	ldr	r2, [pc, #368]	@ (8008320 <HAL_SPI_TransmitReceive_DMA+0x360>)
 80081ae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80081b4:	4a5b      	ldr	r2, [pc, #364]	@ (8008324 <HAL_SPI_TransmitReceive_DMA+0x364>)
 80081b6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80081bc:	4a5a      	ldr	r2, [pc, #360]	@ (8008328 <HAL_SPI_TransmitReceive_DMA+0x368>)
 80081be:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80081c4:	2200      	movs	r2, #0
 80081c6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	3330      	adds	r3, #48	@ 0x30
 80081d2:	4619      	mov	r1, r3
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081d8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80081e0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 80081e2:	f7f9 fe2f 	bl	8001e44 <HAL_DMA_Start_IT>
 80081e6:	4603      	mov	r3, r0
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d011      	beq.n	8008210 <HAL_SPI_TransmitReceive_DMA+0x250>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80081f2:	f043 0210 	orr.w	r2, r3, #16
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2201      	movs	r2, #1
 8008200:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2200      	movs	r2, #0
 8008208:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 800820c:	2301      	movs	r3, #1
 800820e:	e083      	b.n	8008318 <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	689a      	ldr	r2, [r3, #8]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800821e:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008224:	2200      	movs	r2, #0
 8008226:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800822c:	2200      	movs	r2, #0
 800822e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008234:	2200      	movs	r2, #0
 8008236:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800823c:	4a3a      	ldr	r2, [pc, #232]	@ (8008328 <HAL_SPI_TransmitReceive_DMA+0x368>)
 800823e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008248:	4619      	mov	r1, r3
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	3320      	adds	r3, #32
 8008250:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008258:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800825a:	f7f9 fdf3 	bl	8001e44 <HAL_DMA_Start_IT>
 800825e:	4603      	mov	r3, r0
 8008260:	2b00      	cmp	r3, #0
 8008262:	d016      	beq.n	8008292 <HAL_SPI_TransmitReceive_DMA+0x2d2>
  {
    /* Abort Rx DMA Channel already started */
    (void)HAL_DMA_Abort(hspi->hdmarx);
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008268:	4618      	mov	r0, r3
 800826a:	f7fa f855 	bl	8002318 <HAL_DMA_Abort>

    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008274:	f043 0210 	orr.w	r2, r3, #16
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2201      	movs	r2, #1
 8008282:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2200      	movs	r2, #0
 800828a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	e042      	b.n	8008318 <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008296:	69db      	ldr	r3, [r3, #28]
 8008298:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800829c:	d108      	bne.n	80082b0 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	6859      	ldr	r1, [r3, #4]
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681a      	ldr	r2, [r3, #0]
 80082a8:	4b20      	ldr	r3, [pc, #128]	@ (800832c <HAL_SPI_TransmitReceive_DMA+0x36c>)
 80082aa:	400b      	ands	r3, r1
 80082ac:	6053      	str	r3, [r2, #4]
 80082ae:	e009      	b.n	80082c4 <HAL_SPI_TransmitReceive_DMA+0x304>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	685a      	ldr	r2, [r3, #4]
 80082b6:	4b1d      	ldr	r3, [pc, #116]	@ (800832c <HAL_SPI_TransmitReceive_DMA+0x36c>)
 80082b8:	4013      	ands	r3, r2
 80082ba:	8879      	ldrh	r1, [r7, #2]
 80082bc:	68fa      	ldr	r2, [r7, #12]
 80082be:	6812      	ldr	r2, [r2, #0]
 80082c0:	430b      	orrs	r3, r1
 80082c2:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	689a      	ldr	r2, [r3, #8]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80082d2:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	691a      	ldr	r2, [r3, #16]
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f442 7258 	orr.w	r2, r2, #864	@ 0x360
 80082e2:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f042 0201 	orr.w	r2, r2, #1
 80082f2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80082fc:	d107      	bne.n	800830e <HAL_SPI_TransmitReceive_DMA+0x34e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	681a      	ldr	r2, [r3, #0]
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800830c:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2200      	movs	r2, #0
 8008312:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8008316:	2300      	movs	r3, #0
}
 8008318:	4618      	mov	r0, r3
 800831a:	3710      	adds	r7, #16
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}
 8008320:	08008763 	.word	0x08008763
 8008324:	0800871d 	.word	0x0800871d
 8008328:	0800877f 	.word	0x0800877f
 800832c:	ffff0000 	.word	0xffff0000

08008330 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b08a      	sub	sp, #40	@ 0x28
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	691b      	ldr	r3, [r3, #16]
 800833e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	695b      	ldr	r3, [r3, #20]
 8008346:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8008348:	6a3a      	ldr	r2, [r7, #32]
 800834a:	69fb      	ldr	r3, [r7, #28]
 800834c:	4013      	ands	r3, r2
 800834e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	689b      	ldr	r3, [r3, #8]
 8008356:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8008358:	2300      	movs	r3, #0
 800835a:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008362:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	3330      	adds	r3, #48	@ 0x30
 800836a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800836c:	69fb      	ldr	r3, [r7, #28]
 800836e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008372:	2b00      	cmp	r3, #0
 8008374:	d010      	beq.n	8008398 <HAL_SPI_IRQHandler+0x68>
 8008376:	6a3b      	ldr	r3, [r7, #32]
 8008378:	f003 0308 	and.w	r3, r3, #8
 800837c:	2b00      	cmp	r3, #0
 800837e:	d00b      	beq.n	8008398 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	699a      	ldr	r2, [r3, #24]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800838e:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 f9b9 	bl	8008708 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8008396:	e192      	b.n	80086be <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8008398:	69bb      	ldr	r3, [r7, #24]
 800839a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d113      	bne.n	80083ca <HAL_SPI_IRQHandler+0x9a>
 80083a2:	69bb      	ldr	r3, [r7, #24]
 80083a4:	f003 0320 	and.w	r3, r3, #32
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d10e      	bne.n	80083ca <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80083ac:	69bb      	ldr	r3, [r7, #24]
 80083ae:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d009      	beq.n	80083ca <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	4798      	blx	r3
    hspi->RxISR(hspi);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	4798      	blx	r3
    handled = 1UL;
 80083c6:	2301      	movs	r3, #1
 80083c8:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80083ca:	69bb      	ldr	r3, [r7, #24]
 80083cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d10f      	bne.n	80083f4 <HAL_SPI_IRQHandler+0xc4>
 80083d4:	69bb      	ldr	r3, [r7, #24]
 80083d6:	f003 0301 	and.w	r3, r3, #1
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d00a      	beq.n	80083f4 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80083de:	69bb      	ldr	r3, [r7, #24]
 80083e0:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d105      	bne.n	80083f4 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	4798      	blx	r3
    handled = 1UL;
 80083f0:	2301      	movs	r3, #1
 80083f2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80083f4:	69bb      	ldr	r3, [r7, #24]
 80083f6:	f003 0320 	and.w	r3, r3, #32
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d10f      	bne.n	800841e <HAL_SPI_IRQHandler+0xee>
 80083fe:	69bb      	ldr	r3, [r7, #24]
 8008400:	f003 0302 	and.w	r3, r3, #2
 8008404:	2b00      	cmp	r3, #0
 8008406:	d00a      	beq.n	800841e <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008408:	69bb      	ldr	r3, [r7, #24]
 800840a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800840e:	2b00      	cmp	r3, #0
 8008410:	d105      	bne.n	800841e <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	4798      	blx	r3
    handled = 1UL;
 800841a:	2301      	movs	r3, #1
 800841c:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800841e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008420:	2b00      	cmp	r3, #0
 8008422:	f040 8147 	bne.w	80086b4 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8008426:	69bb      	ldr	r3, [r7, #24]
 8008428:	f003 0308 	and.w	r3, r3, #8
 800842c:	2b00      	cmp	r3, #0
 800842e:	f000 808b 	beq.w	8008548 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	699a      	ldr	r2, [r3, #24]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f042 0208 	orr.w	r2, r2, #8
 8008440:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	699a      	ldr	r2, [r3, #24]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f042 0210 	orr.w	r2, r2, #16
 8008450:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	699a      	ldr	r2, [r3, #24]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008460:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	691a      	ldr	r2, [r3, #16]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f022 0208 	bic.w	r2, r2, #8
 8008470:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	689b      	ldr	r3, [r3, #8]
 8008478:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800847c:	2b00      	cmp	r3, #0
 800847e:	d13d      	bne.n	80084fc <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8008480:	e036      	b.n	80084f0 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	68db      	ldr	r3, [r3, #12]
 8008486:	2b0f      	cmp	r3, #15
 8008488:	d90b      	bls.n	80084a2 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681a      	ldr	r2, [r3, #0]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008492:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008494:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800849a:	1d1a      	adds	r2, r3, #4
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	665a      	str	r2, [r3, #100]	@ 0x64
 80084a0:	e01d      	b.n	80084de <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	68db      	ldr	r3, [r3, #12]
 80084a6:	2b07      	cmp	r3, #7
 80084a8:	d90b      	bls.n	80084c2 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084ae:	68fa      	ldr	r2, [r7, #12]
 80084b0:	8812      	ldrh	r2, [r2, #0]
 80084b2:	b292      	uxth	r2, r2
 80084b4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084ba:	1c9a      	adds	r2, r3, #2
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	665a      	str	r2, [r3, #100]	@ 0x64
 80084c0:	e00d      	b.n	80084de <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084ce:	7812      	ldrb	r2, [r2, #0]
 80084d0:	b2d2      	uxtb	r2, r2
 80084d2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084d8:	1c5a      	adds	r2, r3, #1
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	3b01      	subs	r3, #1
 80084e8:	b29a      	uxth	r2, r3
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d1c2      	bne.n	8008482 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f000 f97b 	bl	80087f8 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2201      	movs	r2, #1
 8008506:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008510:	2b00      	cmp	r3, #0
 8008512:	d003      	beq.n	800851c <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f7f8 fc7f 	bl	8000e18 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800851a:	e0d0      	b.n	80086be <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800851c:	7cfb      	ldrb	r3, [r7, #19]
 800851e:	2b05      	cmp	r3, #5
 8008520:	d103      	bne.n	800852a <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f7f8 fc60 	bl	8000de8 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8008528:	e0c6      	b.n	80086b8 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800852a:	7cfb      	ldrb	r3, [r7, #19]
 800852c:	2b04      	cmp	r3, #4
 800852e:	d103      	bne.n	8008538 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 f8d5 	bl	80086e0 <HAL_SPI_RxCpltCallback>
    return;
 8008536:	e0bf      	b.n	80086b8 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8008538:	7cfb      	ldrb	r3, [r7, #19]
 800853a:	2b03      	cmp	r3, #3
 800853c:	f040 80bc 	bne.w	80086b8 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f000 f8c3 	bl	80086cc <HAL_SPI_TxCpltCallback>
    return;
 8008546:	e0b7      	b.n	80086b8 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8008548:	69bb      	ldr	r3, [r7, #24]
 800854a:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800854e:	2b00      	cmp	r3, #0
 8008550:	f000 80b5 	beq.w	80086be <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8008554:	69bb      	ldr	r3, [r7, #24]
 8008556:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800855a:	2b00      	cmp	r3, #0
 800855c:	d00f      	beq.n	800857e <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008564:	f043 0204 	orr.w	r2, r3, #4
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	699a      	ldr	r2, [r3, #24]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800857c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800857e:	69bb      	ldr	r3, [r7, #24]
 8008580:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008584:	2b00      	cmp	r3, #0
 8008586:	d00f      	beq.n	80085a8 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800858e:	f043 0201 	orr.w	r2, r3, #1
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	699a      	ldr	r2, [r3, #24]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80085a6:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80085a8:	69bb      	ldr	r3, [r7, #24]
 80085aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d00f      	beq.n	80085d2 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80085b8:	f043 0208 	orr.w	r2, r3, #8
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	699a      	ldr	r2, [r3, #24]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80085d0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80085d2:	69bb      	ldr	r3, [r7, #24]
 80085d4:	f003 0320 	and.w	r3, r3, #32
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d00f      	beq.n	80085fc <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80085e2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	699a      	ldr	r2, [r3, #24]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f042 0220 	orr.w	r2, r2, #32
 80085fa:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008602:	2b00      	cmp	r3, #0
 8008604:	d05a      	beq.n	80086bc <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	681a      	ldr	r2, [r3, #0]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f022 0201 	bic.w	r2, r2, #1
 8008614:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	6919      	ldr	r1, [r3, #16]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681a      	ldr	r2, [r3, #0]
 8008620:	4b28      	ldr	r3, [pc, #160]	@ (80086c4 <HAL_SPI_IRQHandler+0x394>)
 8008622:	400b      	ands	r3, r1
 8008624:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800862c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008630:	d138      	bne.n	80086a4 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	689a      	ldr	r2, [r3, #8]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008640:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008646:	2b00      	cmp	r3, #0
 8008648:	d013      	beq.n	8008672 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800864e:	4a1e      	ldr	r2, [pc, #120]	@ (80086c8 <HAL_SPI_IRQHandler+0x398>)
 8008650:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008656:	4618      	mov	r0, r3
 8008658:	f7fa f97c 	bl	8002954 <HAL_DMA_Abort_IT>
 800865c:	4603      	mov	r3, r0
 800865e:	2b00      	cmp	r3, #0
 8008660:	d007      	beq.n	8008672 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008668:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008676:	2b00      	cmp	r3, #0
 8008678:	d020      	beq.n	80086bc <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800867e:	4a12      	ldr	r2, [pc, #72]	@ (80086c8 <HAL_SPI_IRQHandler+0x398>)
 8008680:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008686:	4618      	mov	r0, r3
 8008688:	f7fa f964 	bl	8002954 <HAL_DMA_Abort_IT>
 800868c:	4603      	mov	r3, r0
 800868e:	2b00      	cmp	r3, #0
 8008690:	d014      	beq.n	80086bc <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008698:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80086a2:	e00b      	b.n	80086bc <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2201      	movs	r2, #1
 80086a8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f7f8 fbb3 	bl	8000e18 <HAL_SPI_ErrorCallback>
    return;
 80086b2:	e003      	b.n	80086bc <HAL_SPI_IRQHandler+0x38c>
    return;
 80086b4:	bf00      	nop
 80086b6:	e002      	b.n	80086be <HAL_SPI_IRQHandler+0x38e>
    return;
 80086b8:	bf00      	nop
 80086ba:	e000      	b.n	80086be <HAL_SPI_IRQHandler+0x38e>
    return;
 80086bc:	bf00      	nop
  }
}
 80086be:	3728      	adds	r7, #40	@ 0x28
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}
 80086c4:	fffffc94 	.word	0xfffffc94
 80086c8:	080087c5 	.word	0x080087c5

080086cc <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80086cc:	b480      	push	{r7}
 80086ce:	b083      	sub	sp, #12
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80086d4:	bf00      	nop
 80086d6:	370c      	adds	r7, #12
 80086d8:	46bd      	mov	sp, r7
 80086da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086de:	4770      	bx	lr

080086e0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80086e0:	b480      	push	{r7}
 80086e2:	b083      	sub	sp, #12
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80086e8:	bf00      	nop
 80086ea:	370c      	adds	r7, #12
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr

080086f4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80086f4:	b480      	push	{r7}
 80086f6:	b083      	sub	sp, #12
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80086fc:	bf00      	nop
 80086fe:	370c      	adds	r7, #12
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr

08008708 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008708:	b480      	push	{r7}
 800870a:	b083      	sub	sp, #12
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8008710:	bf00      	nop
 8008712:	370c      	adds	r7, #12
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr

0800871c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b084      	sub	sp, #16
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008728:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008730:	b2db      	uxtb	r3, r3
 8008732:	2b07      	cmp	r3, #7
 8008734:	d011      	beq.n	800875a <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800873a:	69db      	ldr	r3, [r3, #28]
 800873c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008740:	d103      	bne.n	800874a <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 8008742:	68f8      	ldr	r0, [r7, #12]
 8008744:	f7f8 fb50 	bl	8000de8 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8008748:	e007      	b.n	800875a <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	691a      	ldr	r2, [r3, #16]
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f042 0208 	orr.w	r2, r2, #8
 8008758:	611a      	str	r2, [r3, #16]
}
 800875a:	bf00      	nop
 800875c:	3710      	adds	r7, #16
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008762:	b580      	push	{r7, lr}
 8008764:	b084      	sub	sp, #16
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800876e:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8008770:	68f8      	ldr	r0, [r7, #12]
 8008772:	f7ff ffbf 	bl	80086f4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008776:	bf00      	nop
 8008778:	3710      	adds	r7, #16
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}

0800877e <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800877e:	b580      	push	{r7, lr}
 8008780:	b084      	sub	sp, #16
 8008782:	af00      	add	r7, sp, #0
 8008784:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800878a:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f7fb fa51 	bl	8003c34 <HAL_DMA_GetError>
 8008792:	4603      	mov	r3, r0
 8008794:	2b02      	cmp	r3, #2
 8008796:	d011      	beq.n	80087bc <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8008798:	68f8      	ldr	r0, [r7, #12]
 800879a:	f000 f82d 	bl	80087f8 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087a4:	f043 0210 	orr.w	r2, r3, #16
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2201      	movs	r2, #1
 80087b2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80087b6:	68f8      	ldr	r0, [r7, #12]
 80087b8:	f7f8 fb2e 	bl	8000e18 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80087bc:	bf00      	nop
 80087be:	3710      	adds	r7, #16
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b084      	sub	sp, #16
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087d0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2200      	movs	r2, #0
 80087d6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2200      	movs	r2, #0
 80087de:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2201      	movs	r2, #1
 80087e6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80087ea:	68f8      	ldr	r0, [r7, #12]
 80087ec:	f7f8 fb14 	bl	8000e18 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80087f0:	bf00      	nop
 80087f2:	3710      	adds	r7, #16
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b085      	sub	sp, #20
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	695b      	ldr	r3, [r3, #20]
 8008806:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	699a      	ldr	r2, [r3, #24]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f042 0208 	orr.w	r2, r2, #8
 8008816:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	699a      	ldr	r2, [r3, #24]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f042 0210 	orr.w	r2, r2, #16
 8008826:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	681a      	ldr	r2, [r3, #0]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f022 0201 	bic.w	r2, r2, #1
 8008836:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	6919      	ldr	r1, [r3, #16]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681a      	ldr	r2, [r3, #0]
 8008842:	4b3c      	ldr	r3, [pc, #240]	@ (8008934 <SPI_CloseTransfer+0x13c>)
 8008844:	400b      	ands	r3, r1
 8008846:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	689a      	ldr	r2, [r3, #8]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008856:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800885e:	b2db      	uxtb	r3, r3
 8008860:	2b04      	cmp	r3, #4
 8008862:	d014      	beq.n	800888e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f003 0320 	and.w	r3, r3, #32
 800886a:	2b00      	cmp	r3, #0
 800886c:	d00f      	beq.n	800888e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008874:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	699a      	ldr	r2, [r3, #24]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f042 0220 	orr.w	r2, r2, #32
 800888c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008894:	b2db      	uxtb	r3, r3
 8008896:	2b03      	cmp	r3, #3
 8008898:	d014      	beq.n	80088c4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d00f      	beq.n	80088c4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80088aa:	f043 0204 	orr.w	r2, r3, #4
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	699a      	ldr	r2, [r3, #24]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80088c2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d00f      	beq.n	80088ee <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80088d4:	f043 0201 	orr.w	r2, r3, #1
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	699a      	ldr	r2, [r3, #24]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80088ec:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d00f      	beq.n	8008918 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80088fe:	f043 0208 	orr.w	r2, r3, #8
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	699a      	ldr	r2, [r3, #24]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008916:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2200      	movs	r2, #0
 800891c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2200      	movs	r2, #0
 8008924:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8008928:	bf00      	nop
 800892a:	3714      	adds	r7, #20
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr
 8008934:	fffffc90 	.word	0xfffffc90

08008938 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b084      	sub	sp, #16
 800893c:	af00      	add	r7, sp, #0
 800893e:	60f8      	str	r0, [r7, #12]
 8008940:	60b9      	str	r1, [r7, #8]
 8008942:	603b      	str	r3, [r7, #0]
 8008944:	4613      	mov	r3, r2
 8008946:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008948:	e010      	b.n	800896c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800894a:	f7f8 fdd3 	bl	80014f4 <HAL_GetTick>
 800894e:	4602      	mov	r2, r0
 8008950:	69bb      	ldr	r3, [r7, #24]
 8008952:	1ad3      	subs	r3, r2, r3
 8008954:	683a      	ldr	r2, [r7, #0]
 8008956:	429a      	cmp	r2, r3
 8008958:	d803      	bhi.n	8008962 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008960:	d102      	bne.n	8008968 <SPI_WaitOnFlagUntilTimeout+0x30>
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d101      	bne.n	800896c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008968:	2303      	movs	r3, #3
 800896a:	e00f      	b.n	800898c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	695a      	ldr	r2, [r3, #20]
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	4013      	ands	r3, r2
 8008976:	68ba      	ldr	r2, [r7, #8]
 8008978:	429a      	cmp	r2, r3
 800897a:	bf0c      	ite	eq
 800897c:	2301      	moveq	r3, #1
 800897e:	2300      	movne	r3, #0
 8008980:	b2db      	uxtb	r3, r3
 8008982:	461a      	mov	r2, r3
 8008984:	79fb      	ldrb	r3, [r7, #7]
 8008986:	429a      	cmp	r2, r3
 8008988:	d0df      	beq.n	800894a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800898a:	2300      	movs	r3, #0
}
 800898c:	4618      	mov	r0, r3
 800898e:	3710      	adds	r7, #16
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}

08008994 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008994:	b480      	push	{r7}
 8008996:	b085      	sub	sp, #20
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089a0:	095b      	lsrs	r3, r3, #5
 80089a2:	3301      	adds	r3, #1
 80089a4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	68db      	ldr	r3, [r3, #12]
 80089aa:	3301      	adds	r3, #1
 80089ac:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	3307      	adds	r3, #7
 80089b2:	08db      	lsrs	r3, r3, #3
 80089b4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	68fa      	ldr	r2, [r7, #12]
 80089ba:	fb02 f303 	mul.w	r3, r2, r3
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3714      	adds	r7, #20
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr

080089ca <memset>:
 80089ca:	4402      	add	r2, r0
 80089cc:	4603      	mov	r3, r0
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d100      	bne.n	80089d4 <memset+0xa>
 80089d2:	4770      	bx	lr
 80089d4:	f803 1b01 	strb.w	r1, [r3], #1
 80089d8:	e7f9      	b.n	80089ce <memset+0x4>
	...

080089dc <__libc_init_array>:
 80089dc:	b570      	push	{r4, r5, r6, lr}
 80089de:	4d0d      	ldr	r5, [pc, #52]	@ (8008a14 <__libc_init_array+0x38>)
 80089e0:	4c0d      	ldr	r4, [pc, #52]	@ (8008a18 <__libc_init_array+0x3c>)
 80089e2:	1b64      	subs	r4, r4, r5
 80089e4:	10a4      	asrs	r4, r4, #2
 80089e6:	2600      	movs	r6, #0
 80089e8:	42a6      	cmp	r6, r4
 80089ea:	d109      	bne.n	8008a00 <__libc_init_array+0x24>
 80089ec:	4d0b      	ldr	r5, [pc, #44]	@ (8008a1c <__libc_init_array+0x40>)
 80089ee:	4c0c      	ldr	r4, [pc, #48]	@ (8008a20 <__libc_init_array+0x44>)
 80089f0:	f000 f818 	bl	8008a24 <_init>
 80089f4:	1b64      	subs	r4, r4, r5
 80089f6:	10a4      	asrs	r4, r4, #2
 80089f8:	2600      	movs	r6, #0
 80089fa:	42a6      	cmp	r6, r4
 80089fc:	d105      	bne.n	8008a0a <__libc_init_array+0x2e>
 80089fe:	bd70      	pop	{r4, r5, r6, pc}
 8008a00:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a04:	4798      	blx	r3
 8008a06:	3601      	adds	r6, #1
 8008a08:	e7ee      	b.n	80089e8 <__libc_init_array+0xc>
 8008a0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a0e:	4798      	blx	r3
 8008a10:	3601      	adds	r6, #1
 8008a12:	e7f2      	b.n	80089fa <__libc_init_array+0x1e>
 8008a14:	08008a54 	.word	0x08008a54
 8008a18:	08008a54 	.word	0x08008a54
 8008a1c:	08008a54 	.word	0x08008a54
 8008a20:	08008a58 	.word	0x08008a58

08008a24 <_init>:
 8008a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a26:	bf00      	nop
 8008a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a2a:	bc08      	pop	{r3}
 8008a2c:	469e      	mov	lr, r3
 8008a2e:	4770      	bx	lr

08008a30 <_fini>:
 8008a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a32:	bf00      	nop
 8008a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a36:	bc08      	pop	{r3}
 8008a38:	469e      	mov	lr, r3
 8008a3a:	4770      	bx	lr
